
[RTOS]Software_Timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e20  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  08004f30  08004f30  00014f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051a4  080051a4  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080051a4  080051a4  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080051a4  080051a4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051a4  080051a4  000151a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051a8  080051a8  000151a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080051ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b94  20000074  08005220  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c08  08005220  00021c08  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013396  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000028a4  00000000  00000000  00033433  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d70  00000000  00000000  00035cd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c48  00000000  00000000  00036a48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003c6d  00000000  00000000  00037690  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d82d  00000000  00000000  0003b2fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00074cd0  00000000  00000000  00048b2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bd7fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039a4  00000000  00000000  000bd878  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08004f18 	.word	0x08004f18

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08004f18 	.word	0x08004f18

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000162:	b08f      	sub	sp, #60	; 0x3c
 8000164:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000166:	f000 fca9 	bl	8000abc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800016a:	f000 f945 	bl	80003f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016e:	f000 f9b3 	bl	80004d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000172:	f000 f987 	bl	8000484 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  offAllLed;
 8000176:	2201      	movs	r2, #1
 8000178:	2120      	movs	r1, #32
 800017a:	488a      	ldr	r0, [pc, #552]	; (80003a4 <main+0x244>)
 800017c:	f000 ff3e 	bl	8000ffc <HAL_GPIO_WritePin>
 8000180:	2201      	movs	r2, #1
 8000182:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000186:	4888      	ldr	r0, [pc, #544]	; (80003a8 <main+0x248>)
 8000188:	f000 ff38 	bl	8000ffc <HAL_GPIO_WritePin>
 800018c:	2201      	movs	r2, #1
 800018e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000192:	4885      	ldr	r0, [pc, #532]	; (80003a8 <main+0x248>)
 8000194:	f000 ff32 	bl	8000ffc <HAL_GPIO_WritePin>
 8000198:	2201      	movs	r2, #1
 800019a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800019e:	4881      	ldr	r0, [pc, #516]	; (80003a4 <main+0x244>)
 80001a0:	f000 ff2c 	bl	8000ffc <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001a4:	f001 fd80 	bl	8001ca8 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of PeriodicTimer1 */
  PeriodicTimer1Handle = xTimerCreate("PeriodicTimer1", PERIOD_TIMER_1, pdTRUE, 0, PeriodicTimer1Callback);
 80001a8:	4b80      	ldr	r3, [pc, #512]	; (80003ac <main+0x24c>)
 80001aa:	9300      	str	r3, [sp, #0]
 80001ac:	2300      	movs	r3, #0
 80001ae:	2201      	movs	r2, #1
 80001b0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80001b4:	487e      	ldr	r0, [pc, #504]	; (80003b0 <main+0x250>)
 80001b6:	f003 fb95 	bl	80038e4 <xTimerCreate>
 80001ba:	4602      	mov	r2, r0
 80001bc:	4b7d      	ldr	r3, [pc, #500]	; (80003b4 <main+0x254>)
 80001be:	601a      	str	r2, [r3, #0]
  PeriodicTimer2Handle = xTimerCreate("PeriodicTimer2", PERIOD_TIMER_2, pdTRUE, 0, PeriodicTimer2Callback);
 80001c0:	4b7d      	ldr	r3, [pc, #500]	; (80003b8 <main+0x258>)
 80001c2:	9300      	str	r3, [sp, #0]
 80001c4:	2300      	movs	r3, #0
 80001c6:	2201      	movs	r2, #1
 80001c8:	2132      	movs	r1, #50	; 0x32
 80001ca:	487c      	ldr	r0, [pc, #496]	; (80003bc <main+0x25c>)
 80001cc:	f003 fb8a 	bl	80038e4 <xTimerCreate>
 80001d0:	4602      	mov	r2, r0
 80001d2:	4b7b      	ldr	r3, [pc, #492]	; (80003c0 <main+0x260>)
 80001d4:	601a      	str	r2, [r3, #0]
  OneShotTimer3Handle = xTimerCreate("OneShotTimer3", ONESHOT_TIMER_3, pdFALSE, 0, OneShotTimer3Callback);
 80001d6:	4b7b      	ldr	r3, [pc, #492]	; (80003c4 <main+0x264>)
 80001d8:	9300      	str	r3, [sp, #0]
 80001da:	2300      	movs	r3, #0
 80001dc:	2200      	movs	r2, #0
 80001de:	f640 5105 	movw	r1, #3333	; 0xd05
 80001e2:	4879      	ldr	r0, [pc, #484]	; (80003c8 <main+0x268>)
 80001e4:	f003 fb7e 	bl	80038e4 <xTimerCreate>
 80001e8:	4602      	mov	r2, r0
 80001ea:	4b78      	ldr	r3, [pc, #480]	; (80003cc <main+0x26c>)
 80001ec:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  if ((PeriodicTimer1Handle == NULL) || (PeriodicTimer2Handle == NULL) || (OneShotTimer3Handle == NULL))
 80001ee:	4b71      	ldr	r3, [pc, #452]	; (80003b4 <main+0x254>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d007      	beq.n	8000206 <main+0xa6>
 80001f6:	4b72      	ldr	r3, [pc, #456]	; (80003c0 <main+0x260>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d003      	beq.n	8000206 <main+0xa6>
 80001fe:	4b73      	ldr	r3, [pc, #460]	; (80003cc <main+0x26c>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	2b00      	cmp	r3, #0
 8000204:	d131      	bne.n	800026a <main+0x10a>
  {
    error_count++;
 8000206:	4b72      	ldr	r3, [pc, #456]	; (80003d0 <main+0x270>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	3301      	adds	r3, #1
 800020c:	4a70      	ldr	r2, [pc, #448]	; (80003d0 <main+0x270>)
 800020e:	6013      	str	r3, [r2, #0]
    PRINTF("Failed to initialize software timers\r\n");
 8000210:	4b70      	ldr	r3, [pc, #448]	; (80003d4 <main+0x274>)
 8000212:	4a71      	ldr	r2, [pc, #452]	; (80003d8 <main+0x278>)
 8000214:	4614      	mov	r4, r2
 8000216:	469c      	mov	ip, r3
 8000218:	f104 0e20 	add.w	lr, r4, #32
 800021c:	4665      	mov	r5, ip
 800021e:	4626      	mov	r6, r4
 8000220:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000222:	6028      	str	r0, [r5, #0]
 8000224:	6069      	str	r1, [r5, #4]
 8000226:	60aa      	str	r2, [r5, #8]
 8000228:	60eb      	str	r3, [r5, #12]
 800022a:	3410      	adds	r4, #16
 800022c:	f10c 0c10 	add.w	ip, ip, #16
 8000230:	4574      	cmp	r4, lr
 8000232:	d1f3      	bne.n	800021c <main+0xbc>
 8000234:	4663      	mov	r3, ip
 8000236:	4622      	mov	r2, r4
 8000238:	6810      	ldr	r0, [r2, #0]
 800023a:	6018      	str	r0, [r3, #0]
 800023c:	8891      	ldrh	r1, [r2, #4]
 800023e:	7992      	ldrb	r2, [r2, #6]
 8000240:	8099      	strh	r1, [r3, #4]
 8000242:	719a      	strb	r2, [r3, #6]
 8000244:	4e65      	ldr	r6, [pc, #404]	; (80003dc <main+0x27c>)
 8000246:	4b63      	ldr	r3, [pc, #396]	; (80003d4 <main+0x274>)
 8000248:	930c      	str	r3, [sp, #48]	; 0x30
 800024a:	466d      	mov	r5, sp
 800024c:	f106 0410 	add.w	r4, r6, #16
 8000250:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000252:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000254:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000256:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000258:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800025c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000260:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000264:	f000 fad4 	bl	8000810 <vUARTSend>
 8000268:	e023      	b.n	80002b2 <main+0x152>
  }
  else
  {
    /* Start software timers */
    xTimerStart(PeriodicTimer1Handle, 0);
 800026a:	4b52      	ldr	r3, [pc, #328]	; (80003b4 <main+0x254>)
 800026c:	681c      	ldr	r4, [r3, #0]
 800026e:	f002 fee3 	bl	8003038 <xTaskGetTickCount>
 8000272:	4602      	mov	r2, r0
 8000274:	2300      	movs	r3, #0
 8000276:	9300      	str	r3, [sp, #0]
 8000278:	2300      	movs	r3, #0
 800027a:	2101      	movs	r1, #1
 800027c:	4620      	mov	r0, r4
 800027e:	f003 fb83 	bl	8003988 <xTimerGenericCommand>
    xTimerStart(PeriodicTimer2Handle, 0);
 8000282:	4b4f      	ldr	r3, [pc, #316]	; (80003c0 <main+0x260>)
 8000284:	681c      	ldr	r4, [r3, #0]
 8000286:	f002 fed7 	bl	8003038 <xTaskGetTickCount>
 800028a:	4602      	mov	r2, r0
 800028c:	2300      	movs	r3, #0
 800028e:	9300      	str	r3, [sp, #0]
 8000290:	2300      	movs	r3, #0
 8000292:	2101      	movs	r1, #1
 8000294:	4620      	mov	r0, r4
 8000296:	f003 fb77 	bl	8003988 <xTimerGenericCommand>
    xTimerStart(OneShotTimer3Handle, 0);
 800029a:	4b4c      	ldr	r3, [pc, #304]	; (80003cc <main+0x26c>)
 800029c:	681c      	ldr	r4, [r3, #0]
 800029e:	f002 fecb 	bl	8003038 <xTaskGetTickCount>
 80002a2:	4602      	mov	r2, r0
 80002a4:	2300      	movs	r3, #0
 80002a6:	9300      	str	r3, [sp, #0]
 80002a8:	2300      	movs	r3, #0
 80002aa:	2101      	movs	r1, #1
 80002ac:	4620      	mov	r0, r4
 80002ae:	f003 fb6b 	bl	8003988 <xTimerGenericCommand>
  }
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_THREADS */
  blinkLed1Handle = osThreadNew(blinkTask, NULL, &blinkLed1_attributes);
 80002b2:	4a4b      	ldr	r2, [pc, #300]	; (80003e0 <main+0x280>)
 80002b4:	2100      	movs	r1, #0
 80002b6:	484b      	ldr	r0, [pc, #300]	; (80003e4 <main+0x284>)
 80002b8:	f001 fd5c 	bl	8001d74 <osThreadNew>
 80002bc:	4602      	mov	r2, r0
 80002be:	4b4a      	ldr	r3, [pc, #296]	; (80003e8 <main+0x288>)
 80002c0:	601a      	str	r2, [r3, #0]
  if (blinkLed1Handle == NULL)
 80002c2:	4b49      	ldr	r3, [pc, #292]	; (80003e8 <main+0x288>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d125      	bne.n	8000316 <main+0x1b6>
  {
    PRINTF("Failed to create user tasks\r\n");
 80002ca:	4a42      	ldr	r2, [pc, #264]	; (80003d4 <main+0x274>)
 80002cc:	4b47      	ldr	r3, [pc, #284]	; (80003ec <main+0x28c>)
 80002ce:	4615      	mov	r5, r2
 80002d0:	461c      	mov	r4, r3
 80002d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002d4:	6028      	str	r0, [r5, #0]
 80002d6:	6069      	str	r1, [r5, #4]
 80002d8:	60aa      	str	r2, [r5, #8]
 80002da:	60eb      	str	r3, [r5, #12]
 80002dc:	cc07      	ldmia	r4!, {r0, r1, r2}
 80002de:	6128      	str	r0, [r5, #16]
 80002e0:	6169      	str	r1, [r5, #20]
 80002e2:	61aa      	str	r2, [r5, #24]
 80002e4:	8823      	ldrh	r3, [r4, #0]
 80002e6:	83ab      	strh	r3, [r5, #28]
 80002e8:	4e3c      	ldr	r6, [pc, #240]	; (80003dc <main+0x27c>)
 80002ea:	4b3a      	ldr	r3, [pc, #232]	; (80003d4 <main+0x274>)
 80002ec:	930c      	str	r3, [sp, #48]	; 0x30
 80002ee:	466d      	mov	r5, sp
 80002f0:	f106 0410 	add.w	r4, r6, #16
 80002f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80002f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80002fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000300:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000304:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000308:	f000 fa82 	bl	8000810 <vUARTSend>
    error_count++;
 800030c:	4b30      	ldr	r3, [pc, #192]	; (80003d0 <main+0x270>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	3301      	adds	r3, #1
 8000312:	4a2f      	ldr	r2, [pc, #188]	; (80003d0 <main+0x270>)
 8000314:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END RTOS_THREADS */

  if (error_count == 0)
 8000316:	4b2e      	ldr	r3, [pc, #184]	; (80003d0 <main+0x270>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	2b00      	cmp	r3, #0
 800031c:	d11f      	bne.n	800035e <main+0x1fe>
  {
    PRINTF("Start RTOS_Kernel\r\n");
 800031e:	4a2d      	ldr	r2, [pc, #180]	; (80003d4 <main+0x274>)
 8000320:	4b33      	ldr	r3, [pc, #204]	; (80003f0 <main+0x290>)
 8000322:	4615      	mov	r5, r2
 8000324:	461c      	mov	r4, r3
 8000326:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000328:	6028      	str	r0, [r5, #0]
 800032a:	6069      	str	r1, [r5, #4]
 800032c:	60aa      	str	r2, [r5, #8]
 800032e:	60eb      	str	r3, [r5, #12]
 8000330:	6820      	ldr	r0, [r4, #0]
 8000332:	6128      	str	r0, [r5, #16]
 8000334:	4e29      	ldr	r6, [pc, #164]	; (80003dc <main+0x27c>)
 8000336:	4b27      	ldr	r3, [pc, #156]	; (80003d4 <main+0x274>)
 8000338:	930c      	str	r3, [sp, #48]	; 0x30
 800033a:	466d      	mov	r5, sp
 800033c:	f106 0410 	add.w	r4, r6, #16
 8000340:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000342:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000344:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000346:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000348:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800034c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000350:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000354:	f000 fa5c 	bl	8000810 <vUARTSend>
    osKernelStart();
 8000358:	f001 fcd8 	bl	8001d0c <osKernelStart>
 800035c:	e020      	b.n	80003a0 <main+0x240>
  }
  else
  {
    PRINTF("Failed to start RTOS_Kernel\r\n");
 800035e:	4a1d      	ldr	r2, [pc, #116]	; (80003d4 <main+0x274>)
 8000360:	4b24      	ldr	r3, [pc, #144]	; (80003f4 <main+0x294>)
 8000362:	4615      	mov	r5, r2
 8000364:	461c      	mov	r4, r3
 8000366:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000368:	6028      	str	r0, [r5, #0]
 800036a:	6069      	str	r1, [r5, #4]
 800036c:	60aa      	str	r2, [r5, #8]
 800036e:	60eb      	str	r3, [r5, #12]
 8000370:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000372:	6128      	str	r0, [r5, #16]
 8000374:	6169      	str	r1, [r5, #20]
 8000376:	61aa      	str	r2, [r5, #24]
 8000378:	8823      	ldrh	r3, [r4, #0]
 800037a:	83ab      	strh	r3, [r5, #28]
 800037c:	4e17      	ldr	r6, [pc, #92]	; (80003dc <main+0x27c>)
 800037e:	4b15      	ldr	r3, [pc, #84]	; (80003d4 <main+0x274>)
 8000380:	930c      	str	r3, [sp, #48]	; 0x30
 8000382:	466d      	mov	r5, sp
 8000384:	f106 0410 	add.w	r4, r6, #16
 8000388:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800038a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800038c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800038e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000390:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000394:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000398:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800039c:	f000 fa38 	bl	8000810 <vUARTSend>
  /* Start scheduler */

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003a0:	e7fe      	b.n	80003a0 <main+0x240>
 80003a2:	bf00      	nop
 80003a4:	40010c00 	.word	0x40010c00
 80003a8:	40010800 	.word	0x40010800
 80003ac:	080005bd 	.word	0x080005bd
 80003b0:	08004f3c 	.word	0x08004f3c
 80003b4:	20001b74 	.word	0x20001b74
 80003b8:	08000651 	.word	0x08000651
 80003bc:	08004f4c 	.word	0x08004f4c
 80003c0:	20001bb8 	.word	0x20001bb8
 80003c4:	08000775 	.word	0x08000775
 80003c8:	08004f5c 	.word	0x08004f5c
 80003cc:	20001bbc 	.word	0x20001bbc
 80003d0:	20000090 	.word	0x20000090
 80003d4:	20001b0c 	.word	0x20001b0c
 80003d8:	08004f6c 	.word	0x08004f6c
 80003dc:	20001b78 	.word	0x20001b78
 80003e0:	08005134 	.word	0x08005134
 80003e4:	0800059d 	.word	0x0800059d
 80003e8:	20001b70 	.word	0x20001b70
 80003ec:	08004f94 	.word	0x08004f94
 80003f0:	08004fb4 	.word	0x08004fb4
 80003f4:	08004fc8 	.word	0x08004fc8

080003f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b090      	sub	sp, #64	; 0x40
 80003fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003fe:	f107 0318 	add.w	r3, r7, #24
 8000402:	2228      	movs	r2, #40	; 0x28
 8000404:	2100      	movs	r1, #0
 8000406:	4618      	mov	r0, r3
 8000408:	f004 f96d 	bl	80046e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800040c:	1d3b      	adds	r3, r7, #4
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	605a      	str	r2, [r3, #4]
 8000414:	609a      	str	r2, [r3, #8]
 8000416:	60da      	str	r2, [r3, #12]
 8000418:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800041a:	2301      	movs	r3, #1
 800041c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800041e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000422:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000424:	2300      	movs	r3, #0
 8000426:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000428:	2301      	movs	r3, #1
 800042a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800042c:	2302      	movs	r3, #2
 800042e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000430:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000434:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000436:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800043a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800043c:	f107 0318 	add.w	r3, r7, #24
 8000440:	4618      	mov	r0, r3
 8000442:	f000 fe0b 	bl	800105c <HAL_RCC_OscConfig>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800044c:	f000 f9da 	bl	8000804 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000450:	230f      	movs	r3, #15
 8000452:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000454:	2302      	movs	r3, #2
 8000456:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000458:	2300      	movs	r3, #0
 800045a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800045c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000460:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000462:	2300      	movs	r3, #0
 8000464:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000466:	1d3b      	adds	r3, r7, #4
 8000468:	2102      	movs	r1, #2
 800046a:	4618      	mov	r0, r3
 800046c:	f001 f876 	bl	800155c <HAL_RCC_ClockConfig>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000476:	f000 f9c5 	bl	8000804 <Error_Handler>
  }
}
 800047a:	bf00      	nop
 800047c:	3740      	adds	r7, #64	; 0x40
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
	...

08000484 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000488:	4b11      	ldr	r3, [pc, #68]	; (80004d0 <MX_USART2_UART_Init+0x4c>)
 800048a:	4a12      	ldr	r2, [pc, #72]	; (80004d4 <MX_USART2_UART_Init+0x50>)
 800048c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800048e:	4b10      	ldr	r3, [pc, #64]	; (80004d0 <MX_USART2_UART_Init+0x4c>)
 8000490:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000494:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000496:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <MX_USART2_UART_Init+0x4c>)
 8000498:	2200      	movs	r2, #0
 800049a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800049c:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <MX_USART2_UART_Init+0x4c>)
 800049e:	2200      	movs	r2, #0
 80004a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004a2:	4b0b      	ldr	r3, [pc, #44]	; (80004d0 <MX_USART2_UART_Init+0x4c>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004a8:	4b09      	ldr	r3, [pc, #36]	; (80004d0 <MX_USART2_UART_Init+0x4c>)
 80004aa:	220c      	movs	r2, #12
 80004ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004ae:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <MX_USART2_UART_Init+0x4c>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004b4:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <MX_USART2_UART_Init+0x4c>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004ba:	4805      	ldr	r0, [pc, #20]	; (80004d0 <MX_USART2_UART_Init+0x4c>)
 80004bc:	f001 f9ea 	bl	8001894 <HAL_UART_Init>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80004c6:	f000 f99d 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	20001b78 	.word	0x20001b78
 80004d4:	40004400 	.word	0x40004400

080004d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	f107 0310 	add.w	r3, r7, #16
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004ec:	4b28      	ldr	r3, [pc, #160]	; (8000590 <MX_GPIO_Init+0xb8>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	4a27      	ldr	r2, [pc, #156]	; (8000590 <MX_GPIO_Init+0xb8>)
 80004f2:	f043 0320 	orr.w	r3, r3, #32
 80004f6:	6193      	str	r3, [r2, #24]
 80004f8:	4b25      	ldr	r3, [pc, #148]	; (8000590 <MX_GPIO_Init+0xb8>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	f003 0320 	and.w	r3, r3, #32
 8000500:	60fb      	str	r3, [r7, #12]
 8000502:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000504:	4b22      	ldr	r3, [pc, #136]	; (8000590 <MX_GPIO_Init+0xb8>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	4a21      	ldr	r2, [pc, #132]	; (8000590 <MX_GPIO_Init+0xb8>)
 800050a:	f043 0304 	orr.w	r3, r3, #4
 800050e:	6193      	str	r3, [r2, #24]
 8000510:	4b1f      	ldr	r3, [pc, #124]	; (8000590 <MX_GPIO_Init+0xb8>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	f003 0304 	and.w	r3, r3, #4
 8000518:	60bb      	str	r3, [r7, #8]
 800051a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800051c:	4b1c      	ldr	r3, [pc, #112]	; (8000590 <MX_GPIO_Init+0xb8>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	4a1b      	ldr	r2, [pc, #108]	; (8000590 <MX_GPIO_Init+0xb8>)
 8000522:	f043 0308 	orr.w	r3, r3, #8
 8000526:	6193      	str	r3, [r2, #24]
 8000528:	4b19      	ldr	r3, [pc, #100]	; (8000590 <MX_GPIO_Init+0xb8>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	f003 0308 	and.w	r3, r3, #8
 8000530:	607b      	str	r3, [r7, #4]
 8000532:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12, GPIO_PIN_RESET);
 8000534:	2200      	movs	r2, #0
 8000536:	f44f 51c1 	mov.w	r1, #6176	; 0x1820
 800053a:	4816      	ldr	r0, [pc, #88]	; (8000594 <MX_GPIO_Init+0xbc>)
 800053c:	f000 fd5e 	bl	8000ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000546:	4814      	ldr	r0, [pc, #80]	; (8000598 <MX_GPIO_Init+0xc0>)
 8000548:	f000 fd58 	bl	8000ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12;
 800054c:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 8000550:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000552:	2301      	movs	r3, #1
 8000554:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000556:	2300      	movs	r3, #0
 8000558:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055a:	2302      	movs	r3, #2
 800055c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800055e:	f107 0310 	add.w	r3, r7, #16
 8000562:	4619      	mov	r1, r3
 8000564:	480b      	ldr	r0, [pc, #44]	; (8000594 <MX_GPIO_Init+0xbc>)
 8000566:	f000 fbef 	bl	8000d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800056a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800056e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000570:	2301      	movs	r3, #1
 8000572:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000574:	2300      	movs	r3, #0
 8000576:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000578:	2302      	movs	r3, #2
 800057a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800057c:	f107 0310 	add.w	r3, r7, #16
 8000580:	4619      	mov	r1, r3
 8000582:	4805      	ldr	r0, [pc, #20]	; (8000598 <MX_GPIO_Init+0xc0>)
 8000584:	f000 fbe0 	bl	8000d48 <HAL_GPIO_Init>
}
 8000588:	bf00      	nop
 800058a:	3720      	adds	r7, #32
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	40021000 	.word	0x40021000
 8000594:	40010800 	.word	0x40010800
 8000598:	40010c00 	.word	0x40010c00

0800059c <blinkTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_blinkTask */
void blinkTask(void *argument)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blinkTask */
  /* Infinite loop */
  for (;;)
  {
    toggleLed4;
 80005a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a8:	4803      	ldr	r0, [pc, #12]	; (80005b8 <blinkTask+0x1c>)
 80005aa:	f000 fd3f 	bl	800102c <HAL_GPIO_TogglePin>
    osDelay(1000);
 80005ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005b2:	f001 fc89 	bl	8001ec8 <osDelay>
    toggleLed4;
 80005b6:	e7f5      	b.n	80005a4 <blinkTask+0x8>
 80005b8:	40010c00 	.word	0x40010c00

080005bc <PeriodicTimer1Callback>:
  /* USER CODE END blinkTask */
}

/* PeriodicTimer1Callback function */
void PeriodicTimer1Callback(void *argument)
{
 80005bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005be:	b093      	sub	sp, #76	; 0x4c
 80005c0:	af0e      	add	r7, sp, #56	; 0x38
 80005c2:	6078      	str	r0, [r7, #4]
  TickType_t tick_now;
  /* Obtain current tick count */
  newline;
 80005c4:	4e1d      	ldr	r6, [pc, #116]	; (800063c <PeriodicTimer1Callback+0x80>)
 80005c6:	4b1e      	ldr	r3, [pc, #120]	; (8000640 <PeriodicTimer1Callback+0x84>)
 80005c8:	930c      	str	r3, [sp, #48]	; 0x30
 80005ca:	466d      	mov	r5, sp
 80005cc:	f106 0410 	add.w	r4, r6, #16
 80005d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005d8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80005dc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80005e0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80005e4:	f000 f914 	bl	8000810 <vUARTSend>
  tick_now = xTaskGetTickCount();
 80005e8:	f002 fd26 	bl	8003038 <xTaskGetTickCount>
 80005ec:	60f8      	str	r0, [r7, #12]
  memset(main_string, 0, sizeof(main_string));
 80005ee:	2264      	movs	r2, #100	; 0x64
 80005f0:	2100      	movs	r1, #0
 80005f2:	4814      	ldr	r0, [pc, #80]	; (8000644 <PeriodicTimer1Callback+0x88>)
 80005f4:	f004 f877 	bl	80046e6 <memset>
  sprintf(main_string, "SW_Periodic_Timer_1 executes every %lums - tick_count = %lu\r\n", PERIOD_TIMER_1, tick_now);
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005fe:	4912      	ldr	r1, [pc, #72]	; (8000648 <PeriodicTimer1Callback+0x8c>)
 8000600:	4810      	ldr	r0, [pc, #64]	; (8000644 <PeriodicTimer1Callback+0x88>)
 8000602:	f004 f879 	bl	80046f8 <siprintf>
  PRINTF(main_string);
 8000606:	490f      	ldr	r1, [pc, #60]	; (8000644 <PeriodicTimer1Callback+0x88>)
 8000608:	4810      	ldr	r0, [pc, #64]	; (800064c <PeriodicTimer1Callback+0x90>)
 800060a:	f004 f895 	bl	8004738 <strcpy>
 800060e:	4e0b      	ldr	r6, [pc, #44]	; (800063c <PeriodicTimer1Callback+0x80>)
 8000610:	4b0e      	ldr	r3, [pc, #56]	; (800064c <PeriodicTimer1Callback+0x90>)
 8000612:	930c      	str	r3, [sp, #48]	; 0x30
 8000614:	466d      	mov	r5, sp
 8000616:	f106 0410 	add.w	r4, r6, #16
 800061a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800061c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800061e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000620:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000622:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000626:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800062a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800062e:	f000 f8ef 	bl	8000810 <vUARTSend>
  // PRINT_IN_SWTIMER((void *)TIMER_1_ID, main_string);
}
 8000632:	bf00      	nop
 8000634:	3714      	adds	r7, #20
 8000636:	46bd      	mov	sp, r7
 8000638:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800063a:	bf00      	nop
 800063c:	20001b78 	.word	0x20001b78
 8000640:	08004fe8 	.word	0x08004fe8
 8000644:	20001aa8 	.word	0x20001aa8
 8000648:	08004fec 	.word	0x08004fec
 800064c:	20001b0c 	.word	0x20001b0c

08000650 <PeriodicTimer2Callback>:
/* PeriodicTimer2Callback function */
void PeriodicTimer2Callback(void *argument)
{
 8000650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000652:	b095      	sub	sp, #84	; 0x54
 8000654:	af0e      	add	r7, sp, #56	; 0x38
 8000656:	6078      	str	r0, [r7, #4]
  TickType_t tick_now;
  uint32_t timer2_freq = PERIOD_TIMER_2;
 8000658:	2332      	movs	r3, #50	; 0x32
 800065a:	617b      	str	r3, [r7, #20]
  /* Count number of time Timer2 has expired */
  uint32_t timer2_expired_count = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	613b      	str	r3, [r7, #16]

  newline;
 8000660:	4e3b      	ldr	r6, [pc, #236]	; (8000750 <PeriodicTimer2Callback+0x100>)
 8000662:	4b3c      	ldr	r3, [pc, #240]	; (8000754 <PeriodicTimer2Callback+0x104>)
 8000664:	930c      	str	r3, [sp, #48]	; 0x30
 8000666:	466d      	mov	r5, sp
 8000668:	f106 0410 	add.w	r4, r6, #16
 800066c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800066e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000670:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000672:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000674:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000678:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800067c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000680:	f000 f8c6 	bl	8000810 <vUARTSend>
  ++timer2_expired_count;
 8000684:	693b      	ldr	r3, [r7, #16]
 8000686:	3301      	adds	r3, #1
 8000688:	613b      	str	r3, [r7, #16]
  /* Obtain current tick count */
  tick_now = xTaskGetTickCount();
 800068a:	f002 fcd5 	bl	8003038 <xTaskGetTickCount>
 800068e:	60f8      	str	r0, [r7, #12]

  /* Reset GeneralString to NULL */
  memset(main_string, 0, sizeof(main_string));
 8000690:	2264      	movs	r2, #100	; 0x64
 8000692:	2100      	movs	r1, #0
 8000694:	4830      	ldr	r0, [pc, #192]	; (8000758 <PeriodicTimer2Callback+0x108>)
 8000696:	f004 f826 	bl	80046e6 <memset>
  sprintf(main_string, "\r\nSW_Periodic_Timer_2 has fre = %lums - tick_count = %lu\r\n", timer2_freq, tick_now);
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	697a      	ldr	r2, [r7, #20]
 800069e:	492f      	ldr	r1, [pc, #188]	; (800075c <PeriodicTimer2Callback+0x10c>)
 80006a0:	482d      	ldr	r0, [pc, #180]	; (8000758 <PeriodicTimer2Callback+0x108>)
 80006a2:	f004 f829 	bl	80046f8 <siprintf>
  // PRINT_IN_SWTIMER((void *)TIMER_2_ID, main_string);
  PRINTF(main_string);
 80006a6:	492c      	ldr	r1, [pc, #176]	; (8000758 <PeriodicTimer2Callback+0x108>)
 80006a8:	482d      	ldr	r0, [pc, #180]	; (8000760 <PeriodicTimer2Callback+0x110>)
 80006aa:	f004 f845 	bl	8004738 <strcpy>
 80006ae:	4e28      	ldr	r6, [pc, #160]	; (8000750 <PeriodicTimer2Callback+0x100>)
 80006b0:	4b2b      	ldr	r3, [pc, #172]	; (8000760 <PeriodicTimer2Callback+0x110>)
 80006b2:	930c      	str	r3, [sp, #48]	; 0x30
 80006b4:	466d      	mov	r5, sp
 80006b6:	f106 0410 	add.w	r4, r6, #16
 80006ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006c2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80006c6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80006ca:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80006ce:	f000 f89f 	bl	8000810 <vUARTSend>

  toggleLed1;
 80006d2:	2120      	movs	r1, #32
 80006d4:	4823      	ldr	r0, [pc, #140]	; (8000764 <PeriodicTimer2Callback+0x114>)
 80006d6:	f000 fca9 	bl	800102c <HAL_GPIO_TogglePin>
  /* Modify timer 2 period every 5 times expires */
  if (timer2_expired_count % 5 == 0)
 80006da:	6939      	ldr	r1, [r7, #16]
 80006dc:	4b22      	ldr	r3, [pc, #136]	; (8000768 <PeriodicTimer2Callback+0x118>)
 80006de:	fba3 2301 	umull	r2, r3, r3, r1
 80006e2:	089a      	lsrs	r2, r3, #2
 80006e4:	4613      	mov	r3, r2
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	4413      	add	r3, r2
 80006ea:	1aca      	subs	r2, r1, r3
 80006ec:	2a00      	cmp	r2, #0
 80006ee:	d12b      	bne.n	8000748 <PeriodicTimer2Callback+0xf8>
  {
    timer2_freq += 50;
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	3332      	adds	r3, #50	; 0x32
 80006f4:	617b      	str	r3, [r7, #20]
    /* Modify timer 2 period */
    xTimerChangePeriod(PeriodicTimer2Handle, timer2_freq, 0);
 80006f6:	4b1d      	ldr	r3, [pc, #116]	; (800076c <PeriodicTimer2Callback+0x11c>)
 80006f8:	6818      	ldr	r0, [r3, #0]
 80006fa:	2300      	movs	r3, #0
 80006fc:	9300      	str	r3, [sp, #0]
 80006fe:	2300      	movs	r3, #0
 8000700:	697a      	ldr	r2, [r7, #20]
 8000702:	2104      	movs	r1, #4
 8000704:	f003 f940 	bl	8003988 <xTimerGenericCommand>

    /* Print debug value */
    memset(main_string, 0, sizeof(main_string));
 8000708:	2264      	movs	r2, #100	; 0x64
 800070a:	2100      	movs	r1, #0
 800070c:	4812      	ldr	r0, [pc, #72]	; (8000758 <PeriodicTimer2Callback+0x108>)
 800070e:	f003 ffea 	bl	80046e6 <memset>
    sprintf(main_string, "Timer 2 period modified - timer_2_expired_count = %lu\r\n", timer2_expired_count);
 8000712:	693a      	ldr	r2, [r7, #16]
 8000714:	4916      	ldr	r1, [pc, #88]	; (8000770 <PeriodicTimer2Callback+0x120>)
 8000716:	4810      	ldr	r0, [pc, #64]	; (8000758 <PeriodicTimer2Callback+0x108>)
 8000718:	f003 ffee 	bl	80046f8 <siprintf>
    // PRINT_IN_SWTIMER((void *)TIMER_2_ID, main_string);
    PRINTF(main_string);
 800071c:	490e      	ldr	r1, [pc, #56]	; (8000758 <PeriodicTimer2Callback+0x108>)
 800071e:	4810      	ldr	r0, [pc, #64]	; (8000760 <PeriodicTimer2Callback+0x110>)
 8000720:	f004 f80a 	bl	8004738 <strcpy>
 8000724:	4e0a      	ldr	r6, [pc, #40]	; (8000750 <PeriodicTimer2Callback+0x100>)
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <PeriodicTimer2Callback+0x110>)
 8000728:	930c      	str	r3, [sp, #48]	; 0x30
 800072a:	466d      	mov	r5, sp
 800072c:	f106 0410 	add.w	r4, r6, #16
 8000730:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000732:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000734:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000736:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000738:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800073c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000740:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000744:	f000 f864 	bl	8000810 <vUARTSend>
  }
}
 8000748:	bf00      	nop
 800074a:	371c      	adds	r7, #28
 800074c:	46bd      	mov	sp, r7
 800074e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000750:	20001b78 	.word	0x20001b78
 8000754:	08004fe8 	.word	0x08004fe8
 8000758:	20001aa8 	.word	0x20001aa8
 800075c:	0800502c 	.word	0x0800502c
 8000760:	20001b0c 	.word	0x20001b0c
 8000764:	40010c00 	.word	0x40010c00
 8000768:	cccccccd 	.word	0xcccccccd
 800076c:	20001bb8 	.word	0x20001bb8
 8000770:	08005068 	.word	0x08005068

08000774 <OneShotTimer3Callback>:
/* OneShotTimer3Callback function */
void OneShotTimer3Callback(void *argument)
{
 8000774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000776:	b093      	sub	sp, #76	; 0x4c
 8000778:	af0e      	add	r7, sp, #56	; 0x38
 800077a:	6078      	str	r0, [r7, #4]
  TickType_t tick_now;
  newline;
 800077c:	4e1c      	ldr	r6, [pc, #112]	; (80007f0 <OneShotTimer3Callback+0x7c>)
 800077e:	4b1d      	ldr	r3, [pc, #116]	; (80007f4 <OneShotTimer3Callback+0x80>)
 8000780:	930c      	str	r3, [sp, #48]	; 0x30
 8000782:	466d      	mov	r5, sp
 8000784:	f106 0410 	add.w	r4, r6, #16
 8000788:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800078a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800078c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800078e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000790:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000794:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000798:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800079c:	f000 f838 	bl	8000810 <vUARTSend>
  tick_now = xTaskGetTickCount();
 80007a0:	f002 fc4a 	bl	8003038 <xTaskGetTickCount>
 80007a4:	60f8      	str	r0, [r7, #12]
  memset(main_string, 0, sizeof(main_string));
 80007a6:	2264      	movs	r2, #100	; 0x64
 80007a8:	2100      	movs	r1, #0
 80007aa:	4813      	ldr	r0, [pc, #76]	; (80007f8 <OneShotTimer3Callback+0x84>)
 80007ac:	f003 ff9b 	bl	80046e6 <memset>
  sprintf(main_string, "SW_OneShot_Timer_3 executes once at 3333ms - tick_count = %lu\r\n", tick_now);
 80007b0:	68fa      	ldr	r2, [r7, #12]
 80007b2:	4912      	ldr	r1, [pc, #72]	; (80007fc <OneShotTimer3Callback+0x88>)
 80007b4:	4810      	ldr	r0, [pc, #64]	; (80007f8 <OneShotTimer3Callback+0x84>)
 80007b6:	f003 ff9f 	bl	80046f8 <siprintf>
  PRINTF(main_string);
 80007ba:	490f      	ldr	r1, [pc, #60]	; (80007f8 <OneShotTimer3Callback+0x84>)
 80007bc:	4810      	ldr	r0, [pc, #64]	; (8000800 <OneShotTimer3Callback+0x8c>)
 80007be:	f003 ffbb 	bl	8004738 <strcpy>
 80007c2:	4e0b      	ldr	r6, [pc, #44]	; (80007f0 <OneShotTimer3Callback+0x7c>)
 80007c4:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <OneShotTimer3Callback+0x8c>)
 80007c6:	930c      	str	r3, [sp, #48]	; 0x30
 80007c8:	466d      	mov	r5, sp
 80007ca:	f106 0410 	add.w	r4, r6, #16
 80007ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007d6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80007da:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80007de:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80007e2:	f000 f815 	bl	8000810 <vUARTSend>
  // PRINT_IN_SWTIMER((void *)TIMER_3_ID, main_string);
}
 80007e6:	bf00      	nop
 80007e8:	3714      	adds	r7, #20
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20001b78 	.word	0x20001b78
 80007f4:	08004fe8 	.word	0x08004fe8
 80007f8:	20001aa8 	.word	0x20001aa8
 80007fc:	080050a0 	.word	0x080050a0
 8000800:	20001b0c 	.word	0x20001b0c

08000804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr

08000810 <vUARTSend>:
#include "myLib.h"

#if defined(configHAL_UART)
void vUARTSend(UART_HandleTypeDef huart, uint8_t *String)
{
 8000810:	b084      	sub	sp, #16
 8000812:	b580      	push	{r7, lr}
 8000814:	af00      	add	r7, sp, #0
 8000816:	f107 0c08 	add.w	ip, r7, #8
 800081a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_UART_Transmit(&huart, (uint8_t *)String, strlen((char *)String), HAL_MAX_DELAY);
 800081e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000820:	f7ff fc96 	bl	8000150 <strlen>
 8000824:	4603      	mov	r3, r0
 8000826:	b29a      	uxth	r2, r3
 8000828:	f04f 33ff 	mov.w	r3, #4294967295
 800082c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800082e:	f107 0008 	add.w	r0, r7, #8
 8000832:	f001 f87c 	bl	800192e <HAL_UART_Transmit>
}
 8000836:	bf00      	nop
 8000838:	46bd      	mov	sp, r7
 800083a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800083e:	b004      	add	sp, #16
 8000840:	4770      	bx	lr
	...

08000844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800084a:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <HAL_MspInit+0x5c>)
 800084c:	699b      	ldr	r3, [r3, #24]
 800084e:	4a14      	ldr	r2, [pc, #80]	; (80008a0 <HAL_MspInit+0x5c>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6193      	str	r3, [r2, #24]
 8000856:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <HAL_MspInit+0x5c>)
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000862:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <HAL_MspInit+0x5c>)
 8000864:	69db      	ldr	r3, [r3, #28]
 8000866:	4a0e      	ldr	r2, [pc, #56]	; (80008a0 <HAL_MspInit+0x5c>)
 8000868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800086c:	61d3      	str	r3, [r2, #28]
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <HAL_MspInit+0x5c>)
 8000870:	69db      	ldr	r3, [r3, #28]
 8000872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800087a:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <HAL_MspInit+0x60>)
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	4a04      	ldr	r2, [pc, #16]	; (80008a4 <HAL_MspInit+0x60>)
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000896:	bf00      	nop
 8000898:	3714      	adds	r7, #20
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr
 80008a0:	40021000 	.word	0x40021000
 80008a4:	40010000 	.word	0x40010000

080008a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b088      	sub	sp, #32
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	f107 0310 	add.w	r3, r7, #16
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4a1b      	ldr	r2, [pc, #108]	; (8000930 <HAL_UART_MspInit+0x88>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d12f      	bne.n	8000928 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008c8:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <HAL_UART_MspInit+0x8c>)
 80008ca:	69db      	ldr	r3, [r3, #28]
 80008cc:	4a19      	ldr	r2, [pc, #100]	; (8000934 <HAL_UART_MspInit+0x8c>)
 80008ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008d2:	61d3      	str	r3, [r2, #28]
 80008d4:	4b17      	ldr	r3, [pc, #92]	; (8000934 <HAL_UART_MspInit+0x8c>)
 80008d6:	69db      	ldr	r3, [r3, #28]
 80008d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <HAL_UART_MspInit+0x8c>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	4a13      	ldr	r2, [pc, #76]	; (8000934 <HAL_UART_MspInit+0x8c>)
 80008e6:	f043 0304 	orr.w	r3, r3, #4
 80008ea:	6193      	str	r3, [r2, #24]
 80008ec:	4b11      	ldr	r3, [pc, #68]	; (8000934 <HAL_UART_MspInit+0x8c>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	f003 0304 	and.w	r3, r3, #4
 80008f4:	60bb      	str	r3, [r7, #8]
 80008f6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008f8:	2304      	movs	r3, #4
 80008fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fc:	2302      	movs	r3, #2
 80008fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000900:	2303      	movs	r3, #3
 8000902:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000904:	f107 0310 	add.w	r3, r7, #16
 8000908:	4619      	mov	r1, r3
 800090a:	480b      	ldr	r0, [pc, #44]	; (8000938 <HAL_UART_MspInit+0x90>)
 800090c:	f000 fa1c 	bl	8000d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000910:	2308      	movs	r3, #8
 8000912:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091c:	f107 0310 	add.w	r3, r7, #16
 8000920:	4619      	mov	r1, r3
 8000922:	4805      	ldr	r0, [pc, #20]	; (8000938 <HAL_UART_MspInit+0x90>)
 8000924:	f000 fa10 	bl	8000d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000928:	bf00      	nop
 800092a:	3720      	adds	r7, #32
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40004400 	.word	0x40004400
 8000934:	40021000 	.word	0x40021000
 8000938:	40010800 	.word	0x40010800

0800093c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr

08000948 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_UART_Transmit(&huart2, (uint8_t *)"[Hardfault_Handler]Program error !!!\r\n", strlen("[Hardfault_Handler]Program error !!!\r\n"), 20);
 800094c:	2314      	movs	r3, #20
 800094e:	2226      	movs	r2, #38	; 0x26
 8000950:	4902      	ldr	r1, [pc, #8]	; (800095c <HardFault_Handler+0x14>)
 8000952:	4803      	ldr	r0, [pc, #12]	; (8000960 <HardFault_Handler+0x18>)
 8000954:	f000 ffeb 	bl	800192e <HAL_UART_Transmit>
 8000958:	e7f8      	b.n	800094c <HardFault_Handler+0x4>
 800095a:	bf00      	nop
 800095c:	080050e0 	.word	0x080050e0
 8000960:	20001b78 	.word	0x20001b78

08000964 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000968:	e7fe      	b.n	8000968 <MemManage_Handler+0x4>

0800096a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800096e:	e7fe      	b.n	800096e <BusFault_Handler+0x4>

08000970 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <UsageFault_Handler+0x4>

08000976 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	46bd      	mov	sp, r7
 800097e:	bc80      	pop	{r7}
 8000980:	4770      	bx	lr

08000982 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000986:	f000 f8df 	bl	8000b48 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800098a:	f002 fe85 	bl	8003698 <xTaskGetSchedulerState>
 800098e:	4603      	mov	r3, r0
 8000990:	2b01      	cmp	r3, #1
 8000992:	d001      	beq.n	8000998 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000994:	f003 fc20 	bl	80041d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}

0800099c <_sbrk>:
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	4a14      	ldr	r2, [pc, #80]	; (80009f8 <_sbrk+0x5c>)
 80009a6:	4b15      	ldr	r3, [pc, #84]	; (80009fc <_sbrk+0x60>)
 80009a8:	1ad3      	subs	r3, r2, r3
 80009aa:	617b      	str	r3, [r7, #20]
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <_sbrk+0x64>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d102      	bne.n	80009be <_sbrk+0x22>
 80009b8:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <_sbrk+0x64>)
 80009ba:	4a12      	ldr	r2, [pc, #72]	; (8000a04 <_sbrk+0x68>)
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <_sbrk+0x64>)
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4413      	add	r3, r2
 80009c6:	693a      	ldr	r2, [r7, #16]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d207      	bcs.n	80009dc <_sbrk+0x40>
 80009cc:	f003 fe56 	bl	800467c <__errno>
 80009d0:	4602      	mov	r2, r0
 80009d2:	230c      	movs	r3, #12
 80009d4:	6013      	str	r3, [r2, #0]
 80009d6:	f04f 33ff 	mov.w	r3, #4294967295
 80009da:	e009      	b.n	80009f0 <_sbrk+0x54>
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <_sbrk+0x64>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <_sbrk+0x64>)
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4413      	add	r3, r2
 80009ea:	4a05      	ldr	r2, [pc, #20]	; (8000a00 <_sbrk+0x64>)
 80009ec:	6013      	str	r3, [r2, #0]
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	4618      	mov	r0, r3
 80009f2:	3718      	adds	r7, #24
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20005000 	.word	0x20005000
 80009fc:	00000400 	.word	0x00000400
 8000a00:	20000094 	.word	0x20000094
 8000a04:	20001c08 	.word	0x20001c08

08000a08 <SystemInit>:
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <SystemInit+0x5c>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a14      	ldr	r2, [pc, #80]	; (8000a64 <SystemInit+0x5c>)
 8000a12:	f043 0301 	orr.w	r3, r3, #1
 8000a16:	6013      	str	r3, [r2, #0]
 8000a18:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <SystemInit+0x5c>)
 8000a1a:	685a      	ldr	r2, [r3, #4]
 8000a1c:	4911      	ldr	r1, [pc, #68]	; (8000a64 <SystemInit+0x5c>)
 8000a1e:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <SystemInit+0x60>)
 8000a20:	4013      	ands	r3, r2
 8000a22:	604b      	str	r3, [r1, #4]
 8000a24:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <SystemInit+0x5c>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a0e      	ldr	r2, [pc, #56]	; (8000a64 <SystemInit+0x5c>)
 8000a2a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a32:	6013      	str	r3, [r2, #0]
 8000a34:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <SystemInit+0x5c>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a0a      	ldr	r2, [pc, #40]	; (8000a64 <SystemInit+0x5c>)
 8000a3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a3e:	6013      	str	r3, [r2, #0]
 8000a40:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <SystemInit+0x5c>)
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	4a07      	ldr	r2, [pc, #28]	; (8000a64 <SystemInit+0x5c>)
 8000a46:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000a4a:	6053      	str	r3, [r2, #4]
 8000a4c:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <SystemInit+0x5c>)
 8000a4e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <SystemInit+0x64>)
 8000a56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr
 8000a64:	40021000 	.word	0x40021000
 8000a68:	f8ff0000 	.word	0xf8ff0000
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <Reset_Handler>:
 8000a70:	2100      	movs	r1, #0
 8000a72:	e003      	b.n	8000a7c <LoopCopyDataInit>

08000a74 <CopyDataInit>:
 8000a74:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <LoopFillZerobss+0x14>)
 8000a76:	585b      	ldr	r3, [r3, r1]
 8000a78:	5043      	str	r3, [r0, r1]
 8000a7a:	3104      	adds	r1, #4

08000a7c <LoopCopyDataInit>:
 8000a7c:	480a      	ldr	r0, [pc, #40]	; (8000aa8 <LoopFillZerobss+0x18>)
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <LoopFillZerobss+0x1c>)
 8000a80:	1842      	adds	r2, r0, r1
 8000a82:	429a      	cmp	r2, r3
 8000a84:	d3f6      	bcc.n	8000a74 <CopyDataInit>
 8000a86:	4a0a      	ldr	r2, [pc, #40]	; (8000ab0 <LoopFillZerobss+0x20>)
 8000a88:	e002      	b.n	8000a90 <LoopFillZerobss>

08000a8a <FillZerobss>:
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	f842 3b04 	str.w	r3, [r2], #4

08000a90 <LoopFillZerobss>:
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <LoopFillZerobss+0x24>)
 8000a92:	429a      	cmp	r2, r3
 8000a94:	d3f9      	bcc.n	8000a8a <FillZerobss>
 8000a96:	f7ff ffb7 	bl	8000a08 <SystemInit>
 8000a9a:	f003 fdf5 	bl	8004688 <__libc_init_array>
 8000a9e:	f7ff fb5f 	bl	8000160 <main>
 8000aa2:	4770      	bx	lr
 8000aa4:	080051ac 	.word	0x080051ac
 8000aa8:	20000000 	.word	0x20000000
 8000aac:	20000074 	.word	0x20000074
 8000ab0:	20000074 	.word	0x20000074
 8000ab4:	20001c08 	.word	0x20001c08

08000ab8 <ADC1_2_IRQHandler>:
 8000ab8:	e7fe      	b.n	8000ab8 <ADC1_2_IRQHandler>
	...

08000abc <HAL_Init>:
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <HAL_Init+0x28>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a07      	ldr	r2, [pc, #28]	; (8000ae4 <HAL_Init+0x28>)
 8000ac6:	f043 0310 	orr.w	r3, r3, #16
 8000aca:	6013      	str	r3, [r2, #0]
 8000acc:	2003      	movs	r0, #3
 8000ace:	f000 f907 	bl	8000ce0 <HAL_NVIC_SetPriorityGrouping>
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	f000 f808 	bl	8000ae8 <HAL_InitTick>
 8000ad8:	f7ff feb4 	bl	8000844 <HAL_MspInit>
 8000adc:	2300      	movs	r3, #0
 8000ade:	4618      	mov	r0, r3
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40022000 	.word	0x40022000

08000ae8 <HAL_InitTick>:
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <HAL_InitTick+0x54>)
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <HAL_InitTick+0x58>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	4619      	mov	r1, r3
 8000afa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 f911 	bl	8000d2e <HAL_SYSTICK_Config>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <HAL_InitTick+0x2e>
 8000b12:	2301      	movs	r3, #1
 8000b14:	e00e      	b.n	8000b34 <HAL_InitTick+0x4c>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2b0f      	cmp	r3, #15
 8000b1a:	d80a      	bhi.n	8000b32 <HAL_InitTick+0x4a>
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	6879      	ldr	r1, [r7, #4]
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295
 8000b24:	f000 f8e7 	bl	8000cf6 <HAL_NVIC_SetPriority>
 8000b28:	4a06      	ldr	r2, [pc, #24]	; (8000b44 <HAL_InitTick+0x5c>)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6013      	str	r3, [r2, #0]
 8000b2e:	2300      	movs	r3, #0
 8000b30:	e000      	b.n	8000b34 <HAL_InitTick+0x4c>
 8000b32:	2301      	movs	r3, #1
 8000b34:	4618      	mov	r0, r3
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000000 	.word	0x20000000
 8000b40:	20000008 	.word	0x20000008
 8000b44:	20000004 	.word	0x20000004

08000b48 <HAL_IncTick>:
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <HAL_IncTick+0x1c>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	461a      	mov	r2, r3
 8000b52:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <HAL_IncTick+0x20>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4413      	add	r3, r2
 8000b58:	4a03      	ldr	r2, [pc, #12]	; (8000b68 <HAL_IncTick+0x20>)
 8000b5a:	6013      	str	r3, [r2, #0]
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bc80      	pop	{r7}
 8000b62:	4770      	bx	lr
 8000b64:	20000008 	.word	0x20000008
 8000b68:	20001bc0 	.word	0x20001bc0

08000b6c <HAL_GetTick>:
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	4b02      	ldr	r3, [pc, #8]	; (8000b7c <HAL_GetTick+0x10>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4618      	mov	r0, r3
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bc80      	pop	{r7}
 8000b7a:	4770      	bx	lr
 8000b7c:	20001bc0 	.word	0x20001bc0

08000b80 <__NVIC_SetPriorityGrouping>:
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f003 0307 	and.w	r3, r3, #7
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	60bb      	str	r3, [r7, #8]
 8000b96:	68ba      	ldr	r2, [r7, #8]
 8000b98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	021a      	lsls	r2, r3, #8
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	60d3      	str	r3, [r2, #12]
 8000bb8:	bf00      	nop
 8000bba:	3714      	adds	r7, #20
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bc80      	pop	{r7}
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <__NVIC_GetPriorityGrouping>:
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	0a1b      	lsrs	r3, r3, #8
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <__NVIC_SetPriority>:
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	6039      	str	r1, [r7, #0]
 8000bee:	71fb      	strb	r3, [r7, #7]
 8000bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	db0a      	blt.n	8000c0e <__NVIC_SetPriority+0x2a>
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	490c      	ldr	r1, [pc, #48]	; (8000c30 <__NVIC_SetPriority+0x4c>)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	0112      	lsls	r2, r2, #4
 8000c04:	b2d2      	uxtb	r2, r2
 8000c06:	440b      	add	r3, r1
 8000c08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8000c0c:	e00a      	b.n	8000c24 <__NVIC_SetPriority+0x40>
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	4908      	ldr	r1, [pc, #32]	; (8000c34 <__NVIC_SetPriority+0x50>)
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	f003 030f 	and.w	r3, r3, #15
 8000c1a:	3b04      	subs	r3, #4
 8000c1c:	0112      	lsls	r2, r2, #4
 8000c1e:	b2d2      	uxtb	r2, r2
 8000c20:	440b      	add	r3, r1
 8000c22:	761a      	strb	r2, [r3, #24]
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000e100 	.word	0xe000e100
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <NVIC_EncodePriority>:
 8000c38:	b480      	push	{r7}
 8000c3a:	b089      	sub	sp, #36	; 0x24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	f003 0307 	and.w	r3, r3, #7
 8000c4a:	61fb      	str	r3, [r7, #28]
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	f1c3 0307 	rsb	r3, r3, #7
 8000c52:	2b04      	cmp	r3, #4
 8000c54:	bf28      	it	cs
 8000c56:	2304      	movcs	r3, #4
 8000c58:	61bb      	str	r3, [r7, #24]
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	3304      	adds	r3, #4
 8000c5e:	2b06      	cmp	r3, #6
 8000c60:	d902      	bls.n	8000c68 <NVIC_EncodePriority+0x30>
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	3b03      	subs	r3, #3
 8000c66:	e000      	b.n	8000c6a <NVIC_EncodePriority+0x32>
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]
 8000c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c70:	69bb      	ldr	r3, [r7, #24]
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43da      	mvns	r2, r3
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	401a      	ands	r2, r3
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	409a      	lsls	r2, r3
 8000c80:	f04f 31ff 	mov.w	r1, #4294967295
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8a:	43d9      	mvns	r1, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	400b      	ands	r3, r1
 8000c90:	4313      	orrs	r3, r2
 8000c92:	4618      	mov	r0, r3
 8000c94:	3724      	adds	r7, #36	; 0x24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc80      	pop	{r7}
 8000c9a:	4770      	bx	lr

08000c9c <SysTick_Config>:
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cac:	d301      	bcc.n	8000cb2 <SysTick_Config+0x16>
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e00f      	b.n	8000cd2 <SysTick_Config+0x36>
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	; (8000cdc <SysTick_Config+0x40>)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	6053      	str	r3, [r2, #4]
 8000cba:	210f      	movs	r1, #15
 8000cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc0:	f7ff ff90 	bl	8000be4 <__NVIC_SetPriority>
 8000cc4:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <SysTick_Config+0x40>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <SysTick_Config+0x40>)
 8000ccc:	2207      	movs	r2, #7
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	e000e010 	.word	0xe000e010

08000ce0 <HAL_NVIC_SetPriorityGrouping>:
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f7ff ff49 	bl	8000b80 <__NVIC_SetPriorityGrouping>
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HAL_NVIC_SetPriority>:
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b086      	sub	sp, #24
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	60b9      	str	r1, [r7, #8]
 8000d00:	607a      	str	r2, [r7, #4]
 8000d02:	73fb      	strb	r3, [r7, #15]
 8000d04:	2300      	movs	r3, #0
 8000d06:	617b      	str	r3, [r7, #20]
 8000d08:	f7ff ff5e 	bl	8000bc8 <__NVIC_GetPriorityGrouping>
 8000d0c:	6178      	str	r0, [r7, #20]
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	68b9      	ldr	r1, [r7, #8]
 8000d12:	6978      	ldr	r0, [r7, #20]
 8000d14:	f7ff ff90 	bl	8000c38 <NVIC_EncodePriority>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d1e:	4611      	mov	r1, r2
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff ff5f 	bl	8000be4 <__NVIC_SetPriority>
 8000d26:	bf00      	nop
 8000d28:	3718      	adds	r7, #24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_SYSTICK_Config>:
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b082      	sub	sp, #8
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f7ff ffb0 	bl	8000c9c <SysTick_Config>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <HAL_GPIO_Init>:
 8000d48:	b480      	push	{r7}
 8000d4a:	b08b      	sub	sp, #44	; 0x2c
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
 8000d52:	2300      	movs	r3, #0
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
 8000d56:	2300      	movs	r3, #0
 8000d58:	623b      	str	r3, [r7, #32]
 8000d5a:	e127      	b.n	8000fac <HAL_GPIO_Init+0x264>
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	61fb      	str	r3, [r7, #28]
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	69fa      	ldr	r2, [r7, #28]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	f040 8116 	bne.w	8000fa6 <HAL_GPIO_Init+0x25e>
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	2b12      	cmp	r3, #18
 8000d80:	d034      	beq.n	8000dec <HAL_GPIO_Init+0xa4>
 8000d82:	2b12      	cmp	r3, #18
 8000d84:	d80d      	bhi.n	8000da2 <HAL_GPIO_Init+0x5a>
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d02b      	beq.n	8000de2 <HAL_GPIO_Init+0x9a>
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d804      	bhi.n	8000d98 <HAL_GPIO_Init+0x50>
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d031      	beq.n	8000df6 <HAL_GPIO_Init+0xae>
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d01c      	beq.n	8000dd0 <HAL_GPIO_Init+0x88>
 8000d96:	e048      	b.n	8000e2a <HAL_GPIO_Init+0xe2>
 8000d98:	2b03      	cmp	r3, #3
 8000d9a:	d043      	beq.n	8000e24 <HAL_GPIO_Init+0xdc>
 8000d9c:	2b11      	cmp	r3, #17
 8000d9e:	d01b      	beq.n	8000dd8 <HAL_GPIO_Init+0x90>
 8000da0:	e043      	b.n	8000e2a <HAL_GPIO_Init+0xe2>
 8000da2:	4a89      	ldr	r2, [pc, #548]	; (8000fc8 <HAL_GPIO_Init+0x280>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d026      	beq.n	8000df6 <HAL_GPIO_Init+0xae>
 8000da8:	4a87      	ldr	r2, [pc, #540]	; (8000fc8 <HAL_GPIO_Init+0x280>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d806      	bhi.n	8000dbc <HAL_GPIO_Init+0x74>
 8000dae:	4a87      	ldr	r2, [pc, #540]	; (8000fcc <HAL_GPIO_Init+0x284>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d020      	beq.n	8000df6 <HAL_GPIO_Init+0xae>
 8000db4:	4a86      	ldr	r2, [pc, #536]	; (8000fd0 <HAL_GPIO_Init+0x288>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d01d      	beq.n	8000df6 <HAL_GPIO_Init+0xae>
 8000dba:	e036      	b.n	8000e2a <HAL_GPIO_Init+0xe2>
 8000dbc:	4a85      	ldr	r2, [pc, #532]	; (8000fd4 <HAL_GPIO_Init+0x28c>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d019      	beq.n	8000df6 <HAL_GPIO_Init+0xae>
 8000dc2:	4a85      	ldr	r2, [pc, #532]	; (8000fd8 <HAL_GPIO_Init+0x290>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d016      	beq.n	8000df6 <HAL_GPIO_Init+0xae>
 8000dc8:	4a84      	ldr	r2, [pc, #528]	; (8000fdc <HAL_GPIO_Init+0x294>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d013      	beq.n	8000df6 <HAL_GPIO_Init+0xae>
 8000dce:	e02c      	b.n	8000e2a <HAL_GPIO_Init+0xe2>
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	623b      	str	r3, [r7, #32]
 8000dd6:	e028      	b.n	8000e2a <HAL_GPIO_Init+0xe2>
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	3304      	adds	r3, #4
 8000dde:	623b      	str	r3, [r7, #32]
 8000de0:	e023      	b.n	8000e2a <HAL_GPIO_Init+0xe2>
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	68db      	ldr	r3, [r3, #12]
 8000de6:	3308      	adds	r3, #8
 8000de8:	623b      	str	r3, [r7, #32]
 8000dea:	e01e      	b.n	8000e2a <HAL_GPIO_Init+0xe2>
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	330c      	adds	r3, #12
 8000df2:	623b      	str	r3, [r7, #32]
 8000df4:	e019      	b.n	8000e2a <HAL_GPIO_Init+0xe2>
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d102      	bne.n	8000e04 <HAL_GPIO_Init+0xbc>
 8000dfe:	2304      	movs	r3, #4
 8000e00:	623b      	str	r3, [r7, #32]
 8000e02:	e012      	b.n	8000e2a <HAL_GPIO_Init+0xe2>
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d105      	bne.n	8000e18 <HAL_GPIO_Init+0xd0>
 8000e0c:	2308      	movs	r3, #8
 8000e0e:	623b      	str	r3, [r7, #32]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	69fa      	ldr	r2, [r7, #28]
 8000e14:	611a      	str	r2, [r3, #16]
 8000e16:	e008      	b.n	8000e2a <HAL_GPIO_Init+0xe2>
 8000e18:	2308      	movs	r3, #8
 8000e1a:	623b      	str	r3, [r7, #32]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	69fa      	ldr	r2, [r7, #28]
 8000e20:	615a      	str	r2, [r3, #20]
 8000e22:	e002      	b.n	8000e2a <HAL_GPIO_Init+0xe2>
 8000e24:	2300      	movs	r3, #0
 8000e26:	623b      	str	r3, [r7, #32]
 8000e28:	bf00      	nop
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	2bff      	cmp	r3, #255	; 0xff
 8000e2e:	d801      	bhi.n	8000e34 <HAL_GPIO_Init+0xec>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	e001      	b.n	8000e38 <HAL_GPIO_Init+0xf0>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3304      	adds	r3, #4
 8000e38:	617b      	str	r3, [r7, #20]
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	2bff      	cmp	r3, #255	; 0xff
 8000e3e:	d802      	bhi.n	8000e46 <HAL_GPIO_Init+0xfe>
 8000e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	e002      	b.n	8000e4c <HAL_GPIO_Init+0x104>
 8000e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e48:	3b08      	subs	r3, #8
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	613b      	str	r3, [r7, #16]
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	210f      	movs	r1, #15
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	401a      	ands	r2, r3
 8000e5e:	6a39      	ldr	r1, [r7, #32]
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	fa01 f303 	lsl.w	r3, r1, r3
 8000e66:	431a      	orrs	r2, r3
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	f000 8096 	beq.w	8000fa6 <HAL_GPIO_Init+0x25e>
 8000e7a:	4b59      	ldr	r3, [pc, #356]	; (8000fe0 <HAL_GPIO_Init+0x298>)
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	4a58      	ldr	r2, [pc, #352]	; (8000fe0 <HAL_GPIO_Init+0x298>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6193      	str	r3, [r2, #24]
 8000e86:	4b56      	ldr	r3, [pc, #344]	; (8000fe0 <HAL_GPIO_Init+0x298>)
 8000e88:	699b      	ldr	r3, [r3, #24]
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	4a54      	ldr	r2, [pc, #336]	; (8000fe4 <HAL_GPIO_Init+0x29c>)
 8000e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e96:	089b      	lsrs	r3, r3, #2
 8000e98:	3302      	adds	r3, #2
 8000e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea2:	f003 0303 	and.w	r3, r3, #3
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	220f      	movs	r2, #15
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	68fa      	ldr	r2, [r7, #12]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a4b      	ldr	r2, [pc, #300]	; (8000fe8 <HAL_GPIO_Init+0x2a0>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d013      	beq.n	8000ee6 <HAL_GPIO_Init+0x19e>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a4a      	ldr	r2, [pc, #296]	; (8000fec <HAL_GPIO_Init+0x2a4>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d00d      	beq.n	8000ee2 <HAL_GPIO_Init+0x19a>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a49      	ldr	r2, [pc, #292]	; (8000ff0 <HAL_GPIO_Init+0x2a8>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d007      	beq.n	8000ede <HAL_GPIO_Init+0x196>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a48      	ldr	r2, [pc, #288]	; (8000ff4 <HAL_GPIO_Init+0x2ac>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d101      	bne.n	8000eda <HAL_GPIO_Init+0x192>
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e006      	b.n	8000ee8 <HAL_GPIO_Init+0x1a0>
 8000eda:	2304      	movs	r3, #4
 8000edc:	e004      	b.n	8000ee8 <HAL_GPIO_Init+0x1a0>
 8000ede:	2302      	movs	r3, #2
 8000ee0:	e002      	b.n	8000ee8 <HAL_GPIO_Init+0x1a0>
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e000      	b.n	8000ee8 <HAL_GPIO_Init+0x1a0>
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eea:	f002 0203 	and.w	r2, r2, #3
 8000eee:	0092      	lsls	r2, r2, #2
 8000ef0:	4093      	lsls	r3, r2
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	493a      	ldr	r1, [pc, #232]	; (8000fe4 <HAL_GPIO_Init+0x29c>)
 8000efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efc:	089b      	lsrs	r3, r3, #2
 8000efe:	3302      	adds	r3, #2
 8000f00:	68fa      	ldr	r2, [r7, #12]
 8000f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d006      	beq.n	8000f20 <HAL_GPIO_Init+0x1d8>
 8000f12:	4b39      	ldr	r3, [pc, #228]	; (8000ff8 <HAL_GPIO_Init+0x2b0>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	4938      	ldr	r1, [pc, #224]	; (8000ff8 <HAL_GPIO_Init+0x2b0>)
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	600b      	str	r3, [r1, #0]
 8000f1e:	e006      	b.n	8000f2e <HAL_GPIO_Init+0x1e6>
 8000f20:	4b35      	ldr	r3, [pc, #212]	; (8000ff8 <HAL_GPIO_Init+0x2b0>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	43db      	mvns	r3, r3
 8000f28:	4933      	ldr	r1, [pc, #204]	; (8000ff8 <HAL_GPIO_Init+0x2b0>)
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	600b      	str	r3, [r1, #0]
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d006      	beq.n	8000f48 <HAL_GPIO_Init+0x200>
 8000f3a:	4b2f      	ldr	r3, [pc, #188]	; (8000ff8 <HAL_GPIO_Init+0x2b0>)
 8000f3c:	685a      	ldr	r2, [r3, #4]
 8000f3e:	492e      	ldr	r1, [pc, #184]	; (8000ff8 <HAL_GPIO_Init+0x2b0>)
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	604b      	str	r3, [r1, #4]
 8000f46:	e006      	b.n	8000f56 <HAL_GPIO_Init+0x20e>
 8000f48:	4b2b      	ldr	r3, [pc, #172]	; (8000ff8 <HAL_GPIO_Init+0x2b0>)
 8000f4a:	685a      	ldr	r2, [r3, #4]
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	4929      	ldr	r1, [pc, #164]	; (8000ff8 <HAL_GPIO_Init+0x2b0>)
 8000f52:	4013      	ands	r3, r2
 8000f54:	604b      	str	r3, [r1, #4]
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d006      	beq.n	8000f70 <HAL_GPIO_Init+0x228>
 8000f62:	4b25      	ldr	r3, [pc, #148]	; (8000ff8 <HAL_GPIO_Init+0x2b0>)
 8000f64:	689a      	ldr	r2, [r3, #8]
 8000f66:	4924      	ldr	r1, [pc, #144]	; (8000ff8 <HAL_GPIO_Init+0x2b0>)
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	608b      	str	r3, [r1, #8]
 8000f6e:	e006      	b.n	8000f7e <HAL_GPIO_Init+0x236>
 8000f70:	4b21      	ldr	r3, [pc, #132]	; (8000ff8 <HAL_GPIO_Init+0x2b0>)
 8000f72:	689a      	ldr	r2, [r3, #8]
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	43db      	mvns	r3, r3
 8000f78:	491f      	ldr	r1, [pc, #124]	; (8000ff8 <HAL_GPIO_Init+0x2b0>)
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	608b      	str	r3, [r1, #8]
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d006      	beq.n	8000f98 <HAL_GPIO_Init+0x250>
 8000f8a:	4b1b      	ldr	r3, [pc, #108]	; (8000ff8 <HAL_GPIO_Init+0x2b0>)
 8000f8c:	68da      	ldr	r2, [r3, #12]
 8000f8e:	491a      	ldr	r1, [pc, #104]	; (8000ff8 <HAL_GPIO_Init+0x2b0>)
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	60cb      	str	r3, [r1, #12]
 8000f96:	e006      	b.n	8000fa6 <HAL_GPIO_Init+0x25e>
 8000f98:	4b17      	ldr	r3, [pc, #92]	; (8000ff8 <HAL_GPIO_Init+0x2b0>)
 8000f9a:	68da      	ldr	r2, [r3, #12]
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	4915      	ldr	r1, [pc, #84]	; (8000ff8 <HAL_GPIO_Init+0x2b0>)
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	60cb      	str	r3, [r1, #12]
 8000fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa8:	3301      	adds	r3, #1
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb2:	fa22 f303 	lsr.w	r3, r2, r3
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f47f aed0 	bne.w	8000d5c <HAL_GPIO_Init+0x14>
 8000fbc:	bf00      	nop
 8000fbe:	372c      	adds	r7, #44	; 0x2c
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bc80      	pop	{r7}
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	10210000 	.word	0x10210000
 8000fcc:	10110000 	.word	0x10110000
 8000fd0:	10120000 	.word	0x10120000
 8000fd4:	10310000 	.word	0x10310000
 8000fd8:	10320000 	.word	0x10320000
 8000fdc:	10220000 	.word	0x10220000
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	40010000 	.word	0x40010000
 8000fe8:	40010800 	.word	0x40010800
 8000fec:	40010c00 	.word	0x40010c00
 8000ff0:	40011000 	.word	0x40011000
 8000ff4:	40011400 	.word	0x40011400
 8000ff8:	40010400 	.word	0x40010400

08000ffc <HAL_GPIO_WritePin>:
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	460b      	mov	r3, r1
 8001006:	807b      	strh	r3, [r7, #2]
 8001008:	4613      	mov	r3, r2
 800100a:	707b      	strb	r3, [r7, #1]
 800100c:	787b      	ldrb	r3, [r7, #1]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d003      	beq.n	800101a <HAL_GPIO_WritePin+0x1e>
 8001012:	887a      	ldrh	r2, [r7, #2]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	611a      	str	r2, [r3, #16]
 8001018:	e003      	b.n	8001022 <HAL_GPIO_WritePin+0x26>
 800101a:	887b      	ldrh	r3, [r7, #2]
 800101c:	041a      	lsls	r2, r3, #16
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	611a      	str	r2, [r3, #16]
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr

0800102c <HAL_GPIO_TogglePin>:
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	460b      	mov	r3, r1
 8001036:	807b      	strh	r3, [r7, #2]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	68da      	ldr	r2, [r3, #12]
 800103c:	887b      	ldrh	r3, [r7, #2]
 800103e:	4013      	ands	r3, r2
 8001040:	2b00      	cmp	r3, #0
 8001042:	d003      	beq.n	800104c <HAL_GPIO_TogglePin+0x20>
 8001044:	887a      	ldrh	r2, [r7, #2]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	615a      	str	r2, [r3, #20]
 800104a:	e002      	b.n	8001052 <HAL_GPIO_TogglePin+0x26>
 800104c:	887a      	ldrh	r2, [r7, #2]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	611a      	str	r2, [r3, #16]
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr

0800105c <HAL_RCC_OscConfig>:
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <HAL_RCC_OscConfig+0x12>
 800106a:	2301      	movs	r3, #1
 800106c:	e26c      	b.n	8001548 <HAL_RCC_OscConfig+0x4ec>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	2b00      	cmp	r3, #0
 8001078:	f000 8087 	beq.w	800118a <HAL_RCC_OscConfig+0x12e>
 800107c:	4b92      	ldr	r3, [pc, #584]	; (80012c8 <HAL_RCC_OscConfig+0x26c>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f003 030c 	and.w	r3, r3, #12
 8001084:	2b04      	cmp	r3, #4
 8001086:	d00c      	beq.n	80010a2 <HAL_RCC_OscConfig+0x46>
 8001088:	4b8f      	ldr	r3, [pc, #572]	; (80012c8 <HAL_RCC_OscConfig+0x26c>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f003 030c 	and.w	r3, r3, #12
 8001090:	2b08      	cmp	r3, #8
 8001092:	d112      	bne.n	80010ba <HAL_RCC_OscConfig+0x5e>
 8001094:	4b8c      	ldr	r3, [pc, #560]	; (80012c8 <HAL_RCC_OscConfig+0x26c>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800109c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010a0:	d10b      	bne.n	80010ba <HAL_RCC_OscConfig+0x5e>
 80010a2:	4b89      	ldr	r3, [pc, #548]	; (80012c8 <HAL_RCC_OscConfig+0x26c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d06c      	beq.n	8001188 <HAL_RCC_OscConfig+0x12c>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d168      	bne.n	8001188 <HAL_RCC_OscConfig+0x12c>
 80010b6:	2301      	movs	r3, #1
 80010b8:	e246      	b.n	8001548 <HAL_RCC_OscConfig+0x4ec>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010c2:	d106      	bne.n	80010d2 <HAL_RCC_OscConfig+0x76>
 80010c4:	4b80      	ldr	r3, [pc, #512]	; (80012c8 <HAL_RCC_OscConfig+0x26c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a7f      	ldr	r2, [pc, #508]	; (80012c8 <HAL_RCC_OscConfig+0x26c>)
 80010ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ce:	6013      	str	r3, [r2, #0]
 80010d0:	e02e      	b.n	8001130 <HAL_RCC_OscConfig+0xd4>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d10c      	bne.n	80010f4 <HAL_RCC_OscConfig+0x98>
 80010da:	4b7b      	ldr	r3, [pc, #492]	; (80012c8 <HAL_RCC_OscConfig+0x26c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a7a      	ldr	r2, [pc, #488]	; (80012c8 <HAL_RCC_OscConfig+0x26c>)
 80010e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010e4:	6013      	str	r3, [r2, #0]
 80010e6:	4b78      	ldr	r3, [pc, #480]	; (80012c8 <HAL_RCC_OscConfig+0x26c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a77      	ldr	r2, [pc, #476]	; (80012c8 <HAL_RCC_OscConfig+0x26c>)
 80010ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010f0:	6013      	str	r3, [r2, #0]
 80010f2:	e01d      	b.n	8001130 <HAL_RCC_OscConfig+0xd4>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010fc:	d10c      	bne.n	8001118 <HAL_RCC_OscConfig+0xbc>
 80010fe:	4b72      	ldr	r3, [pc, #456]	; (80012c8 <HAL_RCC_OscConfig+0x26c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a71      	ldr	r2, [pc, #452]	; (80012c8 <HAL_RCC_OscConfig+0x26c>)
 8001104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001108:	6013      	str	r3, [r2, #0]
 800110a:	4b6f      	ldr	r3, [pc, #444]	; (80012c8 <HAL_RCC_OscConfig+0x26c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a6e      	ldr	r2, [pc, #440]	; (80012c8 <HAL_RCC_OscConfig+0x26c>)
 8001110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001114:	6013      	str	r3, [r2, #0]
 8001116:	e00b      	b.n	8001130 <HAL_RCC_OscConfig+0xd4>
 8001118:	4b6b      	ldr	r3, [pc, #428]	; (80012c8 <HAL_RCC_OscConfig+0x26c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a6a      	ldr	r2, [pc, #424]	; (80012c8 <HAL_RCC_OscConfig+0x26c>)
 800111e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001122:	6013      	str	r3, [r2, #0]
 8001124:	4b68      	ldr	r3, [pc, #416]	; (80012c8 <HAL_RCC_OscConfig+0x26c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a67      	ldr	r2, [pc, #412]	; (80012c8 <HAL_RCC_OscConfig+0x26c>)
 800112a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800112e:	6013      	str	r3, [r2, #0]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d013      	beq.n	8001160 <HAL_RCC_OscConfig+0x104>
 8001138:	f7ff fd18 	bl	8000b6c <HAL_GetTick>
 800113c:	6138      	str	r0, [r7, #16]
 800113e:	e008      	b.n	8001152 <HAL_RCC_OscConfig+0xf6>
 8001140:	f7ff fd14 	bl	8000b6c <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	2b64      	cmp	r3, #100	; 0x64
 800114c:	d901      	bls.n	8001152 <HAL_RCC_OscConfig+0xf6>
 800114e:	2303      	movs	r3, #3
 8001150:	e1fa      	b.n	8001548 <HAL_RCC_OscConfig+0x4ec>
 8001152:	4b5d      	ldr	r3, [pc, #372]	; (80012c8 <HAL_RCC_OscConfig+0x26c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d0f0      	beq.n	8001140 <HAL_RCC_OscConfig+0xe4>
 800115e:	e014      	b.n	800118a <HAL_RCC_OscConfig+0x12e>
 8001160:	f7ff fd04 	bl	8000b6c <HAL_GetTick>
 8001164:	6138      	str	r0, [r7, #16]
 8001166:	e008      	b.n	800117a <HAL_RCC_OscConfig+0x11e>
 8001168:	f7ff fd00 	bl	8000b6c <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	2b64      	cmp	r3, #100	; 0x64
 8001174:	d901      	bls.n	800117a <HAL_RCC_OscConfig+0x11e>
 8001176:	2303      	movs	r3, #3
 8001178:	e1e6      	b.n	8001548 <HAL_RCC_OscConfig+0x4ec>
 800117a:	4b53      	ldr	r3, [pc, #332]	; (80012c8 <HAL_RCC_OscConfig+0x26c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d1f0      	bne.n	8001168 <HAL_RCC_OscConfig+0x10c>
 8001186:	e000      	b.n	800118a <HAL_RCC_OscConfig+0x12e>
 8001188:	bf00      	nop
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	2b00      	cmp	r3, #0
 8001194:	d063      	beq.n	800125e <HAL_RCC_OscConfig+0x202>
 8001196:	4b4c      	ldr	r3, [pc, #304]	; (80012c8 <HAL_RCC_OscConfig+0x26c>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f003 030c 	and.w	r3, r3, #12
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d00b      	beq.n	80011ba <HAL_RCC_OscConfig+0x15e>
 80011a2:	4b49      	ldr	r3, [pc, #292]	; (80012c8 <HAL_RCC_OscConfig+0x26c>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f003 030c 	and.w	r3, r3, #12
 80011aa:	2b08      	cmp	r3, #8
 80011ac:	d11c      	bne.n	80011e8 <HAL_RCC_OscConfig+0x18c>
 80011ae:	4b46      	ldr	r3, [pc, #280]	; (80012c8 <HAL_RCC_OscConfig+0x26c>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d116      	bne.n	80011e8 <HAL_RCC_OscConfig+0x18c>
 80011ba:	4b43      	ldr	r3, [pc, #268]	; (80012c8 <HAL_RCC_OscConfig+0x26c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d005      	beq.n	80011d2 <HAL_RCC_OscConfig+0x176>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	691b      	ldr	r3, [r3, #16]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d001      	beq.n	80011d2 <HAL_RCC_OscConfig+0x176>
 80011ce:	2301      	movs	r3, #1
 80011d0:	e1ba      	b.n	8001548 <HAL_RCC_OscConfig+0x4ec>
 80011d2:	4b3d      	ldr	r3, [pc, #244]	; (80012c8 <HAL_RCC_OscConfig+0x26c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	4939      	ldr	r1, [pc, #228]	; (80012c8 <HAL_RCC_OscConfig+0x26c>)
 80011e2:	4313      	orrs	r3, r2
 80011e4:	600b      	str	r3, [r1, #0]
 80011e6:	e03a      	b.n	800125e <HAL_RCC_OscConfig+0x202>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	691b      	ldr	r3, [r3, #16]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d020      	beq.n	8001232 <HAL_RCC_OscConfig+0x1d6>
 80011f0:	4b36      	ldr	r3, [pc, #216]	; (80012cc <HAL_RCC_OscConfig+0x270>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	f7ff fcb9 	bl	8000b6c <HAL_GetTick>
 80011fa:	6138      	str	r0, [r7, #16]
 80011fc:	e008      	b.n	8001210 <HAL_RCC_OscConfig+0x1b4>
 80011fe:	f7ff fcb5 	bl	8000b6c <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	2b02      	cmp	r3, #2
 800120a:	d901      	bls.n	8001210 <HAL_RCC_OscConfig+0x1b4>
 800120c:	2303      	movs	r3, #3
 800120e:	e19b      	b.n	8001548 <HAL_RCC_OscConfig+0x4ec>
 8001210:	4b2d      	ldr	r3, [pc, #180]	; (80012c8 <HAL_RCC_OscConfig+0x26c>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d0f0      	beq.n	80011fe <HAL_RCC_OscConfig+0x1a2>
 800121c:	4b2a      	ldr	r3, [pc, #168]	; (80012c8 <HAL_RCC_OscConfig+0x26c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	695b      	ldr	r3, [r3, #20]
 8001228:	00db      	lsls	r3, r3, #3
 800122a:	4927      	ldr	r1, [pc, #156]	; (80012c8 <HAL_RCC_OscConfig+0x26c>)
 800122c:	4313      	orrs	r3, r2
 800122e:	600b      	str	r3, [r1, #0]
 8001230:	e015      	b.n	800125e <HAL_RCC_OscConfig+0x202>
 8001232:	4b26      	ldr	r3, [pc, #152]	; (80012cc <HAL_RCC_OscConfig+0x270>)
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	f7ff fc98 	bl	8000b6c <HAL_GetTick>
 800123c:	6138      	str	r0, [r7, #16]
 800123e:	e008      	b.n	8001252 <HAL_RCC_OscConfig+0x1f6>
 8001240:	f7ff fc94 	bl	8000b6c <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b02      	cmp	r3, #2
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0x1f6>
 800124e:	2303      	movs	r3, #3
 8001250:	e17a      	b.n	8001548 <HAL_RCC_OscConfig+0x4ec>
 8001252:	4b1d      	ldr	r3, [pc, #116]	; (80012c8 <HAL_RCC_OscConfig+0x26c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d1f0      	bne.n	8001240 <HAL_RCC_OscConfig+0x1e4>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0308 	and.w	r3, r3, #8
 8001266:	2b00      	cmp	r3, #0
 8001268:	d03a      	beq.n	80012e0 <HAL_RCC_OscConfig+0x284>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	699b      	ldr	r3, [r3, #24]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d019      	beq.n	80012a6 <HAL_RCC_OscConfig+0x24a>
 8001272:	4b17      	ldr	r3, [pc, #92]	; (80012d0 <HAL_RCC_OscConfig+0x274>)
 8001274:	2201      	movs	r2, #1
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	f7ff fc78 	bl	8000b6c <HAL_GetTick>
 800127c:	6138      	str	r0, [r7, #16]
 800127e:	e008      	b.n	8001292 <HAL_RCC_OscConfig+0x236>
 8001280:	f7ff fc74 	bl	8000b6c <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b02      	cmp	r3, #2
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0x236>
 800128e:	2303      	movs	r3, #3
 8001290:	e15a      	b.n	8001548 <HAL_RCC_OscConfig+0x4ec>
 8001292:	4b0d      	ldr	r3, [pc, #52]	; (80012c8 <HAL_RCC_OscConfig+0x26c>)
 8001294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d0f0      	beq.n	8001280 <HAL_RCC_OscConfig+0x224>
 800129e:	2001      	movs	r0, #1
 80012a0:	f000 fada 	bl	8001858 <RCC_Delay>
 80012a4:	e01c      	b.n	80012e0 <HAL_RCC_OscConfig+0x284>
 80012a6:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <HAL_RCC_OscConfig+0x274>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	f7ff fc5e 	bl	8000b6c <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]
 80012b2:	e00f      	b.n	80012d4 <HAL_RCC_OscConfig+0x278>
 80012b4:	f7ff fc5a 	bl	8000b6c <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d908      	bls.n	80012d4 <HAL_RCC_OscConfig+0x278>
 80012c2:	2303      	movs	r3, #3
 80012c4:	e140      	b.n	8001548 <HAL_RCC_OscConfig+0x4ec>
 80012c6:	bf00      	nop
 80012c8:	40021000 	.word	0x40021000
 80012cc:	42420000 	.word	0x42420000
 80012d0:	42420480 	.word	0x42420480
 80012d4:	4b9e      	ldr	r3, [pc, #632]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 80012d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d8:	f003 0302 	and.w	r3, r3, #2
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d1e9      	bne.n	80012b4 <HAL_RCC_OscConfig+0x258>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0304 	and.w	r3, r3, #4
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f000 80a6 	beq.w	800143a <HAL_RCC_OscConfig+0x3de>
 80012ee:	2300      	movs	r3, #0
 80012f0:	75fb      	strb	r3, [r7, #23]
 80012f2:	4b97      	ldr	r3, [pc, #604]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d10d      	bne.n	800131a <HAL_RCC_OscConfig+0x2be>
 80012fe:	4b94      	ldr	r3, [pc, #592]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	4a93      	ldr	r2, [pc, #588]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 8001304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001308:	61d3      	str	r3, [r2, #28]
 800130a:	4b91      	ldr	r3, [pc, #580]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	2301      	movs	r3, #1
 8001318:	75fb      	strb	r3, [r7, #23]
 800131a:	4b8e      	ldr	r3, [pc, #568]	; (8001554 <HAL_RCC_OscConfig+0x4f8>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001322:	2b00      	cmp	r3, #0
 8001324:	d118      	bne.n	8001358 <HAL_RCC_OscConfig+0x2fc>
 8001326:	4b8b      	ldr	r3, [pc, #556]	; (8001554 <HAL_RCC_OscConfig+0x4f8>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a8a      	ldr	r2, [pc, #552]	; (8001554 <HAL_RCC_OscConfig+0x4f8>)
 800132c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001330:	6013      	str	r3, [r2, #0]
 8001332:	f7ff fc1b 	bl	8000b6c <HAL_GetTick>
 8001336:	6138      	str	r0, [r7, #16]
 8001338:	e008      	b.n	800134c <HAL_RCC_OscConfig+0x2f0>
 800133a:	f7ff fc17 	bl	8000b6c <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b64      	cmp	r3, #100	; 0x64
 8001346:	d901      	bls.n	800134c <HAL_RCC_OscConfig+0x2f0>
 8001348:	2303      	movs	r3, #3
 800134a:	e0fd      	b.n	8001548 <HAL_RCC_OscConfig+0x4ec>
 800134c:	4b81      	ldr	r3, [pc, #516]	; (8001554 <HAL_RCC_OscConfig+0x4f8>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001354:	2b00      	cmp	r3, #0
 8001356:	d0f0      	beq.n	800133a <HAL_RCC_OscConfig+0x2de>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d106      	bne.n	800136e <HAL_RCC_OscConfig+0x312>
 8001360:	4b7b      	ldr	r3, [pc, #492]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 8001362:	6a1b      	ldr	r3, [r3, #32]
 8001364:	4a7a      	ldr	r2, [pc, #488]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 8001366:	f043 0301 	orr.w	r3, r3, #1
 800136a:	6213      	str	r3, [r2, #32]
 800136c:	e02d      	b.n	80013ca <HAL_RCC_OscConfig+0x36e>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d10c      	bne.n	8001390 <HAL_RCC_OscConfig+0x334>
 8001376:	4b76      	ldr	r3, [pc, #472]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 8001378:	6a1b      	ldr	r3, [r3, #32]
 800137a:	4a75      	ldr	r2, [pc, #468]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 800137c:	f023 0301 	bic.w	r3, r3, #1
 8001380:	6213      	str	r3, [r2, #32]
 8001382:	4b73      	ldr	r3, [pc, #460]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 8001384:	6a1b      	ldr	r3, [r3, #32]
 8001386:	4a72      	ldr	r2, [pc, #456]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 8001388:	f023 0304 	bic.w	r3, r3, #4
 800138c:	6213      	str	r3, [r2, #32]
 800138e:	e01c      	b.n	80013ca <HAL_RCC_OscConfig+0x36e>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	2b05      	cmp	r3, #5
 8001396:	d10c      	bne.n	80013b2 <HAL_RCC_OscConfig+0x356>
 8001398:	4b6d      	ldr	r3, [pc, #436]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 800139a:	6a1b      	ldr	r3, [r3, #32]
 800139c:	4a6c      	ldr	r2, [pc, #432]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 800139e:	f043 0304 	orr.w	r3, r3, #4
 80013a2:	6213      	str	r3, [r2, #32]
 80013a4:	4b6a      	ldr	r3, [pc, #424]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 80013a6:	6a1b      	ldr	r3, [r3, #32]
 80013a8:	4a69      	ldr	r2, [pc, #420]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	6213      	str	r3, [r2, #32]
 80013b0:	e00b      	b.n	80013ca <HAL_RCC_OscConfig+0x36e>
 80013b2:	4b67      	ldr	r3, [pc, #412]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 80013b4:	6a1b      	ldr	r3, [r3, #32]
 80013b6:	4a66      	ldr	r2, [pc, #408]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 80013b8:	f023 0301 	bic.w	r3, r3, #1
 80013bc:	6213      	str	r3, [r2, #32]
 80013be:	4b64      	ldr	r3, [pc, #400]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 80013c0:	6a1b      	ldr	r3, [r3, #32]
 80013c2:	4a63      	ldr	r2, [pc, #396]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 80013c4:	f023 0304 	bic.w	r3, r3, #4
 80013c8:	6213      	str	r3, [r2, #32]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d015      	beq.n	80013fe <HAL_RCC_OscConfig+0x3a2>
 80013d2:	f7ff fbcb 	bl	8000b6c <HAL_GetTick>
 80013d6:	6138      	str	r0, [r7, #16]
 80013d8:	e00a      	b.n	80013f0 <HAL_RCC_OscConfig+0x394>
 80013da:	f7ff fbc7 	bl	8000b6c <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x394>
 80013ec:	2303      	movs	r3, #3
 80013ee:	e0ab      	b.n	8001548 <HAL_RCC_OscConfig+0x4ec>
 80013f0:	4b57      	ldr	r3, [pc, #348]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 80013f2:	6a1b      	ldr	r3, [r3, #32]
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d0ee      	beq.n	80013da <HAL_RCC_OscConfig+0x37e>
 80013fc:	e014      	b.n	8001428 <HAL_RCC_OscConfig+0x3cc>
 80013fe:	f7ff fbb5 	bl	8000b6c <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]
 8001404:	e00a      	b.n	800141c <HAL_RCC_OscConfig+0x3c0>
 8001406:	f7ff fbb1 	bl	8000b6c <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	f241 3288 	movw	r2, #5000	; 0x1388
 8001414:	4293      	cmp	r3, r2
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x3c0>
 8001418:	2303      	movs	r3, #3
 800141a:	e095      	b.n	8001548 <HAL_RCC_OscConfig+0x4ec>
 800141c:	4b4c      	ldr	r3, [pc, #304]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 800141e:	6a1b      	ldr	r3, [r3, #32]
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1ee      	bne.n	8001406 <HAL_RCC_OscConfig+0x3aa>
 8001428:	7dfb      	ldrb	r3, [r7, #23]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d105      	bne.n	800143a <HAL_RCC_OscConfig+0x3de>
 800142e:	4b48      	ldr	r3, [pc, #288]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	4a47      	ldr	r2, [pc, #284]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 8001434:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001438:	61d3      	str	r3, [r2, #28]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	2b00      	cmp	r3, #0
 8001440:	f000 8081 	beq.w	8001546 <HAL_RCC_OscConfig+0x4ea>
 8001444:	4b42      	ldr	r3, [pc, #264]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 030c 	and.w	r3, r3, #12
 800144c:	2b08      	cmp	r3, #8
 800144e:	d061      	beq.n	8001514 <HAL_RCC_OscConfig+0x4b8>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	69db      	ldr	r3, [r3, #28]
 8001454:	2b02      	cmp	r3, #2
 8001456:	d146      	bne.n	80014e6 <HAL_RCC_OscConfig+0x48a>
 8001458:	4b3f      	ldr	r3, [pc, #252]	; (8001558 <HAL_RCC_OscConfig+0x4fc>)
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	f7ff fb85 	bl	8000b6c <HAL_GetTick>
 8001462:	6138      	str	r0, [r7, #16]
 8001464:	e008      	b.n	8001478 <HAL_RCC_OscConfig+0x41c>
 8001466:	f7ff fb81 	bl	8000b6c <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x41c>
 8001474:	2303      	movs	r3, #3
 8001476:	e067      	b.n	8001548 <HAL_RCC_OscConfig+0x4ec>
 8001478:	4b35      	ldr	r3, [pc, #212]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1f0      	bne.n	8001466 <HAL_RCC_OscConfig+0x40a>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6a1b      	ldr	r3, [r3, #32]
 8001488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800148c:	d108      	bne.n	80014a0 <HAL_RCC_OscConfig+0x444>
 800148e:	4b30      	ldr	r3, [pc, #192]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	492d      	ldr	r1, [pc, #180]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 800149c:	4313      	orrs	r3, r2
 800149e:	604b      	str	r3, [r1, #4]
 80014a0:	4b2b      	ldr	r3, [pc, #172]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a19      	ldr	r1, [r3, #32]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b0:	430b      	orrs	r3, r1
 80014b2:	4927      	ldr	r1, [pc, #156]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 80014b4:	4313      	orrs	r3, r2
 80014b6:	604b      	str	r3, [r1, #4]
 80014b8:	4b27      	ldr	r3, [pc, #156]	; (8001558 <HAL_RCC_OscConfig+0x4fc>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	f7ff fb55 	bl	8000b6c <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]
 80014c4:	e008      	b.n	80014d8 <HAL_RCC_OscConfig+0x47c>
 80014c6:	f7ff fb51 	bl	8000b6c <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x47c>
 80014d4:	2303      	movs	r3, #3
 80014d6:	e037      	b.n	8001548 <HAL_RCC_OscConfig+0x4ec>
 80014d8:	4b1d      	ldr	r3, [pc, #116]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d0f0      	beq.n	80014c6 <HAL_RCC_OscConfig+0x46a>
 80014e4:	e02f      	b.n	8001546 <HAL_RCC_OscConfig+0x4ea>
 80014e6:	4b1c      	ldr	r3, [pc, #112]	; (8001558 <HAL_RCC_OscConfig+0x4fc>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	f7ff fb3e 	bl	8000b6c <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0x4aa>
 80014f4:	f7ff fb3a 	bl	8000b6c <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x4aa>
 8001502:	2303      	movs	r3, #3
 8001504:	e020      	b.n	8001548 <HAL_RCC_OscConfig+0x4ec>
 8001506:	4b12      	ldr	r3, [pc, #72]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1f0      	bne.n	80014f4 <HAL_RCC_OscConfig+0x498>
 8001512:	e018      	b.n	8001546 <HAL_RCC_OscConfig+0x4ea>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	69db      	ldr	r3, [r3, #28]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d101      	bne.n	8001520 <HAL_RCC_OscConfig+0x4c4>
 800151c:	2301      	movs	r3, #1
 800151e:	e013      	b.n	8001548 <HAL_RCC_OscConfig+0x4ec>
 8001520:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a1b      	ldr	r3, [r3, #32]
 8001530:	429a      	cmp	r2, r3
 8001532:	d106      	bne.n	8001542 <HAL_RCC_OscConfig+0x4e6>
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153e:	429a      	cmp	r2, r3
 8001540:	d001      	beq.n	8001546 <HAL_RCC_OscConfig+0x4ea>
 8001542:	2301      	movs	r3, #1
 8001544:	e000      	b.n	8001548 <HAL_RCC_OscConfig+0x4ec>
 8001546:	2300      	movs	r3, #0
 8001548:	4618      	mov	r0, r3
 800154a:	3718      	adds	r7, #24
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40021000 	.word	0x40021000
 8001554:	40007000 	.word	0x40007000
 8001558:	42420060 	.word	0x42420060

0800155c <HAL_RCC_ClockConfig>:
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d101      	bne.n	8001570 <HAL_RCC_ClockConfig+0x14>
 800156c:	2301      	movs	r3, #1
 800156e:	e0d0      	b.n	8001712 <HAL_RCC_ClockConfig+0x1b6>
 8001570:	4b6a      	ldr	r3, [pc, #424]	; (800171c <HAL_RCC_ClockConfig+0x1c0>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0307 	and.w	r3, r3, #7
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	429a      	cmp	r2, r3
 800157c:	d910      	bls.n	80015a0 <HAL_RCC_ClockConfig+0x44>
 800157e:	4b67      	ldr	r3, [pc, #412]	; (800171c <HAL_RCC_ClockConfig+0x1c0>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f023 0207 	bic.w	r2, r3, #7
 8001586:	4965      	ldr	r1, [pc, #404]	; (800171c <HAL_RCC_ClockConfig+0x1c0>)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	4313      	orrs	r3, r2
 800158c:	600b      	str	r3, [r1, #0]
 800158e:	4b63      	ldr	r3, [pc, #396]	; (800171c <HAL_RCC_ClockConfig+0x1c0>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	429a      	cmp	r2, r3
 800159a:	d001      	beq.n	80015a0 <HAL_RCC_ClockConfig+0x44>
 800159c:	2301      	movs	r3, #1
 800159e:	e0b8      	b.n	8001712 <HAL_RCC_ClockConfig+0x1b6>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d020      	beq.n	80015ee <HAL_RCC_ClockConfig+0x92>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0304 	and.w	r3, r3, #4
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d005      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x68>
 80015b8:	4b59      	ldr	r3, [pc, #356]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	4a58      	ldr	r2, [pc, #352]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 80015be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80015c2:	6053      	str	r3, [r2, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0308 	and.w	r3, r3, #8
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d005      	beq.n	80015dc <HAL_RCC_ClockConfig+0x80>
 80015d0:	4b53      	ldr	r3, [pc, #332]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	4a52      	ldr	r2, [pc, #328]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 80015d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80015da:	6053      	str	r3, [r2, #4]
 80015dc:	4b50      	ldr	r3, [pc, #320]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	494d      	ldr	r1, [pc, #308]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	604b      	str	r3, [r1, #4]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d040      	beq.n	800167c <HAL_RCC_ClockConfig+0x120>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d107      	bne.n	8001612 <HAL_RCC_ClockConfig+0xb6>
 8001602:	4b47      	ldr	r3, [pc, #284]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d115      	bne.n	800163a <HAL_RCC_ClockConfig+0xde>
 800160e:	2301      	movs	r3, #1
 8001610:	e07f      	b.n	8001712 <HAL_RCC_ClockConfig+0x1b6>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2b02      	cmp	r3, #2
 8001618:	d107      	bne.n	800162a <HAL_RCC_ClockConfig+0xce>
 800161a:	4b41      	ldr	r3, [pc, #260]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d109      	bne.n	800163a <HAL_RCC_ClockConfig+0xde>
 8001626:	2301      	movs	r3, #1
 8001628:	e073      	b.n	8001712 <HAL_RCC_ClockConfig+0x1b6>
 800162a:	4b3d      	ldr	r3, [pc, #244]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <HAL_RCC_ClockConfig+0xde>
 8001636:	2301      	movs	r3, #1
 8001638:	e06b      	b.n	8001712 <HAL_RCC_ClockConfig+0x1b6>
 800163a:	4b39      	ldr	r3, [pc, #228]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f023 0203 	bic.w	r2, r3, #3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	4936      	ldr	r1, [pc, #216]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 8001648:	4313      	orrs	r3, r2
 800164a:	604b      	str	r3, [r1, #4]
 800164c:	f7ff fa8e 	bl	8000b6c <HAL_GetTick>
 8001650:	60f8      	str	r0, [r7, #12]
 8001652:	e00a      	b.n	800166a <HAL_RCC_ClockConfig+0x10e>
 8001654:	f7ff fa8a 	bl	8000b6c <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001662:	4293      	cmp	r3, r2
 8001664:	d901      	bls.n	800166a <HAL_RCC_ClockConfig+0x10e>
 8001666:	2303      	movs	r3, #3
 8001668:	e053      	b.n	8001712 <HAL_RCC_ClockConfig+0x1b6>
 800166a:	4b2d      	ldr	r3, [pc, #180]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f003 020c 	and.w	r2, r3, #12
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	429a      	cmp	r2, r3
 800167a:	d1eb      	bne.n	8001654 <HAL_RCC_ClockConfig+0xf8>
 800167c:	4b27      	ldr	r3, [pc, #156]	; (800171c <HAL_RCC_ClockConfig+0x1c0>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0307 	and.w	r3, r3, #7
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	429a      	cmp	r2, r3
 8001688:	d210      	bcs.n	80016ac <HAL_RCC_ClockConfig+0x150>
 800168a:	4b24      	ldr	r3, [pc, #144]	; (800171c <HAL_RCC_ClockConfig+0x1c0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f023 0207 	bic.w	r2, r3, #7
 8001692:	4922      	ldr	r1, [pc, #136]	; (800171c <HAL_RCC_ClockConfig+0x1c0>)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	4313      	orrs	r3, r2
 8001698:	600b      	str	r3, [r1, #0]
 800169a:	4b20      	ldr	r3, [pc, #128]	; (800171c <HAL_RCC_ClockConfig+0x1c0>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	683a      	ldr	r2, [r7, #0]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d001      	beq.n	80016ac <HAL_RCC_ClockConfig+0x150>
 80016a8:	2301      	movs	r3, #1
 80016aa:	e032      	b.n	8001712 <HAL_RCC_ClockConfig+0x1b6>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d008      	beq.n	80016ca <HAL_RCC_ClockConfig+0x16e>
 80016b8:	4b19      	ldr	r3, [pc, #100]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	4916      	ldr	r1, [pc, #88]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	604b      	str	r3, [r1, #4]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0308 	and.w	r3, r3, #8
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d009      	beq.n	80016ea <HAL_RCC_ClockConfig+0x18e>
 80016d6:	4b12      	ldr	r3, [pc, #72]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	490e      	ldr	r1, [pc, #56]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	604b      	str	r3, [r1, #4]
 80016ea:	f000 f821 	bl	8001730 <HAL_RCC_GetSysClockFreq>
 80016ee:	4601      	mov	r1, r0
 80016f0:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	091b      	lsrs	r3, r3, #4
 80016f6:	f003 030f 	and.w	r3, r3, #15
 80016fa:	4a0a      	ldr	r2, [pc, #40]	; (8001724 <HAL_RCC_ClockConfig+0x1c8>)
 80016fc:	5cd3      	ldrb	r3, [r2, r3]
 80016fe:	fa21 f303 	lsr.w	r3, r1, r3
 8001702:	4a09      	ldr	r2, [pc, #36]	; (8001728 <HAL_RCC_ClockConfig+0x1cc>)
 8001704:	6013      	str	r3, [r2, #0]
 8001706:	4b09      	ldr	r3, [pc, #36]	; (800172c <HAL_RCC_ClockConfig+0x1d0>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff f9ec 	bl	8000ae8 <HAL_InitTick>
 8001710:	2300      	movs	r3, #0
 8001712:	4618      	mov	r0, r3
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40022000 	.word	0x40022000
 8001720:	40021000 	.word	0x40021000
 8001724:	08005158 	.word	0x08005158
 8001728:	20000000 	.word	0x20000000
 800172c:	20000004 	.word	0x20000004

08001730 <HAL_RCC_GetSysClockFreq>:
 8001730:	b490      	push	{r4, r7}
 8001732:	b08a      	sub	sp, #40	; 0x28
 8001734:	af00      	add	r7, sp, #0
 8001736:	4b2a      	ldr	r3, [pc, #168]	; (80017e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001738:	1d3c      	adds	r4, r7, #4
 800173a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800173c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001740:	4b28      	ldr	r3, [pc, #160]	; (80017e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001742:	881b      	ldrh	r3, [r3, #0]
 8001744:	803b      	strh	r3, [r7, #0]
 8001746:	2300      	movs	r3, #0
 8001748:	61fb      	str	r3, [r7, #28]
 800174a:	2300      	movs	r3, #0
 800174c:	61bb      	str	r3, [r7, #24]
 800174e:	2300      	movs	r3, #0
 8001750:	627b      	str	r3, [r7, #36]	; 0x24
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
 8001756:	2300      	movs	r3, #0
 8001758:	623b      	str	r3, [r7, #32]
 800175a:	4b23      	ldr	r3, [pc, #140]	; (80017e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	61fb      	str	r3, [r7, #28]
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	f003 030c 	and.w	r3, r3, #12
 8001766:	2b04      	cmp	r3, #4
 8001768:	d002      	beq.n	8001770 <HAL_RCC_GetSysClockFreq+0x40>
 800176a:	2b08      	cmp	r3, #8
 800176c:	d003      	beq.n	8001776 <HAL_RCC_GetSysClockFreq+0x46>
 800176e:	e02d      	b.n	80017cc <HAL_RCC_GetSysClockFreq+0x9c>
 8001770:	4b1e      	ldr	r3, [pc, #120]	; (80017ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8001772:	623b      	str	r3, [r7, #32]
 8001774:	e02d      	b.n	80017d2 <HAL_RCC_GetSysClockFreq+0xa2>
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	0c9b      	lsrs	r3, r3, #18
 800177a:	f003 030f 	and.w	r3, r3, #15
 800177e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001782:	4413      	add	r3, r2
 8001784:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001788:	617b      	str	r3, [r7, #20]
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d013      	beq.n	80017bc <HAL_RCC_GetSysClockFreq+0x8c>
 8001794:	4b14      	ldr	r3, [pc, #80]	; (80017e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	0c5b      	lsrs	r3, r3, #17
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80017a2:	4413      	add	r3, r2
 80017a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80017a8:	61bb      	str	r3, [r7, #24]
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	4a0f      	ldr	r2, [pc, #60]	; (80017ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80017ae:	fb02 f203 	mul.w	r2, r2, r3
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
 80017ba:	e004      	b.n	80017c6 <HAL_RCC_GetSysClockFreq+0x96>
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	4a0c      	ldr	r2, [pc, #48]	; (80017f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80017c0:	fb02 f303 	mul.w	r3, r2, r3
 80017c4:	627b      	str	r3, [r7, #36]	; 0x24
 80017c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c8:	623b      	str	r3, [r7, #32]
 80017ca:	e002      	b.n	80017d2 <HAL_RCC_GetSysClockFreq+0xa2>
 80017cc:	4b07      	ldr	r3, [pc, #28]	; (80017ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80017ce:	623b      	str	r3, [r7, #32]
 80017d0:	bf00      	nop
 80017d2:	6a3b      	ldr	r3, [r7, #32]
 80017d4:	4618      	mov	r0, r3
 80017d6:	3728      	adds	r7, #40	; 0x28
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc90      	pop	{r4, r7}
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	08005108 	.word	0x08005108
 80017e4:	08005118 	.word	0x08005118
 80017e8:	40021000 	.word	0x40021000
 80017ec:	007a1200 	.word	0x007a1200
 80017f0:	003d0900 	.word	0x003d0900

080017f4 <HAL_RCC_GetHCLKFreq>:
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	4b02      	ldr	r3, [pc, #8]	; (8001804 <HAL_RCC_GetHCLKFreq+0x10>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4618      	mov	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr
 8001804:	20000000 	.word	0x20000000

08001808 <HAL_RCC_GetPCLK1Freq>:
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
 800180c:	f7ff fff2 	bl	80017f4 <HAL_RCC_GetHCLKFreq>
 8001810:	4601      	mov	r1, r0
 8001812:	4b05      	ldr	r3, [pc, #20]	; (8001828 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	0a1b      	lsrs	r3, r3, #8
 8001818:	f003 0307 	and.w	r3, r3, #7
 800181c:	4a03      	ldr	r2, [pc, #12]	; (800182c <HAL_RCC_GetPCLK1Freq+0x24>)
 800181e:	5cd3      	ldrb	r3, [r2, r3]
 8001820:	fa21 f303 	lsr.w	r3, r1, r3
 8001824:	4618      	mov	r0, r3
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40021000 	.word	0x40021000
 800182c:	08005168 	.word	0x08005168

08001830 <HAL_RCC_GetPCLK2Freq>:
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
 8001834:	f7ff ffde 	bl	80017f4 <HAL_RCC_GetHCLKFreq>
 8001838:	4601      	mov	r1, r0
 800183a:	4b05      	ldr	r3, [pc, #20]	; (8001850 <HAL_RCC_GetPCLK2Freq+0x20>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	0adb      	lsrs	r3, r3, #11
 8001840:	f003 0307 	and.w	r3, r3, #7
 8001844:	4a03      	ldr	r2, [pc, #12]	; (8001854 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001846:	5cd3      	ldrb	r3, [r2, r3]
 8001848:	fa21 f303 	lsr.w	r3, r1, r3
 800184c:	4618      	mov	r0, r3
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40021000 	.word	0x40021000
 8001854:	08005168 	.word	0x08005168

08001858 <RCC_Delay>:
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	4b0a      	ldr	r3, [pc, #40]	; (800188c <RCC_Delay+0x34>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a0a      	ldr	r2, [pc, #40]	; (8001890 <RCC_Delay+0x38>)
 8001866:	fba2 2303 	umull	r2, r3, r2, r3
 800186a:	0a5b      	lsrs	r3, r3, #9
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	fb02 f303 	mul.w	r3, r2, r3
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	bf00      	nop
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	1e5a      	subs	r2, r3, #1
 800187a:	60fa      	str	r2, [r7, #12]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1f9      	bne.n	8001874 <RCC_Delay+0x1c>
 8001880:	bf00      	nop
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	20000000 	.word	0x20000000
 8001890:	10624dd3 	.word	0x10624dd3

08001894 <HAL_UART_Init>:
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <HAL_UART_Init+0x12>
 80018a2:	2301      	movs	r3, #1
 80018a4:	e03f      	b.n	8001926 <HAL_UART_Init+0x92>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d106      	bne.n	80018c0 <HAL_UART_Init+0x2c>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7fe fff4 	bl	80008a8 <HAL_UART_MspInit>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2224      	movs	r2, #36	; 0x24
 80018c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	68da      	ldr	r2, [r3, #12]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80018d6:	60da      	str	r2, [r3, #12]
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f000 f90b 	bl	8001af4 <UART_SetConfig>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	691a      	ldr	r2, [r3, #16]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80018ec:	611a      	str	r2, [r3, #16]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	695a      	ldr	r2, [r3, #20]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80018fc:	615a      	str	r2, [r3, #20]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	68da      	ldr	r2, [r3, #12]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	63da      	str	r2, [r3, #60]	; 0x3c
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2220      	movs	r2, #32
 8001918:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2220      	movs	r2, #32
 8001920:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8001924:	2300      	movs	r3, #0
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_UART_Transmit>:
 800192e:	b580      	push	{r7, lr}
 8001930:	b088      	sub	sp, #32
 8001932:	af02      	add	r7, sp, #8
 8001934:	60f8      	str	r0, [r7, #12]
 8001936:	60b9      	str	r1, [r7, #8]
 8001938:	603b      	str	r3, [r7, #0]
 800193a:	4613      	mov	r3, r2
 800193c:	80fb      	strh	r3, [r7, #6]
 800193e:	2300      	movs	r3, #0
 8001940:	617b      	str	r3, [r7, #20]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b20      	cmp	r3, #32
 800194c:	f040 8083 	bne.w	8001a56 <HAL_UART_Transmit+0x128>
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d002      	beq.n	800195c <HAL_UART_Transmit+0x2e>
 8001956:	88fb      	ldrh	r3, [r7, #6]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d101      	bne.n	8001960 <HAL_UART_Transmit+0x32>
 800195c:	2301      	movs	r3, #1
 800195e:	e07b      	b.n	8001a58 <HAL_UART_Transmit+0x12a>
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001966:	2b01      	cmp	r3, #1
 8001968:	d101      	bne.n	800196e <HAL_UART_Transmit+0x40>
 800196a:	2302      	movs	r3, #2
 800196c:	e074      	b.n	8001a58 <HAL_UART_Transmit+0x12a>
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2200      	movs	r2, #0
 800197a:	63da      	str	r2, [r3, #60]	; 0x3c
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2221      	movs	r2, #33	; 0x21
 8001980:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001984:	f7ff f8f2 	bl	8000b6c <HAL_GetTick>
 8001988:	6178      	str	r0, [r7, #20]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	88fa      	ldrh	r2, [r7, #6]
 800198e:	849a      	strh	r2, [r3, #36]	; 0x24
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	88fa      	ldrh	r2, [r7, #6]
 8001994:	84da      	strh	r2, [r3, #38]	; 0x26
 8001996:	e042      	b.n	8001a1e <HAL_UART_Transmit+0xf0>
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800199c:	b29b      	uxth	r3, r3
 800199e:	3b01      	subs	r3, #1
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	84da      	strh	r2, [r3, #38]	; 0x26
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019ae:	d122      	bne.n	80019f6 <HAL_UART_Transmit+0xc8>
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	9300      	str	r3, [sp, #0]
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	2200      	movs	r2, #0
 80019b8:	2180      	movs	r1, #128	; 0x80
 80019ba:	68f8      	ldr	r0, [r7, #12]
 80019bc:	f000 f850 	bl	8001a60 <UART_WaitOnFlagUntilTimeout>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <HAL_UART_Transmit+0x9c>
 80019c6:	2303      	movs	r3, #3
 80019c8:	e046      	b.n	8001a58 <HAL_UART_Transmit+0x12a>
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	613b      	str	r3, [r7, #16]
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	461a      	mov	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d103      	bne.n	80019ee <HAL_UART_Transmit+0xc0>
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	3302      	adds	r3, #2
 80019ea:	60bb      	str	r3, [r7, #8]
 80019ec:	e017      	b.n	8001a1e <HAL_UART_Transmit+0xf0>
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	3301      	adds	r3, #1
 80019f2:	60bb      	str	r3, [r7, #8]
 80019f4:	e013      	b.n	8001a1e <HAL_UART_Transmit+0xf0>
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	2200      	movs	r2, #0
 80019fe:	2180      	movs	r1, #128	; 0x80
 8001a00:	68f8      	ldr	r0, [r7, #12]
 8001a02:	f000 f82d 	bl	8001a60 <UART_WaitOnFlagUntilTimeout>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <HAL_UART_Transmit+0xe2>
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e023      	b.n	8001a58 <HAL_UART_Transmit+0x12a>
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	1c5a      	adds	r2, r3, #1
 8001a14:	60ba      	str	r2, [r7, #8]
 8001a16:	781a      	ldrb	r2, [r3, #0]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1b7      	bne.n	8001998 <HAL_UART_Transmit+0x6a>
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	9300      	str	r3, [sp, #0]
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	2140      	movs	r1, #64	; 0x40
 8001a32:	68f8      	ldr	r0, [r7, #12]
 8001a34:	f000 f814 	bl	8001a60 <UART_WaitOnFlagUntilTimeout>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <HAL_UART_Transmit+0x114>
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e00a      	b.n	8001a58 <HAL_UART_Transmit+0x12a>
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2220      	movs	r2, #32
 8001a46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8001a52:	2300      	movs	r3, #0
 8001a54:	e000      	b.n	8001a58 <HAL_UART_Transmit+0x12a>
 8001a56:	2302      	movs	r3, #2
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <UART_WaitOnFlagUntilTimeout>:
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	603b      	str	r3, [r7, #0]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	71fb      	strb	r3, [r7, #7]
 8001a70:	e02c      	b.n	8001acc <UART_WaitOnFlagUntilTimeout+0x6c>
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a78:	d028      	beq.n	8001acc <UART_WaitOnFlagUntilTimeout+0x6c>
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d007      	beq.n	8001a90 <UART_WaitOnFlagUntilTimeout+0x30>
 8001a80:	f7ff f874 	bl	8000b6c <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d21d      	bcs.n	8001acc <UART_WaitOnFlagUntilTimeout+0x6c>
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68da      	ldr	r2, [r3, #12]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001a9e:	60da      	str	r2, [r3, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	695a      	ldr	r2, [r3, #20]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f022 0201 	bic.w	r2, r2, #1
 8001aae:	615a      	str	r2, [r3, #20]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2220      	movs	r2, #32
 8001ab4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2220      	movs	r2, #32
 8001abc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e00f      	b.n	8001aec <UART_WaitOnFlagUntilTimeout+0x8c>
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	bf0c      	ite	eq
 8001adc:	2301      	moveq	r3, #1
 8001ade:	2300      	movne	r3, #0
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d0c3      	beq.n	8001a72 <UART_WaitOnFlagUntilTimeout+0x12>
 8001aea:	2300      	movs	r3, #0
 8001aec:	4618      	mov	r0, r3
 8001aee:	3710      	adds	r7, #16
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <UART_SetConfig>:
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68da      	ldr	r2, [r3, #12]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	611a      	str	r2, [r3, #16]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689a      	ldr	r2, [r3, #8]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	695b      	ldr	r3, [r3, #20]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001b2e:	f023 030c 	bic.w	r3, r3, #12
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	6812      	ldr	r2, [r2, #0]
 8001b36:	68f9      	ldr	r1, [r7, #12]
 8001b38:	430b      	orrs	r3, r1
 8001b3a:	60d3      	str	r3, [r2, #12]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	699a      	ldr	r2, [r3, #24]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	615a      	str	r2, [r3, #20]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a52      	ldr	r2, [pc, #328]	; (8001ca0 <UART_SetConfig+0x1ac>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d14e      	bne.n	8001bfa <UART_SetConfig+0x106>
 8001b5c:	f7ff fe68 	bl	8001830 <HAL_RCC_GetPCLK2Freq>
 8001b60:	60b8      	str	r0, [r7, #8]
 8001b62:	68ba      	ldr	r2, [r7, #8]
 8001b64:	4613      	mov	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4413      	add	r3, r2
 8001b6a:	009a      	lsls	r2, r3, #2
 8001b6c:	441a      	add	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b78:	4a4a      	ldr	r2, [pc, #296]	; (8001ca4 <UART_SetConfig+0x1b0>)
 8001b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7e:	095b      	lsrs	r3, r3, #5
 8001b80:	0119      	lsls	r1, r3, #4
 8001b82:	68ba      	ldr	r2, [r7, #8]
 8001b84:	4613      	mov	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	009a      	lsls	r2, r3, #2
 8001b8c:	441a      	add	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b98:	4b42      	ldr	r3, [pc, #264]	; (8001ca4 <UART_SetConfig+0x1b0>)
 8001b9a:	fba3 0302 	umull	r0, r3, r3, r2
 8001b9e:	095b      	lsrs	r3, r3, #5
 8001ba0:	2064      	movs	r0, #100	; 0x64
 8001ba2:	fb00 f303 	mul.w	r3, r0, r3
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	011b      	lsls	r3, r3, #4
 8001baa:	3332      	adds	r3, #50	; 0x32
 8001bac:	4a3d      	ldr	r2, [pc, #244]	; (8001ca4 <UART_SetConfig+0x1b0>)
 8001bae:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb2:	095b      	lsrs	r3, r3, #5
 8001bb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bb8:	4419      	add	r1, r3
 8001bba:	68ba      	ldr	r2, [r7, #8]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4413      	add	r3, r2
 8001bc2:	009a      	lsls	r2, r3, #2
 8001bc4:	441a      	add	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bd0:	4b34      	ldr	r3, [pc, #208]	; (8001ca4 <UART_SetConfig+0x1b0>)
 8001bd2:	fba3 0302 	umull	r0, r3, r3, r2
 8001bd6:	095b      	lsrs	r3, r3, #5
 8001bd8:	2064      	movs	r0, #100	; 0x64
 8001bda:	fb00 f303 	mul.w	r3, r0, r3
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	011b      	lsls	r3, r3, #4
 8001be2:	3332      	adds	r3, #50	; 0x32
 8001be4:	4a2f      	ldr	r2, [pc, #188]	; (8001ca4 <UART_SetConfig+0x1b0>)
 8001be6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bea:	095b      	lsrs	r3, r3, #5
 8001bec:	f003 020f 	and.w	r2, r3, #15
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	440a      	add	r2, r1
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	e04d      	b.n	8001c96 <UART_SetConfig+0x1a2>
 8001bfa:	f7ff fe05 	bl	8001808 <HAL_RCC_GetPCLK1Freq>
 8001bfe:	60b8      	str	r0, [r7, #8]
 8001c00:	68ba      	ldr	r2, [r7, #8]
 8001c02:	4613      	mov	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	009a      	lsls	r2, r3, #2
 8001c0a:	441a      	add	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c16:	4a23      	ldr	r2, [pc, #140]	; (8001ca4 <UART_SetConfig+0x1b0>)
 8001c18:	fba2 2303 	umull	r2, r3, r2, r3
 8001c1c:	095b      	lsrs	r3, r3, #5
 8001c1e:	0119      	lsls	r1, r3, #4
 8001c20:	68ba      	ldr	r2, [r7, #8]
 8001c22:	4613      	mov	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	009a      	lsls	r2, r3, #2
 8001c2a:	441a      	add	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c36:	4b1b      	ldr	r3, [pc, #108]	; (8001ca4 <UART_SetConfig+0x1b0>)
 8001c38:	fba3 0302 	umull	r0, r3, r3, r2
 8001c3c:	095b      	lsrs	r3, r3, #5
 8001c3e:	2064      	movs	r0, #100	; 0x64
 8001c40:	fb00 f303 	mul.w	r3, r0, r3
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	011b      	lsls	r3, r3, #4
 8001c48:	3332      	adds	r3, #50	; 0x32
 8001c4a:	4a16      	ldr	r2, [pc, #88]	; (8001ca4 <UART_SetConfig+0x1b0>)
 8001c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c50:	095b      	lsrs	r3, r3, #5
 8001c52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c56:	4419      	add	r1, r3
 8001c58:	68ba      	ldr	r2, [r7, #8]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	009a      	lsls	r2, r3, #2
 8001c62:	441a      	add	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ca4 <UART_SetConfig+0x1b0>)
 8001c70:	fba3 0302 	umull	r0, r3, r3, r2
 8001c74:	095b      	lsrs	r3, r3, #5
 8001c76:	2064      	movs	r0, #100	; 0x64
 8001c78:	fb00 f303 	mul.w	r3, r0, r3
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	011b      	lsls	r3, r3, #4
 8001c80:	3332      	adds	r3, #50	; 0x32
 8001c82:	4a08      	ldr	r2, [pc, #32]	; (8001ca4 <UART_SetConfig+0x1b0>)
 8001c84:	fba2 2303 	umull	r2, r3, r2, r3
 8001c88:	095b      	lsrs	r3, r3, #5
 8001c8a:	f003 020f 	and.w	r2, r3, #15
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	440a      	add	r2, r1
 8001c94:	609a      	str	r2, [r3, #8]
 8001c96:	bf00      	nop
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40013800 	.word	0x40013800
 8001ca4:	51eb851f 	.word	0x51eb851f

08001ca8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001cae:	f3ef 8305 	mrs	r3, IPSR
 8001cb2:	60bb      	str	r3, [r7, #8]
  return(result);
 8001cb4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10f      	bne.n	8001cda <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001cba:	f3ef 8310 	mrs	r3, PRIMASK
 8001cbe:	607b      	str	r3, [r7, #4]
  return(result);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d109      	bne.n	8001cda <osKernelInitialize+0x32>
 8001cc6:	4b10      	ldr	r3, [pc, #64]	; (8001d08 <osKernelInitialize+0x60>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d109      	bne.n	8001ce2 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001cce:	f3ef 8311 	mrs	r3, BASEPRI
 8001cd2:	603b      	str	r3, [r7, #0]
  return(result);
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001cda:	f06f 0305 	mvn.w	r3, #5
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	e00c      	b.n	8001cfc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001ce2:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <osKernelInitialize+0x60>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d105      	bne.n	8001cf6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8001cea:	4b07      	ldr	r3, [pc, #28]	; (8001d08 <osKernelInitialize+0x60>)
 8001cec:	2201      	movs	r2, #1
 8001cee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	e002      	b.n	8001cfc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cfa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr
 8001d08:	20000098 	.word	0x20000098

08001d0c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d12:	f3ef 8305 	mrs	r3, IPSR
 8001d16:	60bb      	str	r3, [r7, #8]
  return(result);
 8001d18:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d10f      	bne.n	8001d3e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d1e:	f3ef 8310 	mrs	r3, PRIMASK
 8001d22:	607b      	str	r3, [r7, #4]
  return(result);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d109      	bne.n	8001d3e <osKernelStart+0x32>
 8001d2a:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <osKernelStart+0x64>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d109      	bne.n	8001d46 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001d32:	f3ef 8311 	mrs	r3, BASEPRI
 8001d36:	603b      	str	r3, [r7, #0]
  return(result);
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <osKernelStart+0x3a>
    stat = osErrorISR;
 8001d3e:	f06f 0305 	mvn.w	r3, #5
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	e00e      	b.n	8001d64 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8001d46:	4b0a      	ldr	r3, [pc, #40]	; (8001d70 <osKernelStart+0x64>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d107      	bne.n	8001d5e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8001d4e:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <osKernelStart+0x64>)
 8001d50:	2202      	movs	r2, #2
 8001d52:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001d54:	f001 f862 	bl	8002e1c <vTaskStartScheduler>
      stat = osOK;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	e002      	b.n	8001d64 <osKernelStart+0x58>
    } else {
      stat = osError;
 8001d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d62:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001d64:	68fb      	ldr	r3, [r7, #12]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	20000098 	.word	0x20000098

08001d74 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b092      	sub	sp, #72	; 0x48
 8001d78:	af04      	add	r7, sp, #16
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d84:	f3ef 8305 	mrs	r3, IPSR
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f040 8094 	bne.w	8001eba <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d92:	f3ef 8310 	mrs	r3, PRIMASK
 8001d96:	623b      	str	r3, [r7, #32]
  return(result);
 8001d98:	6a3b      	ldr	r3, [r7, #32]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f040 808d 	bne.w	8001eba <osThreadNew+0x146>
 8001da0:	4b48      	ldr	r3, [pc, #288]	; (8001ec4 <osThreadNew+0x150>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d106      	bne.n	8001db6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001da8:	f3ef 8311 	mrs	r3, BASEPRI
 8001dac:	61fb      	str	r3, [r7, #28]
  return(result);
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f040 8082 	bne.w	8001eba <osThreadNew+0x146>
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d07e      	beq.n	8001eba <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8001dbc:	2340      	movs	r3, #64	; 0x40
 8001dbe:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8001dc0:	2318      	movs	r3, #24
 8001dc2:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8001dc8:	f107 031b 	add.w	r3, r7, #27
 8001dcc:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8001dce:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d045      	beq.n	8001e66 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d002      	beq.n	8001de8 <osThreadNew+0x74>
        name = attr->name;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d002      	beq.n	8001df6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d008      	beq.n	8001e0e <osThreadNew+0x9a>
 8001dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dfe:	2b38      	cmp	r3, #56	; 0x38
 8001e00:	d805      	bhi.n	8001e0e <osThreadNew+0x9a>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <osThreadNew+0x9e>
        return (NULL);
 8001e0e:	2300      	movs	r3, #0
 8001e10:	e054      	b.n	8001ebc <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	089b      	lsrs	r3, r3, #2
 8001e20:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00e      	beq.n	8001e48 <osThreadNew+0xd4>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	2b5b      	cmp	r3, #91	; 0x5b
 8001e30:	d90a      	bls.n	8001e48 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d006      	beq.n	8001e48 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d002      	beq.n	8001e48 <osThreadNew+0xd4>
        mem = 1;
 8001e42:	2301      	movs	r3, #1
 8001e44:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e46:	e010      	b.n	8001e6a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d10c      	bne.n	8001e6a <osThreadNew+0xf6>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d108      	bne.n	8001e6a <osThreadNew+0xf6>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d104      	bne.n	8001e6a <osThreadNew+0xf6>
          mem = 0;
 8001e60:	2300      	movs	r3, #0
 8001e62:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e64:	e001      	b.n	8001e6a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8001e66:	2300      	movs	r3, #0
 8001e68:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8001e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d110      	bne.n	8001e92 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001e78:	9202      	str	r2, [sp, #8]
 8001e7a:	9301      	str	r3, [sp, #4]
 8001e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e84:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001e86:	68f8      	ldr	r0, [r7, #12]
 8001e88:	f000 fe00 	bl	8002a8c <xTaskCreateStatic>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	e013      	b.n	8001eba <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8001e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d110      	bne.n	8001eba <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	f107 0314 	add.w	r3, r7, #20
 8001ea0:	9301      	str	r3, [sp, #4]
 8001ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea4:	9300      	str	r3, [sp, #0]
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001eaa:	68f8      	ldr	r0, [r7, #12]
 8001eac:	f000 fe47 	bl	8002b3e <xTaskCreate>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d001      	beq.n	8001eba <osThreadNew+0x146>
          hTask = NULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001eba:	697b      	ldr	r3, [r7, #20]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3738      	adds	r7, #56	; 0x38
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20000098 	.word	0x20000098

08001ec8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ed0:	f3ef 8305 	mrs	r3, IPSR
 8001ed4:	613b      	str	r3, [r7, #16]
  return(result);
 8001ed6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d10f      	bne.n	8001efc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001edc:	f3ef 8310 	mrs	r3, PRIMASK
 8001ee0:	60fb      	str	r3, [r7, #12]
  return(result);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d109      	bne.n	8001efc <osDelay+0x34>
 8001ee8:	4b0d      	ldr	r3, [pc, #52]	; (8001f20 <osDelay+0x58>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d109      	bne.n	8001f04 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001ef0:	f3ef 8311 	mrs	r3, BASEPRI
 8001ef4:	60bb      	str	r3, [r7, #8]
  return(result);
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d003      	beq.n	8001f04 <osDelay+0x3c>
    stat = osErrorISR;
 8001efc:	f06f 0305 	mvn.w	r3, #5
 8001f00:	617b      	str	r3, [r7, #20]
 8001f02:	e007      	b.n	8001f14 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8001f04:	2300      	movs	r3, #0
 8001f06:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d002      	beq.n	8001f14 <osDelay+0x4c>
      vTaskDelay(ticks);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 ff50 	bl	8002db4 <vTaskDelay>
    }
  }

  return (stat);
 8001f14:	697b      	ldr	r3, [r7, #20]
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3718      	adds	r7, #24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000098 	.word	0x20000098

08001f24 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	4a06      	ldr	r2, [pc, #24]	; (8001f4c <vApplicationGetIdleTaskMemory+0x28>)
 8001f34:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	4a05      	ldr	r2, [pc, #20]	; (8001f50 <vApplicationGetIdleTaskMemory+0x2c>)
 8001f3a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2240      	movs	r2, #64	; 0x40
 8001f40:	601a      	str	r2, [r3, #0]
}
 8001f42:	bf00      	nop
 8001f44:	3714      	adds	r7, #20
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr
 8001f4c:	2000009c 	.word	0x2000009c
 8001f50:	200000f8 	.word	0x200000f8

08001f54 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	4a06      	ldr	r2, [pc, #24]	; (8001f7c <vApplicationGetTimerTaskMemory+0x28>)
 8001f64:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	4a05      	ldr	r2, [pc, #20]	; (8001f80 <vApplicationGetTimerTaskMemory+0x2c>)
 8001f6a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2280      	movs	r2, #128	; 0x80
 8001f70:	601a      	str	r2, [r3, #0]
}
 8001f72:	bf00      	nop
 8001f74:	3714      	adds	r7, #20
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr
 8001f7c:	200001f8 	.word	0x200001f8
 8001f80:	20000254 	.word	0x20000254

08001f84 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f103 0208 	add.w	r2, r3, #8
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f04f 32ff 	mov.w	r2, #4294967295
 8001f9c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f103 0208 	add.w	r2, r3, #8
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f103 0208 	add.w	r2, r3, #8
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr

08001fc2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bc80      	pop	{r7}
 8001fd8:	4770      	bx	lr

08001fda <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b085      	sub	sp, #20
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
 8001fe2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	1c5a      	adds	r2, r3, #1
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	601a      	str	r2, [r3, #0]
}
 8002016:	bf00      	nop
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr

08002020 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002036:	d103      	bne.n	8002040 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	691b      	ldr	r3, [r3, #16]
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	e00c      	b.n	800205a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3308      	adds	r3, #8
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	e002      	b.n	800204e <vListInsert+0x2e>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68ba      	ldr	r2, [r7, #8]
 8002056:	429a      	cmp	r2, r3
 8002058:	d2f6      	bcs.n	8002048 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	1c5a      	adds	r2, r3, #1
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	601a      	str	r2, [r3, #0]
}
 8002086:	bf00      	nop
 8002088:	3714      	adds	r7, #20
 800208a:	46bd      	mov	sp, r7
 800208c:	bc80      	pop	{r7}
 800208e:	4770      	bx	lr

08002090 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	6892      	ldr	r2, [r2, #8]
 80020a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	6852      	ldr	r2, [r2, #4]
 80020b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d103      	bne.n	80020c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	1e5a      	subs	r2, r3, #1
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3714      	adds	r7, #20
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr
	...

080020e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d109      	bne.n	800210c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80020f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020fc:	f383 8811 	msr	BASEPRI, r3
 8002100:	f3bf 8f6f 	isb	sy
 8002104:	f3bf 8f4f 	dsb	sy
 8002108:	60bb      	str	r3, [r7, #8]
 800210a:	e7fe      	b.n	800210a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800210c:	f001 ffec 	bl	80040e8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002118:	68f9      	ldr	r1, [r7, #12]
 800211a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800211c:	fb01 f303 	mul.w	r3, r1, r3
 8002120:	441a      	add	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800213c:	3b01      	subs	r3, #1
 800213e:	68f9      	ldr	r1, [r7, #12]
 8002140:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002142:	fb01 f303 	mul.w	r3, r1, r3
 8002146:	441a      	add	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	22ff      	movs	r2, #255	; 0xff
 8002150:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	22ff      	movs	r2, #255	; 0xff
 8002158:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d114      	bne.n	800218c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d01a      	beq.n	80021a0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	3310      	adds	r3, #16
 800216e:	4618      	mov	r0, r3
 8002170:	f001 f8d8 	bl	8003324 <xTaskRemoveFromEventList>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d012      	beq.n	80021a0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800217a:	4b0d      	ldr	r3, [pc, #52]	; (80021b0 <xQueueGenericReset+0xcc>)
 800217c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	f3bf 8f4f 	dsb	sy
 8002186:	f3bf 8f6f 	isb	sy
 800218a:	e009      	b.n	80021a0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	3310      	adds	r3, #16
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff fef7 	bl	8001f84 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	3324      	adds	r3, #36	; 0x24
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff fef2 	bl	8001f84 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80021a0:	f001 ffd0 	bl	8004144 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80021a4:	2301      	movs	r3, #1
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	e000ed04 	.word	0xe000ed04

080021b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08e      	sub	sp, #56	; 0x38
 80021b8:	af02      	add	r7, sp, #8
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
 80021c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d109      	bne.n	80021dc <xQueueGenericCreateStatic+0x28>
 80021c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021cc:	f383 8811 	msr	BASEPRI, r3
 80021d0:	f3bf 8f6f 	isb	sy
 80021d4:	f3bf 8f4f 	dsb	sy
 80021d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80021da:	e7fe      	b.n	80021da <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d109      	bne.n	80021f6 <xQueueGenericCreateStatic+0x42>
 80021e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021e6:	f383 8811 	msr	BASEPRI, r3
 80021ea:	f3bf 8f6f 	isb	sy
 80021ee:	f3bf 8f4f 	dsb	sy
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24
 80021f4:	e7fe      	b.n	80021f4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d002      	beq.n	8002202 <xQueueGenericCreateStatic+0x4e>
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <xQueueGenericCreateStatic+0x52>
 8002202:	2301      	movs	r3, #1
 8002204:	e000      	b.n	8002208 <xQueueGenericCreateStatic+0x54>
 8002206:	2300      	movs	r3, #0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d109      	bne.n	8002220 <xQueueGenericCreateStatic+0x6c>
 800220c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002210:	f383 8811 	msr	BASEPRI, r3
 8002214:	f3bf 8f6f 	isb	sy
 8002218:	f3bf 8f4f 	dsb	sy
 800221c:	623b      	str	r3, [r7, #32]
 800221e:	e7fe      	b.n	800221e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d102      	bne.n	800222c <xQueueGenericCreateStatic+0x78>
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <xQueueGenericCreateStatic+0x7c>
 800222c:	2301      	movs	r3, #1
 800222e:	e000      	b.n	8002232 <xQueueGenericCreateStatic+0x7e>
 8002230:	2300      	movs	r3, #0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d109      	bne.n	800224a <xQueueGenericCreateStatic+0x96>
 8002236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800223a:	f383 8811 	msr	BASEPRI, r3
 800223e:	f3bf 8f6f 	isb	sy
 8002242:	f3bf 8f4f 	dsb	sy
 8002246:	61fb      	str	r3, [r7, #28]
 8002248:	e7fe      	b.n	8002248 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800224a:	2350      	movs	r3, #80	; 0x50
 800224c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	2b50      	cmp	r3, #80	; 0x50
 8002252:	d009      	beq.n	8002268 <xQueueGenericCreateStatic+0xb4>
 8002254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002258:	f383 8811 	msr	BASEPRI, r3
 800225c:	f3bf 8f6f 	isb	sy
 8002260:	f3bf 8f4f 	dsb	sy
 8002264:	61bb      	str	r3, [r7, #24]
 8002266:	e7fe      	b.n	8002266 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800226c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00d      	beq.n	800228e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002274:	2201      	movs	r2, #1
 8002276:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800227a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800227e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	4613      	mov	r3, r2
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	68b9      	ldr	r1, [r7, #8]
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f000 f805 	bl	8002298 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800228e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002290:	4618      	mov	r0, r3
 8002292:	3730      	adds	r7, #48	; 0x30
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
 80022a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d103      	bne.n	80022b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	e002      	b.n	80022ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80022c6:	2101      	movs	r1, #1
 80022c8:	69b8      	ldr	r0, [r7, #24]
 80022ca:	f7ff ff0b 	bl	80020e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	78fa      	ldrb	r2, [r7, #3]
 80022d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80022d6:	bf00      	nop
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
	...

080022e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08e      	sub	sp, #56	; 0x38
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
 80022ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80022ee:	2300      	movs	r3, #0
 80022f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80022f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d109      	bne.n	8002310 <xQueueGenericSend+0x30>
 80022fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002300:	f383 8811 	msr	BASEPRI, r3
 8002304:	f3bf 8f6f 	isb	sy
 8002308:	f3bf 8f4f 	dsb	sy
 800230c:	62bb      	str	r3, [r7, #40]	; 0x28
 800230e:	e7fe      	b.n	800230e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d103      	bne.n	800231e <xQueueGenericSend+0x3e>
 8002316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <xQueueGenericSend+0x42>
 800231e:	2301      	movs	r3, #1
 8002320:	e000      	b.n	8002324 <xQueueGenericSend+0x44>
 8002322:	2300      	movs	r3, #0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d109      	bne.n	800233c <xQueueGenericSend+0x5c>
 8002328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800232c:	f383 8811 	msr	BASEPRI, r3
 8002330:	f3bf 8f6f 	isb	sy
 8002334:	f3bf 8f4f 	dsb	sy
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
 800233a:	e7fe      	b.n	800233a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	2b02      	cmp	r3, #2
 8002340:	d103      	bne.n	800234a <xQueueGenericSend+0x6a>
 8002342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002346:	2b01      	cmp	r3, #1
 8002348:	d101      	bne.n	800234e <xQueueGenericSend+0x6e>
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <xQueueGenericSend+0x70>
 800234e:	2300      	movs	r3, #0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d109      	bne.n	8002368 <xQueueGenericSend+0x88>
 8002354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002358:	f383 8811 	msr	BASEPRI, r3
 800235c:	f3bf 8f6f 	isb	sy
 8002360:	f3bf 8f4f 	dsb	sy
 8002364:	623b      	str	r3, [r7, #32]
 8002366:	e7fe      	b.n	8002366 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002368:	f001 f996 	bl	8003698 <xTaskGetSchedulerState>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d102      	bne.n	8002378 <xQueueGenericSend+0x98>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <xQueueGenericSend+0x9c>
 8002378:	2301      	movs	r3, #1
 800237a:	e000      	b.n	800237e <xQueueGenericSend+0x9e>
 800237c:	2300      	movs	r3, #0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d109      	bne.n	8002396 <xQueueGenericSend+0xb6>
 8002382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002386:	f383 8811 	msr	BASEPRI, r3
 800238a:	f3bf 8f6f 	isb	sy
 800238e:	f3bf 8f4f 	dsb	sy
 8002392:	61fb      	str	r3, [r7, #28]
 8002394:	e7fe      	b.n	8002394 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002396:	f001 fea7 	bl	80040e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800239a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800239c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800239e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d302      	bcc.n	80023ac <xQueueGenericSend+0xcc>
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d129      	bne.n	8002400 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	68b9      	ldr	r1, [r7, #8]
 80023b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80023b2:	f000 f9ff 	bl	80027b4 <prvCopyDataToQueue>
 80023b6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80023b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d010      	beq.n	80023e2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80023c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c2:	3324      	adds	r3, #36	; 0x24
 80023c4:	4618      	mov	r0, r3
 80023c6:	f000 ffad 	bl	8003324 <xTaskRemoveFromEventList>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d013      	beq.n	80023f8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80023d0:	4b3f      	ldr	r3, [pc, #252]	; (80024d0 <xQueueGenericSend+0x1f0>)
 80023d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	f3bf 8f4f 	dsb	sy
 80023dc:	f3bf 8f6f 	isb	sy
 80023e0:	e00a      	b.n	80023f8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80023e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d007      	beq.n	80023f8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80023e8:	4b39      	ldr	r3, [pc, #228]	; (80024d0 <xQueueGenericSend+0x1f0>)
 80023ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	f3bf 8f4f 	dsb	sy
 80023f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80023f8:	f001 fea4 	bl	8004144 <vPortExitCritical>
				return pdPASS;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e063      	b.n	80024c8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d103      	bne.n	800240e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002406:	f001 fe9d 	bl	8004144 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800240a:	2300      	movs	r3, #0
 800240c:	e05c      	b.n	80024c8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800240e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002410:	2b00      	cmp	r3, #0
 8002412:	d106      	bne.n	8002422 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002414:	f107 0314 	add.w	r3, r7, #20
 8002418:	4618      	mov	r0, r3
 800241a:	f000 ffe5 	bl	80033e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800241e:	2301      	movs	r3, #1
 8002420:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002422:	f001 fe8f 	bl	8004144 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002426:	f000 fd5d 	bl	8002ee4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800242a:	f001 fe5d 	bl	80040e8 <vPortEnterCritical>
 800242e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002430:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002434:	b25b      	sxtb	r3, r3
 8002436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800243a:	d103      	bne.n	8002444 <xQueueGenericSend+0x164>
 800243c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002446:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800244a:	b25b      	sxtb	r3, r3
 800244c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002450:	d103      	bne.n	800245a <xQueueGenericSend+0x17a>
 8002452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800245a:	f001 fe73 	bl	8004144 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800245e:	1d3a      	adds	r2, r7, #4
 8002460:	f107 0314 	add.w	r3, r7, #20
 8002464:	4611      	mov	r1, r2
 8002466:	4618      	mov	r0, r3
 8002468:	f000 ffd4 	bl	8003414 <xTaskCheckForTimeOut>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d124      	bne.n	80024bc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002472:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002474:	f000 fa96 	bl	80029a4 <prvIsQueueFull>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d018      	beq.n	80024b0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800247e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002480:	3310      	adds	r3, #16
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	4611      	mov	r1, r2
 8002486:	4618      	mov	r0, r3
 8002488:	f000 fefe 	bl	8003288 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800248c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800248e:	f000 fa21 	bl	80028d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002492:	f000 fd35 	bl	8002f00 <xTaskResumeAll>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	f47f af7c 	bne.w	8002396 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800249e:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <xQueueGenericSend+0x1f0>)
 80024a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	f3bf 8f4f 	dsb	sy
 80024aa:	f3bf 8f6f 	isb	sy
 80024ae:	e772      	b.n	8002396 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80024b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024b2:	f000 fa0f 	bl	80028d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80024b6:	f000 fd23 	bl	8002f00 <xTaskResumeAll>
 80024ba:	e76c      	b.n	8002396 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80024bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024be:	f000 fa09 	bl	80028d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80024c2:	f000 fd1d 	bl	8002f00 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80024c6:	2300      	movs	r3, #0
		}
	}
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3738      	adds	r7, #56	; 0x38
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	e000ed04 	.word	0xe000ed04

080024d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b08e      	sub	sp, #56	; 0x38
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
 80024e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80024e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d109      	bne.n	8002500 <xQueueGenericSendFromISR+0x2c>
 80024ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f0:	f383 8811 	msr	BASEPRI, r3
 80024f4:	f3bf 8f6f 	isb	sy
 80024f8:	f3bf 8f4f 	dsb	sy
 80024fc:	627b      	str	r3, [r7, #36]	; 0x24
 80024fe:	e7fe      	b.n	80024fe <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d103      	bne.n	800250e <xQueueGenericSendFromISR+0x3a>
 8002506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <xQueueGenericSendFromISR+0x3e>
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <xQueueGenericSendFromISR+0x40>
 8002512:	2300      	movs	r3, #0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d109      	bne.n	800252c <xQueueGenericSendFromISR+0x58>
 8002518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800251c:	f383 8811 	msr	BASEPRI, r3
 8002520:	f3bf 8f6f 	isb	sy
 8002524:	f3bf 8f4f 	dsb	sy
 8002528:	623b      	str	r3, [r7, #32]
 800252a:	e7fe      	b.n	800252a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	2b02      	cmp	r3, #2
 8002530:	d103      	bne.n	800253a <xQueueGenericSendFromISR+0x66>
 8002532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002536:	2b01      	cmp	r3, #1
 8002538:	d101      	bne.n	800253e <xQueueGenericSendFromISR+0x6a>
 800253a:	2301      	movs	r3, #1
 800253c:	e000      	b.n	8002540 <xQueueGenericSendFromISR+0x6c>
 800253e:	2300      	movs	r3, #0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d109      	bne.n	8002558 <xQueueGenericSendFromISR+0x84>
 8002544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002548:	f383 8811 	msr	BASEPRI, r3
 800254c:	f3bf 8f6f 	isb	sy
 8002550:	f3bf 8f4f 	dsb	sy
 8002554:	61fb      	str	r3, [r7, #28]
 8002556:	e7fe      	b.n	8002556 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002558:	f001 fe80 	bl	800425c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800255c:	f3ef 8211 	mrs	r2, BASEPRI
 8002560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002564:	f383 8811 	msr	BASEPRI, r3
 8002568:	f3bf 8f6f 	isb	sy
 800256c:	f3bf 8f4f 	dsb	sy
 8002570:	61ba      	str	r2, [r7, #24]
 8002572:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002574:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002576:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800257a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800257c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800257e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002580:	429a      	cmp	r2, r3
 8002582:	d302      	bcc.n	800258a <xQueueGenericSendFromISR+0xb6>
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	2b02      	cmp	r3, #2
 8002588:	d12c      	bne.n	80025e4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800258a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800258c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002590:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	68b9      	ldr	r1, [r7, #8]
 8002598:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800259a:	f000 f90b 	bl	80027b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800259e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80025a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a6:	d112      	bne.n	80025ce <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d016      	beq.n	80025de <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b2:	3324      	adds	r3, #36	; 0x24
 80025b4:	4618      	mov	r0, r3
 80025b6:	f000 feb5 	bl	8003324 <xTaskRemoveFromEventList>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00e      	beq.n	80025de <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00b      	beq.n	80025de <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2201      	movs	r2, #1
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	e007      	b.n	80025de <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80025ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80025d2:	3301      	adds	r3, #1
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	b25a      	sxtb	r2, r3
 80025d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80025de:	2301      	movs	r3, #1
 80025e0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80025e2:	e001      	b.n	80025e8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80025e4:	2300      	movs	r3, #0
 80025e6:	637b      	str	r3, [r7, #52]	; 0x34
 80025e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ea:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80025f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3738      	adds	r7, #56	; 0x38
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b08c      	sub	sp, #48	; 0x30
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002608:	2300      	movs	r3, #0
 800260a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002612:	2b00      	cmp	r3, #0
 8002614:	d109      	bne.n	800262a <xQueueReceive+0x2e>
	__asm volatile
 8002616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800261a:	f383 8811 	msr	BASEPRI, r3
 800261e:	f3bf 8f6f 	isb	sy
 8002622:	f3bf 8f4f 	dsb	sy
 8002626:	623b      	str	r3, [r7, #32]
 8002628:	e7fe      	b.n	8002628 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d103      	bne.n	8002638 <xQueueReceive+0x3c>
 8002630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <xQueueReceive+0x40>
 8002638:	2301      	movs	r3, #1
 800263a:	e000      	b.n	800263e <xQueueReceive+0x42>
 800263c:	2300      	movs	r3, #0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d109      	bne.n	8002656 <xQueueReceive+0x5a>
 8002642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002646:	f383 8811 	msr	BASEPRI, r3
 800264a:	f3bf 8f6f 	isb	sy
 800264e:	f3bf 8f4f 	dsb	sy
 8002652:	61fb      	str	r3, [r7, #28]
 8002654:	e7fe      	b.n	8002654 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002656:	f001 f81f 	bl	8003698 <xTaskGetSchedulerState>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d102      	bne.n	8002666 <xQueueReceive+0x6a>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <xQueueReceive+0x6e>
 8002666:	2301      	movs	r3, #1
 8002668:	e000      	b.n	800266c <xQueueReceive+0x70>
 800266a:	2300      	movs	r3, #0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d109      	bne.n	8002684 <xQueueReceive+0x88>
 8002670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002674:	f383 8811 	msr	BASEPRI, r3
 8002678:	f3bf 8f6f 	isb	sy
 800267c:	f3bf 8f4f 	dsb	sy
 8002680:	61bb      	str	r3, [r7, #24]
 8002682:	e7fe      	b.n	8002682 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002684:	f001 fd30 	bl	80040e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800268a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	2b00      	cmp	r3, #0
 8002692:	d01f      	beq.n	80026d4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002694:	68b9      	ldr	r1, [r7, #8]
 8002696:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002698:	f000 f8f6 	bl	8002888 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	1e5a      	subs	r2, r3, #1
 80026a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00f      	beq.n	80026cc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ae:	3310      	adds	r3, #16
 80026b0:	4618      	mov	r0, r3
 80026b2:	f000 fe37 	bl	8003324 <xTaskRemoveFromEventList>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d007      	beq.n	80026cc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80026bc:	4b3c      	ldr	r3, [pc, #240]	; (80027b0 <xQueueReceive+0x1b4>)
 80026be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	f3bf 8f4f 	dsb	sy
 80026c8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80026cc:	f001 fd3a 	bl	8004144 <vPortExitCritical>
				return pdPASS;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e069      	b.n	80027a8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d103      	bne.n	80026e2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80026da:	f001 fd33 	bl	8004144 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80026de:	2300      	movs	r3, #0
 80026e0:	e062      	b.n	80027a8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80026e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d106      	bne.n	80026f6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80026e8:	f107 0310 	add.w	r3, r7, #16
 80026ec:	4618      	mov	r0, r3
 80026ee:	f000 fe7b 	bl	80033e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80026f2:	2301      	movs	r3, #1
 80026f4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80026f6:	f001 fd25 	bl	8004144 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80026fa:	f000 fbf3 	bl	8002ee4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80026fe:	f001 fcf3 	bl	80040e8 <vPortEnterCritical>
 8002702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002704:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002708:	b25b      	sxtb	r3, r3
 800270a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800270e:	d103      	bne.n	8002718 <xQueueReceive+0x11c>
 8002710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002712:	2200      	movs	r2, #0
 8002714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800271e:	b25b      	sxtb	r3, r3
 8002720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002724:	d103      	bne.n	800272e <xQueueReceive+0x132>
 8002726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800272e:	f001 fd09 	bl	8004144 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002732:	1d3a      	adds	r2, r7, #4
 8002734:	f107 0310 	add.w	r3, r7, #16
 8002738:	4611      	mov	r1, r2
 800273a:	4618      	mov	r0, r3
 800273c:	f000 fe6a 	bl	8003414 <xTaskCheckForTimeOut>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d123      	bne.n	800278e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002746:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002748:	f000 f916 	bl	8002978 <prvIsQueueEmpty>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d017      	beq.n	8002782 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002754:	3324      	adds	r3, #36	; 0x24
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	4611      	mov	r1, r2
 800275a:	4618      	mov	r0, r3
 800275c:	f000 fd94 	bl	8003288 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002760:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002762:	f000 f8b7 	bl	80028d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002766:	f000 fbcb 	bl	8002f00 <xTaskResumeAll>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d189      	bne.n	8002684 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8002770:	4b0f      	ldr	r3, [pc, #60]	; (80027b0 <xQueueReceive+0x1b4>)
 8002772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	f3bf 8f4f 	dsb	sy
 800277c:	f3bf 8f6f 	isb	sy
 8002780:	e780      	b.n	8002684 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002782:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002784:	f000 f8a6 	bl	80028d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002788:	f000 fbba 	bl	8002f00 <xTaskResumeAll>
 800278c:	e77a      	b.n	8002684 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800278e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002790:	f000 f8a0 	bl	80028d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002794:	f000 fbb4 	bl	8002f00 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002798:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800279a:	f000 f8ed 	bl	8002978 <prvIsQueueEmpty>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f43f af6f 	beq.w	8002684 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80027a6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3730      	adds	r7, #48	; 0x30
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	e000ed04 	.word	0xe000ed04

080027b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80027c0:	2300      	movs	r3, #0
 80027c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10d      	bne.n	80027ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d14d      	bne.n	8002876 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	4618      	mov	r0, r3
 80027e0:	f000 ff78 	bl	80036d4 <xTaskPriorityDisinherit>
 80027e4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	605a      	str	r2, [r3, #4]
 80027ec:	e043      	b.n	8002876 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d119      	bne.n	8002828 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6898      	ldr	r0, [r3, #8]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fc:	461a      	mov	r2, r3
 80027fe:	68b9      	ldr	r1, [r7, #8]
 8002800:	f001 ff66 	bl	80046d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280c:	441a      	add	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	689a      	ldr	r2, [r3, #8]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	429a      	cmp	r2, r3
 800281c:	d32b      	bcc.n	8002876 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	609a      	str	r2, [r3, #8]
 8002826:	e026      	b.n	8002876 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	68d8      	ldr	r0, [r3, #12]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002830:	461a      	mov	r2, r3
 8002832:	68b9      	ldr	r1, [r7, #8]
 8002834:	f001 ff4c 	bl	80046d0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	68da      	ldr	r2, [r3, #12]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	425b      	negs	r3, r3
 8002842:	441a      	add	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	68da      	ldr	r2, [r3, #12]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	429a      	cmp	r2, r3
 8002852:	d207      	bcs.n	8002864 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	685a      	ldr	r2, [r3, #4]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285c:	425b      	negs	r3, r3
 800285e:	441a      	add	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b02      	cmp	r3, #2
 8002868:	d105      	bne.n	8002876 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d002      	beq.n	8002876 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	3b01      	subs	r3, #1
 8002874:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1c5a      	adds	r2, r3, #1
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800287e:	697b      	ldr	r3, [r7, #20]
}
 8002880:	4618      	mov	r0, r3
 8002882:	3718      	adds	r7, #24
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	2b00      	cmp	r3, #0
 8002898:	d018      	beq.n	80028cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68da      	ldr	r2, [r3, #12]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	441a      	add	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68da      	ldr	r2, [r3, #12]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d303      	bcc.n	80028bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68d9      	ldr	r1, [r3, #12]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c4:	461a      	mov	r2, r3
 80028c6:	6838      	ldr	r0, [r7, #0]
 80028c8:	f001 ff02 	bl	80046d0 <memcpy>
	}
}
 80028cc:	bf00      	nop
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80028dc:	f001 fc04 	bl	80040e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80028e8:	e011      	b.n	800290e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d012      	beq.n	8002918 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	3324      	adds	r3, #36	; 0x24
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 fd14 	bl	8003324 <xTaskRemoveFromEventList>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002902:	f000 fde7 	bl	80034d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002906:	7bfb      	ldrb	r3, [r7, #15]
 8002908:	3b01      	subs	r3, #1
 800290a:	b2db      	uxtb	r3, r3
 800290c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800290e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002912:	2b00      	cmp	r3, #0
 8002914:	dce9      	bgt.n	80028ea <prvUnlockQueue+0x16>
 8002916:	e000      	b.n	800291a <prvUnlockQueue+0x46>
					break;
 8002918:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	22ff      	movs	r2, #255	; 0xff
 800291e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002922:	f001 fc0f 	bl	8004144 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002926:	f001 fbdf 	bl	80040e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002930:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002932:	e011      	b.n	8002958 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d012      	beq.n	8002962 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	3310      	adds	r3, #16
 8002940:	4618      	mov	r0, r3
 8002942:	f000 fcef 	bl	8003324 <xTaskRemoveFromEventList>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800294c:	f000 fdc2 	bl	80034d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002950:	7bbb      	ldrb	r3, [r7, #14]
 8002952:	3b01      	subs	r3, #1
 8002954:	b2db      	uxtb	r3, r3
 8002956:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002958:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800295c:	2b00      	cmp	r3, #0
 800295e:	dce9      	bgt.n	8002934 <prvUnlockQueue+0x60>
 8002960:	e000      	b.n	8002964 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002962:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	22ff      	movs	r2, #255	; 0xff
 8002968:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800296c:	f001 fbea 	bl	8004144 <vPortExitCritical>
}
 8002970:	bf00      	nop
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002980:	f001 fbb2 	bl	80040e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002988:	2b00      	cmp	r3, #0
 800298a:	d102      	bne.n	8002992 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800298c:	2301      	movs	r3, #1
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	e001      	b.n	8002996 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002992:	2300      	movs	r3, #0
 8002994:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002996:	f001 fbd5 	bl	8004144 <vPortExitCritical>

	return xReturn;
 800299a:	68fb      	ldr	r3, [r7, #12]
}
 800299c:	4618      	mov	r0, r3
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80029ac:	f001 fb9c 	bl	80040e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d102      	bne.n	80029c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80029bc:	2301      	movs	r3, #1
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	e001      	b.n	80029c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80029c2:	2300      	movs	r3, #0
 80029c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80029c6:	f001 fbbd 	bl	8004144 <vPortExitCritical>

	return xReturn;
 80029ca:	68fb      	ldr	r3, [r7, #12]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80029de:	2300      	movs	r3, #0
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	e014      	b.n	8002a0e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80029e4:	4a0e      	ldr	r2, [pc, #56]	; (8002a20 <vQueueAddToRegistry+0x4c>)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10b      	bne.n	8002a08 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80029f0:	490b      	ldr	r1, [pc, #44]	; (8002a20 <vQueueAddToRegistry+0x4c>)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80029fa:	4a09      	ldr	r2, [pc, #36]	; (8002a20 <vQueueAddToRegistry+0x4c>)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	4413      	add	r3, r2
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002a06:	e005      	b.n	8002a14 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	60fb      	str	r3, [r7, #12]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2b07      	cmp	r3, #7
 8002a12:	d9e7      	bls.n	80029e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002a14:	bf00      	nop
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bc80      	pop	{r7}
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	20001bc4 	.word	0x20001bc4

08002a24 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002a34:	f001 fb58 	bl	80040e8 <vPortEnterCritical>
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a3e:	b25b      	sxtb	r3, r3
 8002a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a44:	d103      	bne.n	8002a4e <vQueueWaitForMessageRestricted+0x2a>
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a54:	b25b      	sxtb	r3, r3
 8002a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a5a:	d103      	bne.n	8002a64 <vQueueWaitForMessageRestricted+0x40>
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a64:	f001 fb6e 	bl	8004144 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d106      	bne.n	8002a7e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	3324      	adds	r3, #36	; 0x24
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	68b9      	ldr	r1, [r7, #8]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f000 fc29 	bl	80032d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002a7e:	6978      	ldr	r0, [r7, #20]
 8002a80:	f7ff ff28 	bl	80028d4 <prvUnlockQueue>
	}
 8002a84:	bf00      	nop
 8002a86:	3718      	adds	r7, #24
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b08e      	sub	sp, #56	; 0x38
 8002a90:	af04      	add	r7, sp, #16
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
 8002a98:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d109      	bne.n	8002ab4 <xTaskCreateStatic+0x28>
 8002aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa4:	f383 8811 	msr	BASEPRI, r3
 8002aa8:	f3bf 8f6f 	isb	sy
 8002aac:	f3bf 8f4f 	dsb	sy
 8002ab0:	623b      	str	r3, [r7, #32]
 8002ab2:	e7fe      	b.n	8002ab2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d109      	bne.n	8002ace <xTaskCreateStatic+0x42>
 8002aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002abe:	f383 8811 	msr	BASEPRI, r3
 8002ac2:	f3bf 8f6f 	isb	sy
 8002ac6:	f3bf 8f4f 	dsb	sy
 8002aca:	61fb      	str	r3, [r7, #28]
 8002acc:	e7fe      	b.n	8002acc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002ace:	235c      	movs	r3, #92	; 0x5c
 8002ad0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	2b5c      	cmp	r3, #92	; 0x5c
 8002ad6:	d009      	beq.n	8002aec <xTaskCreateStatic+0x60>
 8002ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002adc:	f383 8811 	msr	BASEPRI, r3
 8002ae0:	f3bf 8f6f 	isb	sy
 8002ae4:	f3bf 8f4f 	dsb	sy
 8002ae8:	61bb      	str	r3, [r7, #24]
 8002aea:	e7fe      	b.n	8002aea <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d01e      	beq.n	8002b30 <xTaskCreateStatic+0xa4>
 8002af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d01b      	beq.n	8002b30 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002afa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b00:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b04:	2202      	movs	r2, #2
 8002b06:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	9303      	str	r3, [sp, #12]
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b10:	9302      	str	r3, [sp, #8]
 8002b12:	f107 0314 	add.w	r3, r7, #20
 8002b16:	9301      	str	r3, [sp, #4]
 8002b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	68b9      	ldr	r1, [r7, #8]
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 f850 	bl	8002bc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002b28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b2a:	f000 f8d3 	bl	8002cd4 <prvAddNewTaskToReadyList>
 8002b2e:	e001      	b.n	8002b34 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8002b30:	2300      	movs	r3, #0
 8002b32:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002b34:	697b      	ldr	r3, [r7, #20]
	}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3728      	adds	r7, #40	; 0x28
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b08c      	sub	sp, #48	; 0x30
 8002b42:	af04      	add	r7, sp, #16
 8002b44:	60f8      	str	r0, [r7, #12]
 8002b46:	60b9      	str	r1, [r7, #8]
 8002b48:	603b      	str	r3, [r7, #0]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b4e:	88fb      	ldrh	r3, [r7, #6]
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	4618      	mov	r0, r3
 8002b54:	f001 fbbe 	bl	80042d4 <pvPortMalloc>
 8002b58:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00e      	beq.n	8002b7e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002b60:	205c      	movs	r0, #92	; 0x5c
 8002b62:	f001 fbb7 	bl	80042d4 <pvPortMalloc>
 8002b66:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	631a      	str	r2, [r3, #48]	; 0x30
 8002b74:	e005      	b.n	8002b82 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002b76:	6978      	ldr	r0, [r7, #20]
 8002b78:	f001 fc6e 	bl	8004458 <vPortFree>
 8002b7c:	e001      	b.n	8002b82 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d017      	beq.n	8002bb8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002b90:	88fa      	ldrh	r2, [r7, #6]
 8002b92:	2300      	movs	r3, #0
 8002b94:	9303      	str	r3, [sp, #12]
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	9302      	str	r3, [sp, #8]
 8002b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9c:	9301      	str	r3, [sp, #4]
 8002b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	68b9      	ldr	r1, [r7, #8]
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f000 f80e 	bl	8002bc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002bac:	69f8      	ldr	r0, [r7, #28]
 8002bae:	f000 f891 	bl	8002cd4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	61bb      	str	r3, [r7, #24]
 8002bb6:	e002      	b.n	8002bbe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8002bbc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002bbe:	69bb      	ldr	r3, [r7, #24]
	}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3720      	adds	r7, #32
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b088      	sub	sp, #32
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
 8002bd4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	461a      	mov	r2, r3
 8002be0:	21a5      	movs	r1, #165	; 0xa5
 8002be2:	f001 fd80 	bl	80046e6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	f023 0307 	bic.w	r3, r3, #7
 8002bfe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d009      	beq.n	8002c1e <prvInitialiseNewTask+0x56>
 8002c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c0e:	f383 8811 	msr	BASEPRI, r3
 8002c12:	f3bf 8f6f 	isb	sy
 8002c16:	f3bf 8f4f 	dsb	sy
 8002c1a:	617b      	str	r3, [r7, #20]
 8002c1c:	e7fe      	b.n	8002c1c <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c1e:	2300      	movs	r3, #0
 8002c20:	61fb      	str	r3, [r7, #28]
 8002c22:	e012      	b.n	8002c4a <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	4413      	add	r3, r2
 8002c2a:	7819      	ldrb	r1, [r3, #0]
 8002c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	4413      	add	r3, r2
 8002c32:	3334      	adds	r3, #52	; 0x34
 8002c34:	460a      	mov	r2, r1
 8002c36:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d006      	beq.n	8002c52 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	3301      	adds	r3, #1
 8002c48:	61fb      	str	r3, [r7, #28]
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	2b0f      	cmp	r3, #15
 8002c4e:	d9e9      	bls.n	8002c24 <prvInitialiseNewTask+0x5c>
 8002c50:	e000      	b.n	8002c54 <prvInitialiseNewTask+0x8c>
		{
			break;
 8002c52:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5e:	2b37      	cmp	r3, #55	; 0x37
 8002c60:	d901      	bls.n	8002c66 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002c62:	2337      	movs	r3, #55	; 0x37
 8002c64:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c6a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c70:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c74:	2200      	movs	r2, #0
 8002c76:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7a:	3304      	adds	r3, #4
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff f9a0 	bl	8001fc2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c84:	3318      	adds	r3, #24
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7ff f99b 	bl	8001fc2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c90:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c94:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ca0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	68f9      	ldr	r1, [r7, #12]
 8002cb4:	69b8      	ldr	r0, [r7, #24]
 8002cb6:	f001 f929 	bl	8003f0c <pxPortInitialiseStack>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cbe:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d002      	beq.n	8002ccc <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ccc:	bf00      	nop
 8002cce:	3720      	adds	r7, #32
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002cdc:	f001 fa04 	bl	80040e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002ce0:	4b2d      	ldr	r3, [pc, #180]	; (8002d98 <prvAddNewTaskToReadyList+0xc4>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	4a2c      	ldr	r2, [pc, #176]	; (8002d98 <prvAddNewTaskToReadyList+0xc4>)
 8002ce8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002cea:	4b2c      	ldr	r3, [pc, #176]	; (8002d9c <prvAddNewTaskToReadyList+0xc8>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d109      	bne.n	8002d06 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002cf2:	4a2a      	ldr	r2, [pc, #168]	; (8002d9c <prvAddNewTaskToReadyList+0xc8>)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002cf8:	4b27      	ldr	r3, [pc, #156]	; (8002d98 <prvAddNewTaskToReadyList+0xc4>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d110      	bne.n	8002d22 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002d00:	f000 fc0c 	bl	800351c <prvInitialiseTaskLists>
 8002d04:	e00d      	b.n	8002d22 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002d06:	4b26      	ldr	r3, [pc, #152]	; (8002da0 <prvAddNewTaskToReadyList+0xcc>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d109      	bne.n	8002d22 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002d0e:	4b23      	ldr	r3, [pc, #140]	; (8002d9c <prvAddNewTaskToReadyList+0xc8>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d802      	bhi.n	8002d22 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002d1c:	4a1f      	ldr	r2, [pc, #124]	; (8002d9c <prvAddNewTaskToReadyList+0xc8>)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002d22:	4b20      	ldr	r3, [pc, #128]	; (8002da4 <prvAddNewTaskToReadyList+0xd0>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	3301      	adds	r3, #1
 8002d28:	4a1e      	ldr	r2, [pc, #120]	; (8002da4 <prvAddNewTaskToReadyList+0xd0>)
 8002d2a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002d2c:	4b1d      	ldr	r3, [pc, #116]	; (8002da4 <prvAddNewTaskToReadyList+0xd0>)
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d38:	4b1b      	ldr	r3, [pc, #108]	; (8002da8 <prvAddNewTaskToReadyList+0xd4>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d903      	bls.n	8002d48 <prvAddNewTaskToReadyList+0x74>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d44:	4a18      	ldr	r2, [pc, #96]	; (8002da8 <prvAddNewTaskToReadyList+0xd4>)
 8002d46:	6013      	str	r3, [r2, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4413      	add	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4a15      	ldr	r2, [pc, #84]	; (8002dac <prvAddNewTaskToReadyList+0xd8>)
 8002d56:	441a      	add	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	3304      	adds	r3, #4
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	4610      	mov	r0, r2
 8002d60:	f7ff f93b 	bl	8001fda <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002d64:	f001 f9ee 	bl	8004144 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002d68:	4b0d      	ldr	r3, [pc, #52]	; (8002da0 <prvAddNewTaskToReadyList+0xcc>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00e      	beq.n	8002d8e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002d70:	4b0a      	ldr	r3, [pc, #40]	; (8002d9c <prvAddNewTaskToReadyList+0xc8>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d207      	bcs.n	8002d8e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002d7e:	4b0c      	ldr	r3, [pc, #48]	; (8002db0 <prvAddNewTaskToReadyList+0xdc>)
 8002d80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	f3bf 8f4f 	dsb	sy
 8002d8a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d8e:	bf00      	nop
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	20000928 	.word	0x20000928
 8002d9c:	20000454 	.word	0x20000454
 8002da0:	20000934 	.word	0x20000934
 8002da4:	20000944 	.word	0x20000944
 8002da8:	20000930 	.word	0x20000930
 8002dac:	20000458 	.word	0x20000458
 8002db0:	e000ed04 	.word	0xe000ed04

08002db4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d016      	beq.n	8002df4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002dc6:	4b13      	ldr	r3, [pc, #76]	; (8002e14 <vTaskDelay+0x60>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d009      	beq.n	8002de2 <vTaskDelay+0x2e>
 8002dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd2:	f383 8811 	msr	BASEPRI, r3
 8002dd6:	f3bf 8f6f 	isb	sy
 8002dda:	f3bf 8f4f 	dsb	sy
 8002dde:	60bb      	str	r3, [r7, #8]
 8002de0:	e7fe      	b.n	8002de0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002de2:	f000 f87f 	bl	8002ee4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002de6:	2100      	movs	r1, #0
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 fcdf 	bl	80037ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002dee:	f000 f887 	bl	8002f00 <xTaskResumeAll>
 8002df2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d107      	bne.n	8002e0a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002dfa:	4b07      	ldr	r3, [pc, #28]	; (8002e18 <vTaskDelay+0x64>)
 8002dfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	f3bf 8f4f 	dsb	sy
 8002e06:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002e0a:	bf00      	nop
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	20000950 	.word	0x20000950
 8002e18:	e000ed04 	.word	0xe000ed04

08002e1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b08a      	sub	sp, #40	; 0x28
 8002e20:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002e22:	2300      	movs	r3, #0
 8002e24:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002e26:	2300      	movs	r3, #0
 8002e28:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002e2a:	463a      	mov	r2, r7
 8002e2c:	1d39      	adds	r1, r7, #4
 8002e2e:	f107 0308 	add.w	r3, r7, #8
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff f876 	bl	8001f24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002e38:	6839      	ldr	r1, [r7, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	68ba      	ldr	r2, [r7, #8]
 8002e3e:	9202      	str	r2, [sp, #8]
 8002e40:	9301      	str	r3, [sp, #4]
 8002e42:	2300      	movs	r3, #0
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	2300      	movs	r3, #0
 8002e48:	460a      	mov	r2, r1
 8002e4a:	4920      	ldr	r1, [pc, #128]	; (8002ecc <vTaskStartScheduler+0xb0>)
 8002e4c:	4820      	ldr	r0, [pc, #128]	; (8002ed0 <vTaskStartScheduler+0xb4>)
 8002e4e:	f7ff fe1d 	bl	8002a8c <xTaskCreateStatic>
 8002e52:	4602      	mov	r2, r0
 8002e54:	4b1f      	ldr	r3, [pc, #124]	; (8002ed4 <vTaskStartScheduler+0xb8>)
 8002e56:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002e58:	4b1e      	ldr	r3, [pc, #120]	; (8002ed4 <vTaskStartScheduler+0xb8>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d002      	beq.n	8002e66 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002e60:	2301      	movs	r3, #1
 8002e62:	617b      	str	r3, [r7, #20]
 8002e64:	e001      	b.n	8002e6a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002e66:	2300      	movs	r3, #0
 8002e68:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d102      	bne.n	8002e76 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002e70:	f000 fcf0 	bl	8003854 <xTimerCreateTimerTask>
 8002e74:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d115      	bne.n	8002ea8 <vTaskStartScheduler+0x8c>
 8002e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e80:	f383 8811 	msr	BASEPRI, r3
 8002e84:	f3bf 8f6f 	isb	sy
 8002e88:	f3bf 8f4f 	dsb	sy
 8002e8c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002e8e:	4b12      	ldr	r3, [pc, #72]	; (8002ed8 <vTaskStartScheduler+0xbc>)
 8002e90:	f04f 32ff 	mov.w	r2, #4294967295
 8002e94:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002e96:	4b11      	ldr	r3, [pc, #68]	; (8002edc <vTaskStartScheduler+0xc0>)
 8002e98:	2201      	movs	r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002e9c:	4b10      	ldr	r3, [pc, #64]	; (8002ee0 <vTaskStartScheduler+0xc4>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002ea2:	f001 f8b1 	bl	8004008 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002ea6:	e00d      	b.n	8002ec4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eae:	d109      	bne.n	8002ec4 <vTaskStartScheduler+0xa8>
 8002eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb4:	f383 8811 	msr	BASEPRI, r3
 8002eb8:	f3bf 8f6f 	isb	sy
 8002ebc:	f3bf 8f4f 	dsb	sy
 8002ec0:	60fb      	str	r3, [r7, #12]
 8002ec2:	e7fe      	b.n	8002ec2 <vTaskStartScheduler+0xa6>
}
 8002ec4:	bf00      	nop
 8002ec6:	3718      	adds	r7, #24
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	0800511c 	.word	0x0800511c
 8002ed0:	080034ed 	.word	0x080034ed
 8002ed4:	2000094c 	.word	0x2000094c
 8002ed8:	20000948 	.word	0x20000948
 8002edc:	20000934 	.word	0x20000934
 8002ee0:	2000092c 	.word	0x2000092c

08002ee4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002ee8:	4b04      	ldr	r3, [pc, #16]	; (8002efc <vTaskSuspendAll+0x18>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	3301      	adds	r3, #1
 8002eee:	4a03      	ldr	r2, [pc, #12]	; (8002efc <vTaskSuspendAll+0x18>)
 8002ef0:	6013      	str	r3, [r2, #0]
}
 8002ef2:	bf00      	nop
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bc80      	pop	{r7}
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	20000950 	.word	0x20000950

08002f00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002f06:	2300      	movs	r3, #0
 8002f08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002f0e:	4b41      	ldr	r3, [pc, #260]	; (8003014 <xTaskResumeAll+0x114>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d109      	bne.n	8002f2a <xTaskResumeAll+0x2a>
 8002f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f1a:	f383 8811 	msr	BASEPRI, r3
 8002f1e:	f3bf 8f6f 	isb	sy
 8002f22:	f3bf 8f4f 	dsb	sy
 8002f26:	603b      	str	r3, [r7, #0]
 8002f28:	e7fe      	b.n	8002f28 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002f2a:	f001 f8dd 	bl	80040e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002f2e:	4b39      	ldr	r3, [pc, #228]	; (8003014 <xTaskResumeAll+0x114>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	3b01      	subs	r3, #1
 8002f34:	4a37      	ldr	r2, [pc, #220]	; (8003014 <xTaskResumeAll+0x114>)
 8002f36:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f38:	4b36      	ldr	r3, [pc, #216]	; (8003014 <xTaskResumeAll+0x114>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d162      	bne.n	8003006 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002f40:	4b35      	ldr	r3, [pc, #212]	; (8003018 <xTaskResumeAll+0x118>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d05e      	beq.n	8003006 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f48:	e02f      	b.n	8002faa <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002f4a:	4b34      	ldr	r3, [pc, #208]	; (800301c <xTaskResumeAll+0x11c>)
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	3318      	adds	r3, #24
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff f89a 	bl	8002090 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	3304      	adds	r3, #4
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff f895 	bl	8002090 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f6a:	4b2d      	ldr	r3, [pc, #180]	; (8003020 <xTaskResumeAll+0x120>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d903      	bls.n	8002f7a <xTaskResumeAll+0x7a>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f76:	4a2a      	ldr	r2, [pc, #168]	; (8003020 <xTaskResumeAll+0x120>)
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f7e:	4613      	mov	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4a27      	ldr	r2, [pc, #156]	; (8003024 <xTaskResumeAll+0x124>)
 8002f88:	441a      	add	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	4619      	mov	r1, r3
 8002f90:	4610      	mov	r0, r2
 8002f92:	f7ff f822 	bl	8001fda <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f9a:	4b23      	ldr	r3, [pc, #140]	; (8003028 <xTaskResumeAll+0x128>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d302      	bcc.n	8002faa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002fa4:	4b21      	ldr	r3, [pc, #132]	; (800302c <xTaskResumeAll+0x12c>)
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002faa:	4b1c      	ldr	r3, [pc, #112]	; (800301c <xTaskResumeAll+0x11c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1cb      	bne.n	8002f4a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002fb8:	f000 fb4a 	bl	8003650 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002fbc:	4b1c      	ldr	r3, [pc, #112]	; (8003030 <xTaskResumeAll+0x130>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d010      	beq.n	8002fea <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002fc8:	f000 f844 	bl	8003054 <xTaskIncrementTick>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d002      	beq.n	8002fd8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002fd2:	4b16      	ldr	r3, [pc, #88]	; (800302c <xTaskResumeAll+0x12c>)
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1f1      	bne.n	8002fc8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8002fe4:	4b12      	ldr	r3, [pc, #72]	; (8003030 <xTaskResumeAll+0x130>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002fea:	4b10      	ldr	r3, [pc, #64]	; (800302c <xTaskResumeAll+0x12c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d009      	beq.n	8003006 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002ff6:	4b0f      	ldr	r3, [pc, #60]	; (8003034 <xTaskResumeAll+0x134>)
 8002ff8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	f3bf 8f4f 	dsb	sy
 8003002:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003006:	f001 f89d 	bl	8004144 <vPortExitCritical>

	return xAlreadyYielded;
 800300a:	68bb      	ldr	r3, [r7, #8]
}
 800300c:	4618      	mov	r0, r3
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	20000950 	.word	0x20000950
 8003018:	20000928 	.word	0x20000928
 800301c:	200008e8 	.word	0x200008e8
 8003020:	20000930 	.word	0x20000930
 8003024:	20000458 	.word	0x20000458
 8003028:	20000454 	.word	0x20000454
 800302c:	2000093c 	.word	0x2000093c
 8003030:	20000938 	.word	0x20000938
 8003034:	e000ed04 	.word	0xe000ed04

08003038 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800303e:	4b04      	ldr	r3, [pc, #16]	; (8003050 <xTaskGetTickCount+0x18>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003044:	687b      	ldr	r3, [r7, #4]
}
 8003046:	4618      	mov	r0, r3
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	bc80      	pop	{r7}
 800304e:	4770      	bx	lr
 8003050:	2000092c 	.word	0x2000092c

08003054 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800305a:	2300      	movs	r3, #0
 800305c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800305e:	4b51      	ldr	r3, [pc, #324]	; (80031a4 <xTaskIncrementTick+0x150>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	f040 808d 	bne.w	8003182 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003068:	4b4f      	ldr	r3, [pc, #316]	; (80031a8 <xTaskIncrementTick+0x154>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	3301      	adds	r3, #1
 800306e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003070:	4a4d      	ldr	r2, [pc, #308]	; (80031a8 <xTaskIncrementTick+0x154>)
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d11f      	bne.n	80030bc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800307c:	4b4b      	ldr	r3, [pc, #300]	; (80031ac <xTaskIncrementTick+0x158>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d009      	beq.n	800309a <xTaskIncrementTick+0x46>
 8003086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308a:	f383 8811 	msr	BASEPRI, r3
 800308e:	f3bf 8f6f 	isb	sy
 8003092:	f3bf 8f4f 	dsb	sy
 8003096:	603b      	str	r3, [r7, #0]
 8003098:	e7fe      	b.n	8003098 <xTaskIncrementTick+0x44>
 800309a:	4b44      	ldr	r3, [pc, #272]	; (80031ac <xTaskIncrementTick+0x158>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	4b43      	ldr	r3, [pc, #268]	; (80031b0 <xTaskIncrementTick+0x15c>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a41      	ldr	r2, [pc, #260]	; (80031ac <xTaskIncrementTick+0x158>)
 80030a6:	6013      	str	r3, [r2, #0]
 80030a8:	4a41      	ldr	r2, [pc, #260]	; (80031b0 <xTaskIncrementTick+0x15c>)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6013      	str	r3, [r2, #0]
 80030ae:	4b41      	ldr	r3, [pc, #260]	; (80031b4 <xTaskIncrementTick+0x160>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	3301      	adds	r3, #1
 80030b4:	4a3f      	ldr	r2, [pc, #252]	; (80031b4 <xTaskIncrementTick+0x160>)
 80030b6:	6013      	str	r3, [r2, #0]
 80030b8:	f000 faca 	bl	8003650 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80030bc:	4b3e      	ldr	r3, [pc, #248]	; (80031b8 <xTaskIncrementTick+0x164>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d34e      	bcc.n	8003164 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030c6:	4b39      	ldr	r3, [pc, #228]	; (80031ac <xTaskIncrementTick+0x158>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <xTaskIncrementTick+0x80>
 80030d0:	2301      	movs	r3, #1
 80030d2:	e000      	b.n	80030d6 <xTaskIncrementTick+0x82>
 80030d4:	2300      	movs	r3, #0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d004      	beq.n	80030e4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030da:	4b37      	ldr	r3, [pc, #220]	; (80031b8 <xTaskIncrementTick+0x164>)
 80030dc:	f04f 32ff 	mov.w	r2, #4294967295
 80030e0:	601a      	str	r2, [r3, #0]
					break;
 80030e2:	e03f      	b.n	8003164 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80030e4:	4b31      	ldr	r3, [pc, #196]	; (80031ac <xTaskIncrementTick+0x158>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d203      	bcs.n	8003104 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80030fc:	4a2e      	ldr	r2, [pc, #184]	; (80031b8 <xTaskIncrementTick+0x164>)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6013      	str	r3, [r2, #0]
						break;
 8003102:	e02f      	b.n	8003164 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	3304      	adds	r3, #4
 8003108:	4618      	mov	r0, r3
 800310a:	f7fe ffc1 	bl	8002090 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003112:	2b00      	cmp	r3, #0
 8003114:	d004      	beq.n	8003120 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	3318      	adds	r3, #24
 800311a:	4618      	mov	r0, r3
 800311c:	f7fe ffb8 	bl	8002090 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003124:	4b25      	ldr	r3, [pc, #148]	; (80031bc <xTaskIncrementTick+0x168>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	429a      	cmp	r2, r3
 800312a:	d903      	bls.n	8003134 <xTaskIncrementTick+0xe0>
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003130:	4a22      	ldr	r2, [pc, #136]	; (80031bc <xTaskIncrementTick+0x168>)
 8003132:	6013      	str	r3, [r2, #0]
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003138:	4613      	mov	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4a1f      	ldr	r2, [pc, #124]	; (80031c0 <xTaskIncrementTick+0x16c>)
 8003142:	441a      	add	r2, r3
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	3304      	adds	r3, #4
 8003148:	4619      	mov	r1, r3
 800314a:	4610      	mov	r0, r2
 800314c:	f7fe ff45 	bl	8001fda <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003154:	4b1b      	ldr	r3, [pc, #108]	; (80031c4 <xTaskIncrementTick+0x170>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315a:	429a      	cmp	r2, r3
 800315c:	d3b3      	bcc.n	80030c6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800315e:	2301      	movs	r3, #1
 8003160:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003162:	e7b0      	b.n	80030c6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003164:	4b17      	ldr	r3, [pc, #92]	; (80031c4 <xTaskIncrementTick+0x170>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800316a:	4915      	ldr	r1, [pc, #84]	; (80031c0 <xTaskIncrementTick+0x16c>)
 800316c:	4613      	mov	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d907      	bls.n	800318c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800317c:	2301      	movs	r3, #1
 800317e:	617b      	str	r3, [r7, #20]
 8003180:	e004      	b.n	800318c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003182:	4b11      	ldr	r3, [pc, #68]	; (80031c8 <xTaskIncrementTick+0x174>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	3301      	adds	r3, #1
 8003188:	4a0f      	ldr	r2, [pc, #60]	; (80031c8 <xTaskIncrementTick+0x174>)
 800318a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800318c:	4b0f      	ldr	r3, [pc, #60]	; (80031cc <xTaskIncrementTick+0x178>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003194:	2301      	movs	r3, #1
 8003196:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003198:	697b      	ldr	r3, [r7, #20]
}
 800319a:	4618      	mov	r0, r3
 800319c:	3718      	adds	r7, #24
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	20000950 	.word	0x20000950
 80031a8:	2000092c 	.word	0x2000092c
 80031ac:	200008e0 	.word	0x200008e0
 80031b0:	200008e4 	.word	0x200008e4
 80031b4:	20000940 	.word	0x20000940
 80031b8:	20000948 	.word	0x20000948
 80031bc:	20000930 	.word	0x20000930
 80031c0:	20000458 	.word	0x20000458
 80031c4:	20000454 	.word	0x20000454
 80031c8:	20000938 	.word	0x20000938
 80031cc:	2000093c 	.word	0x2000093c

080031d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80031d6:	4b27      	ldr	r3, [pc, #156]	; (8003274 <vTaskSwitchContext+0xa4>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80031de:	4b26      	ldr	r3, [pc, #152]	; (8003278 <vTaskSwitchContext+0xa8>)
 80031e0:	2201      	movs	r2, #1
 80031e2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80031e4:	e040      	b.n	8003268 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80031e6:	4b24      	ldr	r3, [pc, #144]	; (8003278 <vTaskSwitchContext+0xa8>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80031ec:	4b23      	ldr	r3, [pc, #140]	; (800327c <vTaskSwitchContext+0xac>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	60fb      	str	r3, [r7, #12]
 80031f2:	e00f      	b.n	8003214 <vTaskSwitchContext+0x44>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d109      	bne.n	800320e <vTaskSwitchContext+0x3e>
 80031fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031fe:	f383 8811 	msr	BASEPRI, r3
 8003202:	f3bf 8f6f 	isb	sy
 8003206:	f3bf 8f4f 	dsb	sy
 800320a:	607b      	str	r3, [r7, #4]
 800320c:	e7fe      	b.n	800320c <vTaskSwitchContext+0x3c>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	3b01      	subs	r3, #1
 8003212:	60fb      	str	r3, [r7, #12]
 8003214:	491a      	ldr	r1, [pc, #104]	; (8003280 <vTaskSwitchContext+0xb0>)
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	4613      	mov	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	440b      	add	r3, r1
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d0e5      	beq.n	80031f4 <vTaskSwitchContext+0x24>
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	4613      	mov	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4413      	add	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	4a13      	ldr	r2, [pc, #76]	; (8003280 <vTaskSwitchContext+0xb0>)
 8003234:	4413      	add	r3, r2
 8003236:	60bb      	str	r3, [r7, #8]
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	685a      	ldr	r2, [r3, #4]
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	605a      	str	r2, [r3, #4]
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	3308      	adds	r3, #8
 800324a:	429a      	cmp	r2, r3
 800324c:	d104      	bne.n	8003258 <vTaskSwitchContext+0x88>
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	685a      	ldr	r2, [r3, #4]
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	605a      	str	r2, [r3, #4]
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	4a09      	ldr	r2, [pc, #36]	; (8003284 <vTaskSwitchContext+0xb4>)
 8003260:	6013      	str	r3, [r2, #0]
 8003262:	4a06      	ldr	r2, [pc, #24]	; (800327c <vTaskSwitchContext+0xac>)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6013      	str	r3, [r2, #0]
}
 8003268:	bf00      	nop
 800326a:	3714      	adds	r7, #20
 800326c:	46bd      	mov	sp, r7
 800326e:	bc80      	pop	{r7}
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	20000950 	.word	0x20000950
 8003278:	2000093c 	.word	0x2000093c
 800327c:	20000930 	.word	0x20000930
 8003280:	20000458 	.word	0x20000458
 8003284:	20000454 	.word	0x20000454

08003288 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d109      	bne.n	80032ac <vTaskPlaceOnEventList+0x24>
 8003298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800329c:	f383 8811 	msr	BASEPRI, r3
 80032a0:	f3bf 8f6f 	isb	sy
 80032a4:	f3bf 8f4f 	dsb	sy
 80032a8:	60fb      	str	r3, [r7, #12]
 80032aa:	e7fe      	b.n	80032aa <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80032ac:	4b07      	ldr	r3, [pc, #28]	; (80032cc <vTaskPlaceOnEventList+0x44>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	3318      	adds	r3, #24
 80032b2:	4619      	mov	r1, r3
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f7fe feb3 	bl	8002020 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80032ba:	2101      	movs	r1, #1
 80032bc:	6838      	ldr	r0, [r7, #0]
 80032be:	f000 fa75 	bl	80037ac <prvAddCurrentTaskToDelayedList>
}
 80032c2:	bf00      	nop
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	20000454 	.word	0x20000454

080032d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d109      	bne.n	80032f6 <vTaskPlaceOnEventListRestricted+0x26>
 80032e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e6:	f383 8811 	msr	BASEPRI, r3
 80032ea:	f3bf 8f6f 	isb	sy
 80032ee:	f3bf 8f4f 	dsb	sy
 80032f2:	617b      	str	r3, [r7, #20]
 80032f4:	e7fe      	b.n	80032f4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80032f6:	4b0a      	ldr	r3, [pc, #40]	; (8003320 <vTaskPlaceOnEventListRestricted+0x50>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	3318      	adds	r3, #24
 80032fc:	4619      	mov	r1, r3
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f7fe fe6b 	bl	8001fda <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d002      	beq.n	8003310 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800330a:	f04f 33ff 	mov.w	r3, #4294967295
 800330e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003310:	6879      	ldr	r1, [r7, #4]
 8003312:	68b8      	ldr	r0, [r7, #8]
 8003314:	f000 fa4a 	bl	80037ac <prvAddCurrentTaskToDelayedList>
	}
 8003318:	bf00      	nop
 800331a:	3718      	adds	r7, #24
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	20000454 	.word	0x20000454

08003324 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d109      	bne.n	800334e <xTaskRemoveFromEventList+0x2a>
 800333a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333e:	f383 8811 	msr	BASEPRI, r3
 8003342:	f3bf 8f6f 	isb	sy
 8003346:	f3bf 8f4f 	dsb	sy
 800334a:	60fb      	str	r3, [r7, #12]
 800334c:	e7fe      	b.n	800334c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	3318      	adds	r3, #24
 8003352:	4618      	mov	r0, r3
 8003354:	f7fe fe9c 	bl	8002090 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003358:	4b1d      	ldr	r3, [pc, #116]	; (80033d0 <xTaskRemoveFromEventList+0xac>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d11d      	bne.n	800339c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	3304      	adds	r3, #4
 8003364:	4618      	mov	r0, r3
 8003366:	f7fe fe93 	bl	8002090 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800336e:	4b19      	ldr	r3, [pc, #100]	; (80033d4 <xTaskRemoveFromEventList+0xb0>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	429a      	cmp	r2, r3
 8003374:	d903      	bls.n	800337e <xTaskRemoveFromEventList+0x5a>
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337a:	4a16      	ldr	r2, [pc, #88]	; (80033d4 <xTaskRemoveFromEventList+0xb0>)
 800337c:	6013      	str	r3, [r2, #0]
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003382:	4613      	mov	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	4413      	add	r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	4a13      	ldr	r2, [pc, #76]	; (80033d8 <xTaskRemoveFromEventList+0xb4>)
 800338c:	441a      	add	r2, r3
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	3304      	adds	r3, #4
 8003392:	4619      	mov	r1, r3
 8003394:	4610      	mov	r0, r2
 8003396:	f7fe fe20 	bl	8001fda <vListInsertEnd>
 800339a:	e005      	b.n	80033a8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	3318      	adds	r3, #24
 80033a0:	4619      	mov	r1, r3
 80033a2:	480e      	ldr	r0, [pc, #56]	; (80033dc <xTaskRemoveFromEventList+0xb8>)
 80033a4:	f7fe fe19 	bl	8001fda <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ac:	4b0c      	ldr	r3, [pc, #48]	; (80033e0 <xTaskRemoveFromEventList+0xbc>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d905      	bls.n	80033c2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80033b6:	2301      	movs	r3, #1
 80033b8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80033ba:	4b0a      	ldr	r3, [pc, #40]	; (80033e4 <xTaskRemoveFromEventList+0xc0>)
 80033bc:	2201      	movs	r2, #1
 80033be:	601a      	str	r2, [r3, #0]
 80033c0:	e001      	b.n	80033c6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80033c2:	2300      	movs	r3, #0
 80033c4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80033c6:	697b      	ldr	r3, [r7, #20]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3718      	adds	r7, #24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	20000950 	.word	0x20000950
 80033d4:	20000930 	.word	0x20000930
 80033d8:	20000458 	.word	0x20000458
 80033dc:	200008e8 	.word	0x200008e8
 80033e0:	20000454 	.word	0x20000454
 80033e4:	2000093c 	.word	0x2000093c

080033e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80033f0:	4b06      	ldr	r3, [pc, #24]	; (800340c <vTaskInternalSetTimeOutState+0x24>)
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80033f8:	4b05      	ldr	r3, [pc, #20]	; (8003410 <vTaskInternalSetTimeOutState+0x28>)
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	605a      	str	r2, [r3, #4]
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	bc80      	pop	{r7}
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	20000940 	.word	0x20000940
 8003410:	2000092c 	.word	0x2000092c

08003414 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b088      	sub	sp, #32
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d109      	bne.n	8003438 <xTaskCheckForTimeOut+0x24>
 8003424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003428:	f383 8811 	msr	BASEPRI, r3
 800342c:	f3bf 8f6f 	isb	sy
 8003430:	f3bf 8f4f 	dsb	sy
 8003434:	613b      	str	r3, [r7, #16]
 8003436:	e7fe      	b.n	8003436 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d109      	bne.n	8003452 <xTaskCheckForTimeOut+0x3e>
 800343e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003442:	f383 8811 	msr	BASEPRI, r3
 8003446:	f3bf 8f6f 	isb	sy
 800344a:	f3bf 8f4f 	dsb	sy
 800344e:	60fb      	str	r3, [r7, #12]
 8003450:	e7fe      	b.n	8003450 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003452:	f000 fe49 	bl	80040e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003456:	4b1d      	ldr	r3, [pc, #116]	; (80034cc <xTaskCheckForTimeOut+0xb8>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346e:	d102      	bne.n	8003476 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003470:	2300      	movs	r3, #0
 8003472:	61fb      	str	r3, [r7, #28]
 8003474:	e023      	b.n	80034be <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	4b15      	ldr	r3, [pc, #84]	; (80034d0 <xTaskCheckForTimeOut+0xbc>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	429a      	cmp	r2, r3
 8003480:	d007      	beq.n	8003492 <xTaskCheckForTimeOut+0x7e>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	429a      	cmp	r2, r3
 800348a:	d302      	bcc.n	8003492 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800348c:	2301      	movs	r3, #1
 800348e:	61fb      	str	r3, [r7, #28]
 8003490:	e015      	b.n	80034be <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	429a      	cmp	r2, r3
 800349a:	d20b      	bcs.n	80034b4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	1ad2      	subs	r2, r2, r3
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f7ff ff9d 	bl	80033e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80034ae:	2300      	movs	r3, #0
 80034b0:	61fb      	str	r3, [r7, #28]
 80034b2:	e004      	b.n	80034be <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	2200      	movs	r2, #0
 80034b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80034ba:	2301      	movs	r3, #1
 80034bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80034be:	f000 fe41 	bl	8004144 <vPortExitCritical>

	return xReturn;
 80034c2:	69fb      	ldr	r3, [r7, #28]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3720      	adds	r7, #32
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	2000092c 	.word	0x2000092c
 80034d0:	20000940 	.word	0x20000940

080034d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80034d8:	4b03      	ldr	r3, [pc, #12]	; (80034e8 <vTaskMissedYield+0x14>)
 80034da:	2201      	movs	r2, #1
 80034dc:	601a      	str	r2, [r3, #0]
}
 80034de:	bf00      	nop
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bc80      	pop	{r7}
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	2000093c 	.word	0x2000093c

080034ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80034f4:	f000 f852 	bl	800359c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80034f8:	4b06      	ldr	r3, [pc, #24]	; (8003514 <prvIdleTask+0x28>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d9f9      	bls.n	80034f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003500:	4b05      	ldr	r3, [pc, #20]	; (8003518 <prvIdleTask+0x2c>)
 8003502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	f3bf 8f4f 	dsb	sy
 800350c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003510:	e7f0      	b.n	80034f4 <prvIdleTask+0x8>
 8003512:	bf00      	nop
 8003514:	20000458 	.word	0x20000458
 8003518:	e000ed04 	.word	0xe000ed04

0800351c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003522:	2300      	movs	r3, #0
 8003524:	607b      	str	r3, [r7, #4]
 8003526:	e00c      	b.n	8003542 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	4613      	mov	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4413      	add	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4a12      	ldr	r2, [pc, #72]	; (800357c <prvInitialiseTaskLists+0x60>)
 8003534:	4413      	add	r3, r2
 8003536:	4618      	mov	r0, r3
 8003538:	f7fe fd24 	bl	8001f84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	3301      	adds	r3, #1
 8003540:	607b      	str	r3, [r7, #4]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b37      	cmp	r3, #55	; 0x37
 8003546:	d9ef      	bls.n	8003528 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003548:	480d      	ldr	r0, [pc, #52]	; (8003580 <prvInitialiseTaskLists+0x64>)
 800354a:	f7fe fd1b 	bl	8001f84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800354e:	480d      	ldr	r0, [pc, #52]	; (8003584 <prvInitialiseTaskLists+0x68>)
 8003550:	f7fe fd18 	bl	8001f84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003554:	480c      	ldr	r0, [pc, #48]	; (8003588 <prvInitialiseTaskLists+0x6c>)
 8003556:	f7fe fd15 	bl	8001f84 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800355a:	480c      	ldr	r0, [pc, #48]	; (800358c <prvInitialiseTaskLists+0x70>)
 800355c:	f7fe fd12 	bl	8001f84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003560:	480b      	ldr	r0, [pc, #44]	; (8003590 <prvInitialiseTaskLists+0x74>)
 8003562:	f7fe fd0f 	bl	8001f84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003566:	4b0b      	ldr	r3, [pc, #44]	; (8003594 <prvInitialiseTaskLists+0x78>)
 8003568:	4a05      	ldr	r2, [pc, #20]	; (8003580 <prvInitialiseTaskLists+0x64>)
 800356a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800356c:	4b0a      	ldr	r3, [pc, #40]	; (8003598 <prvInitialiseTaskLists+0x7c>)
 800356e:	4a05      	ldr	r2, [pc, #20]	; (8003584 <prvInitialiseTaskLists+0x68>)
 8003570:	601a      	str	r2, [r3, #0]
}
 8003572:	bf00      	nop
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	20000458 	.word	0x20000458
 8003580:	200008b8 	.word	0x200008b8
 8003584:	200008cc 	.word	0x200008cc
 8003588:	200008e8 	.word	0x200008e8
 800358c:	200008fc 	.word	0x200008fc
 8003590:	20000914 	.word	0x20000914
 8003594:	200008e0 	.word	0x200008e0
 8003598:	200008e4 	.word	0x200008e4

0800359c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80035a2:	e019      	b.n	80035d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80035a4:	f000 fda0 	bl	80040e8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80035a8:	4b0f      	ldr	r3, [pc, #60]	; (80035e8 <prvCheckTasksWaitingTermination+0x4c>)
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	3304      	adds	r3, #4
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7fe fd6b 	bl	8002090 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80035ba:	4b0c      	ldr	r3, [pc, #48]	; (80035ec <prvCheckTasksWaitingTermination+0x50>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	3b01      	subs	r3, #1
 80035c0:	4a0a      	ldr	r2, [pc, #40]	; (80035ec <prvCheckTasksWaitingTermination+0x50>)
 80035c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80035c4:	4b0a      	ldr	r3, [pc, #40]	; (80035f0 <prvCheckTasksWaitingTermination+0x54>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	3b01      	subs	r3, #1
 80035ca:	4a09      	ldr	r2, [pc, #36]	; (80035f0 <prvCheckTasksWaitingTermination+0x54>)
 80035cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80035ce:	f000 fdb9 	bl	8004144 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f80e 	bl	80035f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80035d8:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <prvCheckTasksWaitingTermination+0x54>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1e1      	bne.n	80035a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80035e0:	bf00      	nop
 80035e2:	3708      	adds	r7, #8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	200008fc 	.word	0x200008fc
 80035ec:	20000928 	.word	0x20000928
 80035f0:	20000910 	.word	0x20000910

080035f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003602:	2b00      	cmp	r3, #0
 8003604:	d108      	bne.n	8003618 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360a:	4618      	mov	r0, r3
 800360c:	f000 ff24 	bl	8004458 <vPortFree>
				vPortFree( pxTCB );
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 ff21 	bl	8004458 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003616:	e017      	b.n	8003648 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800361e:	2b01      	cmp	r3, #1
 8003620:	d103      	bne.n	800362a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 ff18 	bl	8004458 <vPortFree>
	}
 8003628:	e00e      	b.n	8003648 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003630:	2b02      	cmp	r3, #2
 8003632:	d009      	beq.n	8003648 <prvDeleteTCB+0x54>
 8003634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003638:	f383 8811 	msr	BASEPRI, r3
 800363c:	f3bf 8f6f 	isb	sy
 8003640:	f3bf 8f4f 	dsb	sy
 8003644:	60fb      	str	r3, [r7, #12]
 8003646:	e7fe      	b.n	8003646 <prvDeleteTCB+0x52>
	}
 8003648:	bf00      	nop
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003656:	4b0e      	ldr	r3, [pc, #56]	; (8003690 <prvResetNextTaskUnblockTime+0x40>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d101      	bne.n	8003664 <prvResetNextTaskUnblockTime+0x14>
 8003660:	2301      	movs	r3, #1
 8003662:	e000      	b.n	8003666 <prvResetNextTaskUnblockTime+0x16>
 8003664:	2300      	movs	r3, #0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d004      	beq.n	8003674 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800366a:	4b0a      	ldr	r3, [pc, #40]	; (8003694 <prvResetNextTaskUnblockTime+0x44>)
 800366c:	f04f 32ff 	mov.w	r2, #4294967295
 8003670:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003672:	e008      	b.n	8003686 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003674:	4b06      	ldr	r3, [pc, #24]	; (8003690 <prvResetNextTaskUnblockTime+0x40>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	4a04      	ldr	r2, [pc, #16]	; (8003694 <prvResetNextTaskUnblockTime+0x44>)
 8003684:	6013      	str	r3, [r2, #0]
}
 8003686:	bf00      	nop
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	bc80      	pop	{r7}
 800368e:	4770      	bx	lr
 8003690:	200008e0 	.word	0x200008e0
 8003694:	20000948 	.word	0x20000948

08003698 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800369e:	4b0b      	ldr	r3, [pc, #44]	; (80036cc <xTaskGetSchedulerState+0x34>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d102      	bne.n	80036ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80036a6:	2301      	movs	r3, #1
 80036a8:	607b      	str	r3, [r7, #4]
 80036aa:	e008      	b.n	80036be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036ac:	4b08      	ldr	r3, [pc, #32]	; (80036d0 <xTaskGetSchedulerState+0x38>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d102      	bne.n	80036ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80036b4:	2302      	movs	r3, #2
 80036b6:	607b      	str	r3, [r7, #4]
 80036b8:	e001      	b.n	80036be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80036ba:	2300      	movs	r3, #0
 80036bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80036be:	687b      	ldr	r3, [r7, #4]
	}
 80036c0:	4618      	mov	r0, r3
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bc80      	pop	{r7}
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	20000934 	.word	0x20000934
 80036d0:	20000950 	.word	0x20000950

080036d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80036e0:	2300      	movs	r3, #0
 80036e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d054      	beq.n	8003794 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80036ea:	4b2d      	ldr	r3, [pc, #180]	; (80037a0 <xTaskPriorityDisinherit+0xcc>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d009      	beq.n	8003708 <xTaskPriorityDisinherit+0x34>
 80036f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f8:	f383 8811 	msr	BASEPRI, r3
 80036fc:	f3bf 8f6f 	isb	sy
 8003700:	f3bf 8f4f 	dsb	sy
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	e7fe      	b.n	8003706 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800370c:	2b00      	cmp	r3, #0
 800370e:	d109      	bne.n	8003724 <xTaskPriorityDisinherit+0x50>
 8003710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003714:	f383 8811 	msr	BASEPRI, r3
 8003718:	f3bf 8f6f 	isb	sy
 800371c:	f3bf 8f4f 	dsb	sy
 8003720:	60bb      	str	r3, [r7, #8]
 8003722:	e7fe      	b.n	8003722 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003728:	1e5a      	subs	r2, r3, #1
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003736:	429a      	cmp	r2, r3
 8003738:	d02c      	beq.n	8003794 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800373e:	2b00      	cmp	r3, #0
 8003740:	d128      	bne.n	8003794 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	3304      	adds	r3, #4
 8003746:	4618      	mov	r0, r3
 8003748:	f7fe fca2 	bl	8002090 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003758:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003764:	4b0f      	ldr	r3, [pc, #60]	; (80037a4 <xTaskPriorityDisinherit+0xd0>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	429a      	cmp	r2, r3
 800376a:	d903      	bls.n	8003774 <xTaskPriorityDisinherit+0xa0>
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003770:	4a0c      	ldr	r2, [pc, #48]	; (80037a4 <xTaskPriorityDisinherit+0xd0>)
 8003772:	6013      	str	r3, [r2, #0]
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003778:	4613      	mov	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4413      	add	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4a09      	ldr	r2, [pc, #36]	; (80037a8 <xTaskPriorityDisinherit+0xd4>)
 8003782:	441a      	add	r2, r3
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	3304      	adds	r3, #4
 8003788:	4619      	mov	r1, r3
 800378a:	4610      	mov	r0, r2
 800378c:	f7fe fc25 	bl	8001fda <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003790:	2301      	movs	r3, #1
 8003792:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003794:	697b      	ldr	r3, [r7, #20]
	}
 8003796:	4618      	mov	r0, r3
 8003798:	3718      	adds	r7, #24
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	20000454 	.word	0x20000454
 80037a4:	20000930 	.word	0x20000930
 80037a8:	20000458 	.word	0x20000458

080037ac <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80037b6:	4b21      	ldr	r3, [pc, #132]	; (800383c <prvAddCurrentTaskToDelayedList+0x90>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80037bc:	4b20      	ldr	r3, [pc, #128]	; (8003840 <prvAddCurrentTaskToDelayedList+0x94>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	3304      	adds	r3, #4
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7fe fc64 	bl	8002090 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ce:	d10a      	bne.n	80037e6 <prvAddCurrentTaskToDelayedList+0x3a>
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d007      	beq.n	80037e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037d6:	4b1a      	ldr	r3, [pc, #104]	; (8003840 <prvAddCurrentTaskToDelayedList+0x94>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	3304      	adds	r3, #4
 80037dc:	4619      	mov	r1, r3
 80037de:	4819      	ldr	r0, [pc, #100]	; (8003844 <prvAddCurrentTaskToDelayedList+0x98>)
 80037e0:	f7fe fbfb 	bl	8001fda <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80037e4:	e026      	b.n	8003834 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4413      	add	r3, r2
 80037ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80037ee:	4b14      	ldr	r3, [pc, #80]	; (8003840 <prvAddCurrentTaskToDelayedList+0x94>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80037f6:	68ba      	ldr	r2, [r7, #8]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d209      	bcs.n	8003812 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037fe:	4b12      	ldr	r3, [pc, #72]	; (8003848 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	4b0f      	ldr	r3, [pc, #60]	; (8003840 <prvAddCurrentTaskToDelayedList+0x94>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	3304      	adds	r3, #4
 8003808:	4619      	mov	r1, r3
 800380a:	4610      	mov	r0, r2
 800380c:	f7fe fc08 	bl	8002020 <vListInsert>
}
 8003810:	e010      	b.n	8003834 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003812:	4b0e      	ldr	r3, [pc, #56]	; (800384c <prvAddCurrentTaskToDelayedList+0xa0>)
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	4b0a      	ldr	r3, [pc, #40]	; (8003840 <prvAddCurrentTaskToDelayedList+0x94>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	3304      	adds	r3, #4
 800381c:	4619      	mov	r1, r3
 800381e:	4610      	mov	r0, r2
 8003820:	f7fe fbfe 	bl	8002020 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003824:	4b0a      	ldr	r3, [pc, #40]	; (8003850 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	429a      	cmp	r2, r3
 800382c:	d202      	bcs.n	8003834 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800382e:	4a08      	ldr	r2, [pc, #32]	; (8003850 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	6013      	str	r3, [r2, #0]
}
 8003834:	bf00      	nop
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	2000092c 	.word	0x2000092c
 8003840:	20000454 	.word	0x20000454
 8003844:	20000914 	.word	0x20000914
 8003848:	200008e4 	.word	0x200008e4
 800384c:	200008e0 	.word	0x200008e0
 8003850:	20000948 	.word	0x20000948

08003854 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b08a      	sub	sp, #40	; 0x28
 8003858:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800385a:	2300      	movs	r3, #0
 800385c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800385e:	f000 fb15 	bl	8003e8c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003862:	4b1c      	ldr	r3, [pc, #112]	; (80038d4 <xTimerCreateTimerTask+0x80>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d021      	beq.n	80038ae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800386a:	2300      	movs	r3, #0
 800386c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800386e:	2300      	movs	r3, #0
 8003870:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003872:	1d3a      	adds	r2, r7, #4
 8003874:	f107 0108 	add.w	r1, r7, #8
 8003878:	f107 030c 	add.w	r3, r7, #12
 800387c:	4618      	mov	r0, r3
 800387e:	f7fe fb69 	bl	8001f54 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003882:	6879      	ldr	r1, [r7, #4]
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	9202      	str	r2, [sp, #8]
 800388a:	9301      	str	r3, [sp, #4]
 800388c:	2302      	movs	r3, #2
 800388e:	9300      	str	r3, [sp, #0]
 8003890:	2300      	movs	r3, #0
 8003892:	460a      	mov	r2, r1
 8003894:	4910      	ldr	r1, [pc, #64]	; (80038d8 <xTimerCreateTimerTask+0x84>)
 8003896:	4811      	ldr	r0, [pc, #68]	; (80038dc <xTimerCreateTimerTask+0x88>)
 8003898:	f7ff f8f8 	bl	8002a8c <xTaskCreateStatic>
 800389c:	4602      	mov	r2, r0
 800389e:	4b10      	ldr	r3, [pc, #64]	; (80038e0 <xTimerCreateTimerTask+0x8c>)
 80038a0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80038a2:	4b0f      	ldr	r3, [pc, #60]	; (80038e0 <xTimerCreateTimerTask+0x8c>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80038aa:	2301      	movs	r3, #1
 80038ac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d109      	bne.n	80038c8 <xTimerCreateTimerTask+0x74>
 80038b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b8:	f383 8811 	msr	BASEPRI, r3
 80038bc:	f3bf 8f6f 	isb	sy
 80038c0:	f3bf 8f4f 	dsb	sy
 80038c4:	613b      	str	r3, [r7, #16]
 80038c6:	e7fe      	b.n	80038c6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80038c8:	697b      	ldr	r3, [r7, #20]
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3718      	adds	r7, #24
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	20000984 	.word	0x20000984
 80038d8:	08005124 	.word	0x08005124
 80038dc:	08003aa1 	.word	0x08003aa1
 80038e0:	20000988 	.word	0x20000988

080038e4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b088      	sub	sp, #32
 80038e8:	af02      	add	r7, sp, #8
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
 80038f0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 80038f2:	2030      	movs	r0, #48	; 0x30
 80038f4:	f000 fcee 	bl	80042d4 <pvPortMalloc>
 80038f8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00d      	beq.n	800391c <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	9301      	str	r3, [sp, #4]
 8003904:	6a3b      	ldr	r3, [r7, #32]
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	68b9      	ldr	r1, [r7, #8]
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f000 f809 	bl	8003926 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 800391c:	697b      	ldr	r3, [r7, #20]
	}
 800391e:	4618      	mov	r0, r3
 8003920:	3718      	adds	r7, #24
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b086      	sub	sp, #24
 800392a:	af00      	add	r7, sp, #0
 800392c:	60f8      	str	r0, [r7, #12]
 800392e:	60b9      	str	r1, [r7, #8]
 8003930:	607a      	str	r2, [r7, #4]
 8003932:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d109      	bne.n	800394e <prvInitialiseNewTimer+0x28>
 800393a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393e:	f383 8811 	msr	BASEPRI, r3
 8003942:	f3bf 8f6f 	isb	sy
 8003946:	f3bf 8f4f 	dsb	sy
 800394a:	617b      	str	r3, [r7, #20]
 800394c:	e7fe      	b.n	800394c <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	2b00      	cmp	r3, #0
 8003952:	d015      	beq.n	8003980 <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8003954:	f000 fa9a 	bl	8003e8c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8003958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800395e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8003964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800396a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8003970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003972:	6a3a      	ldr	r2, [r7, #32]
 8003974:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	3304      	adds	r3, #4
 800397a:	4618      	mov	r0, r3
 800397c:	f7fe fb21 	bl	8001fc2 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8003980:	bf00      	nop
 8003982:	3718      	adds	r7, #24
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b08a      	sub	sp, #40	; 0x28
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
 8003994:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003996:	2300      	movs	r3, #0
 8003998:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d109      	bne.n	80039b4 <xTimerGenericCommand+0x2c>
 80039a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a4:	f383 8811 	msr	BASEPRI, r3
 80039a8:	f3bf 8f6f 	isb	sy
 80039ac:	f3bf 8f4f 	dsb	sy
 80039b0:	623b      	str	r3, [r7, #32]
 80039b2:	e7fe      	b.n	80039b2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80039b4:	4b19      	ldr	r3, [pc, #100]	; (8003a1c <xTimerGenericCommand+0x94>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d02a      	beq.n	8003a12 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	2b05      	cmp	r3, #5
 80039cc:	dc18      	bgt.n	8003a00 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80039ce:	f7ff fe63 	bl	8003698 <xTaskGetSchedulerState>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d109      	bne.n	80039ec <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80039d8:	4b10      	ldr	r3, [pc, #64]	; (8003a1c <xTimerGenericCommand+0x94>)
 80039da:	6818      	ldr	r0, [r3, #0]
 80039dc:	f107 0110 	add.w	r1, r7, #16
 80039e0:	2300      	movs	r3, #0
 80039e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039e4:	f7fe fc7c 	bl	80022e0 <xQueueGenericSend>
 80039e8:	6278      	str	r0, [r7, #36]	; 0x24
 80039ea:	e012      	b.n	8003a12 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80039ec:	4b0b      	ldr	r3, [pc, #44]	; (8003a1c <xTimerGenericCommand+0x94>)
 80039ee:	6818      	ldr	r0, [r3, #0]
 80039f0:	f107 0110 	add.w	r1, r7, #16
 80039f4:	2300      	movs	r3, #0
 80039f6:	2200      	movs	r2, #0
 80039f8:	f7fe fc72 	bl	80022e0 <xQueueGenericSend>
 80039fc:	6278      	str	r0, [r7, #36]	; 0x24
 80039fe:	e008      	b.n	8003a12 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003a00:	4b06      	ldr	r3, [pc, #24]	; (8003a1c <xTimerGenericCommand+0x94>)
 8003a02:	6818      	ldr	r0, [r3, #0]
 8003a04:	f107 0110 	add.w	r1, r7, #16
 8003a08:	2300      	movs	r3, #0
 8003a0a:	683a      	ldr	r2, [r7, #0]
 8003a0c:	f7fe fd62 	bl	80024d4 <xQueueGenericSendFromISR>
 8003a10:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3728      	adds	r7, #40	; 0x28
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	20000984 	.word	0x20000984

08003a20 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t tick_now )
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b088      	sub	sp, #32
 8003a24:	af02      	add	r7, sp, #8
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a2a:	4b1c      	ldr	r3, [pc, #112]	; (8003a9c <prvProcessExpiredTimer+0x7c>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	3304      	adds	r3, #4
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7fe fb29 	bl	8002090 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d121      	bne.n	8003a8a <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), tick_now, xNextExpireTime ) != pdFALSE )
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	699a      	ldr	r2, [r3, #24]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	18d1      	adds	r1, r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	6978      	ldr	r0, [r7, #20]
 8003a54:	f000 f8c8 	bl	8003be8 <prvInsertTimerInActiveList>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d015      	beq.n	8003a8a <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003a5e:	2300      	movs	r3, #0
 8003a60:	9300      	str	r3, [sp, #0]
 8003a62:	2300      	movs	r3, #0
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	2100      	movs	r1, #0
 8003a68:	6978      	ldr	r0, [r7, #20]
 8003a6a:	f7ff ff8d 	bl	8003988 <xTimerGenericCommand>
 8003a6e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d109      	bne.n	8003a8a <prvProcessExpiredTimer+0x6a>
 8003a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7a:	f383 8811 	msr	BASEPRI, r3
 8003a7e:	f3bf 8f6f 	isb	sy
 8003a82:	f3bf 8f4f 	dsb	sy
 8003a86:	60fb      	str	r3, [r7, #12]
 8003a88:	e7fe      	b.n	8003a88 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8e:	6978      	ldr	r0, [r7, #20]
 8003a90:	4798      	blx	r3
}
 8003a92:	bf00      	nop
 8003a94:	3718      	adds	r7, #24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	2000097c 	.word	0x2000097c

08003aa0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003aa8:	f107 0308 	add.w	r3, r7, #8
 8003aac:	4618      	mov	r0, r3
 8003aae:	f000 f857 	bl	8003b60 <prvGetNextExpireTime>
 8003ab2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f000 f803 	bl	8003ac4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003abe:	f000 f8d5 	bl	8003c6c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ac2:	e7f1      	b.n	8003aa8 <prvTimerTask+0x8>

08003ac4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
TickType_t tick_now;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003ace:	f7ff fa09 	bl	8002ee4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		tick_now = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ad2:	f107 0308 	add.w	r3, r7, #8
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 f866 	bl	8003ba8 <prvSampleTimeNow>
 8003adc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d130      	bne.n	8003b46 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= tick_now ) )
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10a      	bne.n	8003b00 <prvProcessTimerOrBlockTask+0x3c>
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d806      	bhi.n	8003b00 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003af2:	f7ff fa05 	bl	8002f00 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, tick_now );
 8003af6:	68f9      	ldr	r1, [r7, #12]
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f7ff ff91 	bl	8003a20 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003afe:	e024      	b.n	8003b4a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d008      	beq.n	8003b18 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003b06:	4b13      	ldr	r3, [pc, #76]	; (8003b54 <prvProcessTimerOrBlockTask+0x90>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	bf0c      	ite	eq
 8003b10:	2301      	moveq	r3, #1
 8003b12:	2300      	movne	r3, #0
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - tick_now ), xListWasEmpty );
 8003b18:	4b0f      	ldr	r3, [pc, #60]	; (8003b58 <prvProcessTimerOrBlockTask+0x94>)
 8003b1a:	6818      	ldr	r0, [r3, #0]
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	4619      	mov	r1, r3
 8003b26:	f7fe ff7d 	bl	8002a24 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003b2a:	f7ff f9e9 	bl	8002f00 <xTaskResumeAll>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d10a      	bne.n	8003b4a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003b34:	4b09      	ldr	r3, [pc, #36]	; (8003b5c <prvProcessTimerOrBlockTask+0x98>)
 8003b36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b3a:	601a      	str	r2, [r3, #0]
 8003b3c:	f3bf 8f4f 	dsb	sy
 8003b40:	f3bf 8f6f 	isb	sy
}
 8003b44:	e001      	b.n	8003b4a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003b46:	f7ff f9db 	bl	8002f00 <xTaskResumeAll>
}
 8003b4a:	bf00      	nop
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	20000980 	.word	0x20000980
 8003b58:	20000984 	.word	0x20000984
 8003b5c:	e000ed04 	.word	0xe000ed04

08003b60 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003b68:	4b0e      	ldr	r3, [pc, #56]	; (8003ba4 <prvGetNextExpireTime+0x44>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	bf0c      	ite	eq
 8003b72:	2301      	moveq	r3, #1
 8003b74:	2300      	movne	r3, #0
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	461a      	mov	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d105      	bne.n	8003b92 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003b86:	4b07      	ldr	r3, [pc, #28]	; (8003ba4 <prvGetNextExpireTime+0x44>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	e001      	b.n	8003b96 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003b92:	2300      	movs	r3, #0
 8003b94:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003b96:	68fb      	ldr	r3, [r7, #12]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3714      	adds	r7, #20
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bc80      	pop	{r7}
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	2000097c 	.word	0x2000097c

08003ba8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
TickType_t tick_now;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	tick_now = xTaskGetTickCount();
 8003bb0:	f7ff fa42 	bl	8003038 <xTaskGetTickCount>
 8003bb4:	60f8      	str	r0, [r7, #12]

	if( tick_now < xLastTime )
 8003bb6:	4b0b      	ldr	r3, [pc, #44]	; (8003be4 <prvSampleTimeNow+0x3c>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d205      	bcs.n	8003bcc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003bc0:	f000 f904 	bl	8003dcc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	601a      	str	r2, [r3, #0]
 8003bca:	e002      	b.n	8003bd2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = tick_now;
 8003bd2:	4a04      	ldr	r2, [pc, #16]	; (8003be4 <prvSampleTimeNow+0x3c>)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6013      	str	r3, [r2, #0]

	return tick_now;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	2000098c 	.word	0x2000098c

08003be8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t tick_now, const TickType_t xCommandTime )
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
 8003bf4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= tick_now )
 8003c06:	68ba      	ldr	r2, [r7, #8]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d812      	bhi.n	8003c34 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( tick_now - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	1ad2      	subs	r2, r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d302      	bcc.n	8003c22 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	617b      	str	r3, [r7, #20]
 8003c20:	e01b      	b.n	8003c5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003c22:	4b10      	ldr	r3, [pc, #64]	; (8003c64 <prvInsertTimerInActiveList+0x7c>)
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	3304      	adds	r3, #4
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	4610      	mov	r0, r2
 8003c2e:	f7fe f9f7 	bl	8002020 <vListInsert>
 8003c32:	e012      	b.n	8003c5a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( tick_now < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d206      	bcs.n	8003c4a <prvInsertTimerInActiveList+0x62>
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d302      	bcc.n	8003c4a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003c44:	2301      	movs	r3, #1
 8003c46:	617b      	str	r3, [r7, #20]
 8003c48:	e007      	b.n	8003c5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003c4a:	4b07      	ldr	r3, [pc, #28]	; (8003c68 <prvInsertTimerInActiveList+0x80>)
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	3304      	adds	r3, #4
 8003c52:	4619      	mov	r1, r3
 8003c54:	4610      	mov	r0, r2
 8003c56:	f7fe f9e3 	bl	8002020 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003c5a:	697b      	ldr	r3, [r7, #20]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3718      	adds	r7, #24
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	20000980 	.word	0x20000980
 8003c68:	2000097c 	.word	0x2000097c

08003c6c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b08e      	sub	sp, #56	; 0x38
 8003c70:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t tick_now;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003c72:	e099      	b.n	8003da8 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	da17      	bge.n	8003caa <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003c7a:	1d3b      	adds	r3, r7, #4
 8003c7c:	3304      	adds	r3, #4
 8003c7e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d109      	bne.n	8003c9a <prvProcessReceivedCommands+0x2e>
 8003c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c8a:	f383 8811 	msr	BASEPRI, r3
 8003c8e:	f3bf 8f6f 	isb	sy
 8003c92:	f3bf 8f4f 	dsb	sy
 8003c96:	61fb      	str	r3, [r7, #28]
 8003c98:	e7fe      	b.n	8003c98 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ca0:	6850      	ldr	r0, [r2, #4]
 8003ca2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ca4:	6892      	ldr	r2, [r2, #8]
 8003ca6:	4611      	mov	r1, r2
 8003ca8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	db7a      	blt.n	8003da6 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d004      	beq.n	8003cc6 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbe:	3304      	adds	r3, #4
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7fe f9e5 	bl	8002090 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the tick_now value was set). */
			tick_now = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003cc6:	463b      	mov	r3, r7
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7ff ff6d 	bl	8003ba8 <prvSampleTimeNow>
 8003cce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b09      	cmp	r3, #9
 8003cd4:	d868      	bhi.n	8003da8 <prvProcessReceivedCommands+0x13c>
 8003cd6:	a201      	add	r2, pc, #4	; (adr r2, 8003cdc <prvProcessReceivedCommands+0x70>)
 8003cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cdc:	08003d05 	.word	0x08003d05
 8003ce0:	08003d05 	.word	0x08003d05
 8003ce4:	08003d05 	.word	0x08003d05
 8003ce8:	08003da9 	.word	0x08003da9
 8003cec:	08003d5f 	.word	0x08003d5f
 8003cf0:	08003d95 	.word	0x08003d95
 8003cf4:	08003d05 	.word	0x08003d05
 8003cf8:	08003d05 	.word	0x08003d05
 8003cfc:	08003da9 	.word	0x08003da9
 8003d00:	08003d5f 	.word	0x08003d5f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, tick_now, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003d04:	68ba      	ldr	r2, [r7, #8]
 8003d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	18d1      	adds	r1, r2, r3
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d12:	f7ff ff69 	bl	8003be8 <prvInsertTimerInActiveList>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d045      	beq.n	8003da8 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d22:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d26:	69db      	ldr	r3, [r3, #28]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d13d      	bne.n	8003da8 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003d2c:	68ba      	ldr	r2, [r7, #8]
 8003d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	441a      	add	r2, r3
 8003d34:	2300      	movs	r3, #0
 8003d36:	9300      	str	r3, [sp, #0]
 8003d38:	2300      	movs	r3, #0
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d3e:	f7ff fe23 	bl	8003988 <xTimerGenericCommand>
 8003d42:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003d44:	6a3b      	ldr	r3, [r7, #32]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d12e      	bne.n	8003da8 <prvProcessReceivedCommands+0x13c>
 8003d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4e:	f383 8811 	msr	BASEPRI, r3
 8003d52:	f3bf 8f6f 	isb	sy
 8003d56:	f3bf 8f4f 	dsb	sy
 8003d5a:	61bb      	str	r3, [r7, #24]
 8003d5c:	e7fe      	b.n	8003d5c <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d62:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d109      	bne.n	8003d80 <prvProcessReceivedCommands+0x114>
 8003d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d70:	f383 8811 	msr	BASEPRI, r3
 8003d74:	f3bf 8f6f 	isb	sy
 8003d78:	f3bf 8f4f 	dsb	sy
 8003d7c:	617b      	str	r3, [r7, #20]
 8003d7e:	e7fe      	b.n	8003d7e <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( tick_now + pxTimer->xTimerPeriodInTicks ), tick_now, tick_now );
 8003d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d82:	699a      	ldr	r2, [r3, #24]
 8003d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d86:	18d1      	adds	r1, r2, r3
 8003d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d8e:	f7ff ff2b 	bl	8003be8 <prvInsertTimerInActiveList>
					break;
 8003d92:	e009      	b.n	8003da8 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d96:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d104      	bne.n	8003da8 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8003d9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003da0:	f000 fb5a 	bl	8004458 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003da4:	e000      	b.n	8003da8 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003da6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003da8:	4b07      	ldr	r3, [pc, #28]	; (8003dc8 <prvProcessReceivedCommands+0x15c>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	1d39      	adds	r1, r7, #4
 8003dae:	2200      	movs	r2, #0
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7fe fc23 	bl	80025fc <xQueueReceive>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f47f af5b 	bne.w	8003c74 <prvProcessReceivedCommands+0x8>
	}
}
 8003dbe:	bf00      	nop
 8003dc0:	3730      	adds	r7, #48	; 0x30
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	20000984 	.word	0x20000984

08003dcc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b088      	sub	sp, #32
 8003dd0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003dd2:	e044      	b.n	8003e5e <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003dd4:	4b2b      	ldr	r3, [pc, #172]	; (8003e84 <prvSwitchTimerLists+0xb8>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003dde:	4b29      	ldr	r3, [pc, #164]	; (8003e84 <prvSwitchTimerLists+0xb8>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	3304      	adds	r3, #4
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7fe f94f 	bl	8002090 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d12d      	bne.n	8003e5e <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	4413      	add	r3, r2
 8003e0a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003e0c:	68ba      	ldr	r2, [r7, #8]
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d90e      	bls.n	8003e32 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	68ba      	ldr	r2, [r7, #8]
 8003e18:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003e20:	4b18      	ldr	r3, [pc, #96]	; (8003e84 <prvSwitchTimerLists+0xb8>)
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	3304      	adds	r3, #4
 8003e28:	4619      	mov	r1, r3
 8003e2a:	4610      	mov	r0, r2
 8003e2c:	f7fe f8f8 	bl	8002020 <vListInsert>
 8003e30:	e015      	b.n	8003e5e <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003e32:	2300      	movs	r3, #0
 8003e34:	9300      	str	r3, [sp, #0]
 8003e36:	2300      	movs	r3, #0
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f7ff fda3 	bl	8003988 <xTimerGenericCommand>
 8003e42:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d109      	bne.n	8003e5e <prvSwitchTimerLists+0x92>
 8003e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4e:	f383 8811 	msr	BASEPRI, r3
 8003e52:	f3bf 8f6f 	isb	sy
 8003e56:	f3bf 8f4f 	dsb	sy
 8003e5a:	603b      	str	r3, [r7, #0]
 8003e5c:	e7fe      	b.n	8003e5c <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003e5e:	4b09      	ldr	r3, [pc, #36]	; (8003e84 <prvSwitchTimerLists+0xb8>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1b5      	bne.n	8003dd4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003e68:	4b06      	ldr	r3, [pc, #24]	; (8003e84 <prvSwitchTimerLists+0xb8>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003e6e:	4b06      	ldr	r3, [pc, #24]	; (8003e88 <prvSwitchTimerLists+0xbc>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a04      	ldr	r2, [pc, #16]	; (8003e84 <prvSwitchTimerLists+0xb8>)
 8003e74:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003e76:	4a04      	ldr	r2, [pc, #16]	; (8003e88 <prvSwitchTimerLists+0xbc>)
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	6013      	str	r3, [r2, #0]
}
 8003e7c:	bf00      	nop
 8003e7e:	3718      	adds	r7, #24
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	2000097c 	.word	0x2000097c
 8003e88:	20000980 	.word	0x20000980

08003e8c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003e92:	f000 f929 	bl	80040e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003e96:	4b15      	ldr	r3, [pc, #84]	; (8003eec <prvCheckForValidListAndQueue+0x60>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d120      	bne.n	8003ee0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003e9e:	4814      	ldr	r0, [pc, #80]	; (8003ef0 <prvCheckForValidListAndQueue+0x64>)
 8003ea0:	f7fe f870 	bl	8001f84 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003ea4:	4813      	ldr	r0, [pc, #76]	; (8003ef4 <prvCheckForValidListAndQueue+0x68>)
 8003ea6:	f7fe f86d 	bl	8001f84 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003eaa:	4b13      	ldr	r3, [pc, #76]	; (8003ef8 <prvCheckForValidListAndQueue+0x6c>)
 8003eac:	4a10      	ldr	r2, [pc, #64]	; (8003ef0 <prvCheckForValidListAndQueue+0x64>)
 8003eae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003eb0:	4b12      	ldr	r3, [pc, #72]	; (8003efc <prvCheckForValidListAndQueue+0x70>)
 8003eb2:	4a10      	ldr	r2, [pc, #64]	; (8003ef4 <prvCheckForValidListAndQueue+0x68>)
 8003eb4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	9300      	str	r3, [sp, #0]
 8003eba:	4b11      	ldr	r3, [pc, #68]	; (8003f00 <prvCheckForValidListAndQueue+0x74>)
 8003ebc:	4a11      	ldr	r2, [pc, #68]	; (8003f04 <prvCheckForValidListAndQueue+0x78>)
 8003ebe:	2110      	movs	r1, #16
 8003ec0:	200a      	movs	r0, #10
 8003ec2:	f7fe f977 	bl	80021b4 <xQueueGenericCreateStatic>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	4b08      	ldr	r3, [pc, #32]	; (8003eec <prvCheckForValidListAndQueue+0x60>)
 8003eca:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003ecc:	4b07      	ldr	r3, [pc, #28]	; (8003eec <prvCheckForValidListAndQueue+0x60>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d005      	beq.n	8003ee0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003ed4:	4b05      	ldr	r3, [pc, #20]	; (8003eec <prvCheckForValidListAndQueue+0x60>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	490b      	ldr	r1, [pc, #44]	; (8003f08 <prvCheckForValidListAndQueue+0x7c>)
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fe fd7a 	bl	80029d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003ee0:	f000 f930 	bl	8004144 <vPortExitCritical>
}
 8003ee4:	bf00      	nop
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	20000984 	.word	0x20000984
 8003ef0:	20000954 	.word	0x20000954
 8003ef4:	20000968 	.word	0x20000968
 8003ef8:	2000097c 	.word	0x2000097c
 8003efc:	20000980 	.word	0x20000980
 8003f00:	20000a30 	.word	0x20000a30
 8003f04:	20000990 	.word	0x20000990
 8003f08:	0800512c 	.word	0x0800512c

08003f0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	3b04      	subs	r3, #4
 8003f1c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	3b04      	subs	r3, #4
 8003f2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	f023 0201 	bic.w	r2, r3, #1
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	3b04      	subs	r3, #4
 8003f3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003f3c:	4a08      	ldr	r2, [pc, #32]	; (8003f60 <pxPortInitialiseStack+0x54>)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	3b14      	subs	r3, #20
 8003f46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	3b20      	subs	r3, #32
 8003f52:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003f54:	68fb      	ldr	r3, [r7, #12]
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bc80      	pop	{r7}
 8003f5e:	4770      	bx	lr
 8003f60:	08003f65 	.word	0x08003f65

08003f64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003f6e:	4b10      	ldr	r3, [pc, #64]	; (8003fb0 <prvTaskExitError+0x4c>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f76:	d009      	beq.n	8003f8c <prvTaskExitError+0x28>
 8003f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7c:	f383 8811 	msr	BASEPRI, r3
 8003f80:	f3bf 8f6f 	isb	sy
 8003f84:	f3bf 8f4f 	dsb	sy
 8003f88:	60fb      	str	r3, [r7, #12]
 8003f8a:	e7fe      	b.n	8003f8a <prvTaskExitError+0x26>
 8003f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f90:	f383 8811 	msr	BASEPRI, r3
 8003f94:	f3bf 8f6f 	isb	sy
 8003f98:	f3bf 8f4f 	dsb	sy
 8003f9c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003f9e:	bf00      	nop
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d0fc      	beq.n	8003fa0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003fa6:	bf00      	nop
 8003fa8:	3714      	adds	r7, #20
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bc80      	pop	{r7}
 8003fae:	4770      	bx	lr
 8003fb0:	2000000c 	.word	0x2000000c
	...

08003fc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003fc0:	4b07      	ldr	r3, [pc, #28]	; (8003fe0 <pxCurrentTCBConst2>)
 8003fc2:	6819      	ldr	r1, [r3, #0]
 8003fc4:	6808      	ldr	r0, [r1, #0]
 8003fc6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003fca:	f380 8809 	msr	PSP, r0
 8003fce:	f3bf 8f6f 	isb	sy
 8003fd2:	f04f 0000 	mov.w	r0, #0
 8003fd6:	f380 8811 	msr	BASEPRI, r0
 8003fda:	f04e 0e0d 	orr.w	lr, lr, #13
 8003fde:	4770      	bx	lr

08003fe0 <pxCurrentTCBConst2>:
 8003fe0:	20000454 	.word	0x20000454
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003fe4:	bf00      	nop
 8003fe6:	bf00      	nop

08003fe8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003fe8:	4806      	ldr	r0, [pc, #24]	; (8004004 <prvPortStartFirstTask+0x1c>)
 8003fea:	6800      	ldr	r0, [r0, #0]
 8003fec:	6800      	ldr	r0, [r0, #0]
 8003fee:	f380 8808 	msr	MSP, r0
 8003ff2:	b662      	cpsie	i
 8003ff4:	b661      	cpsie	f
 8003ff6:	f3bf 8f4f 	dsb	sy
 8003ffa:	f3bf 8f6f 	isb	sy
 8003ffe:	df00      	svc	0
 8004000:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004002:	bf00      	nop
 8004004:	e000ed08 	.word	0xe000ed08

08004008 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800400e:	4b31      	ldr	r3, [pc, #196]	; (80040d4 <xPortStartScheduler+0xcc>)
 8004010:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	b2db      	uxtb	r3, r3
 8004018:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	22ff      	movs	r2, #255	; 0xff
 800401e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	b2db      	uxtb	r3, r3
 8004026:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004028:	78fb      	ldrb	r3, [r7, #3]
 800402a:	b2db      	uxtb	r3, r3
 800402c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004030:	b2da      	uxtb	r2, r3
 8004032:	4b29      	ldr	r3, [pc, #164]	; (80040d8 <xPortStartScheduler+0xd0>)
 8004034:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004036:	4b29      	ldr	r3, [pc, #164]	; (80040dc <xPortStartScheduler+0xd4>)
 8004038:	2207      	movs	r2, #7
 800403a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800403c:	e009      	b.n	8004052 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800403e:	4b27      	ldr	r3, [pc, #156]	; (80040dc <xPortStartScheduler+0xd4>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	3b01      	subs	r3, #1
 8004044:	4a25      	ldr	r2, [pc, #148]	; (80040dc <xPortStartScheduler+0xd4>)
 8004046:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004048:	78fb      	ldrb	r3, [r7, #3]
 800404a:	b2db      	uxtb	r3, r3
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	b2db      	uxtb	r3, r3
 8004050:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004052:	78fb      	ldrb	r3, [r7, #3]
 8004054:	b2db      	uxtb	r3, r3
 8004056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800405a:	2b80      	cmp	r3, #128	; 0x80
 800405c:	d0ef      	beq.n	800403e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800405e:	4b1f      	ldr	r3, [pc, #124]	; (80040dc <xPortStartScheduler+0xd4>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f1c3 0307 	rsb	r3, r3, #7
 8004066:	2b04      	cmp	r3, #4
 8004068:	d009      	beq.n	800407e <xPortStartScheduler+0x76>
 800406a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406e:	f383 8811 	msr	BASEPRI, r3
 8004072:	f3bf 8f6f 	isb	sy
 8004076:	f3bf 8f4f 	dsb	sy
 800407a:	60bb      	str	r3, [r7, #8]
 800407c:	e7fe      	b.n	800407c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800407e:	4b17      	ldr	r3, [pc, #92]	; (80040dc <xPortStartScheduler+0xd4>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	021b      	lsls	r3, r3, #8
 8004084:	4a15      	ldr	r2, [pc, #84]	; (80040dc <xPortStartScheduler+0xd4>)
 8004086:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004088:	4b14      	ldr	r3, [pc, #80]	; (80040dc <xPortStartScheduler+0xd4>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004090:	4a12      	ldr	r2, [pc, #72]	; (80040dc <xPortStartScheduler+0xd4>)
 8004092:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	b2da      	uxtb	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800409c:	4b10      	ldr	r3, [pc, #64]	; (80040e0 <xPortStartScheduler+0xd8>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a0f      	ldr	r2, [pc, #60]	; (80040e0 <xPortStartScheduler+0xd8>)
 80040a2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80040a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80040a8:	4b0d      	ldr	r3, [pc, #52]	; (80040e0 <xPortStartScheduler+0xd8>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a0c      	ldr	r2, [pc, #48]	; (80040e0 <xPortStartScheduler+0xd8>)
 80040ae:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80040b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80040b4:	f000 f8b0 	bl	8004218 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80040b8:	4b0a      	ldr	r3, [pc, #40]	; (80040e4 <xPortStartScheduler+0xdc>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80040be:	f7ff ff93 	bl	8003fe8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80040c2:	f7ff f885 	bl	80031d0 <vTaskSwitchContext>
	prvTaskExitError();
 80040c6:	f7ff ff4d 	bl	8003f64 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	e000e400 	.word	0xe000e400
 80040d8:	20000a80 	.word	0x20000a80
 80040dc:	20000a84 	.word	0x20000a84
 80040e0:	e000ed20 	.word	0xe000ed20
 80040e4:	2000000c 	.word	0x2000000c

080040e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f2:	f383 8811 	msr	BASEPRI, r3
 80040f6:	f3bf 8f6f 	isb	sy
 80040fa:	f3bf 8f4f 	dsb	sy
 80040fe:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004100:	4b0e      	ldr	r3, [pc, #56]	; (800413c <vPortEnterCritical+0x54>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	3301      	adds	r3, #1
 8004106:	4a0d      	ldr	r2, [pc, #52]	; (800413c <vPortEnterCritical+0x54>)
 8004108:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800410a:	4b0c      	ldr	r3, [pc, #48]	; (800413c <vPortEnterCritical+0x54>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2b01      	cmp	r3, #1
 8004110:	d10e      	bne.n	8004130 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004112:	4b0b      	ldr	r3, [pc, #44]	; (8004140 <vPortEnterCritical+0x58>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b00      	cmp	r3, #0
 800411a:	d009      	beq.n	8004130 <vPortEnterCritical+0x48>
 800411c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004120:	f383 8811 	msr	BASEPRI, r3
 8004124:	f3bf 8f6f 	isb	sy
 8004128:	f3bf 8f4f 	dsb	sy
 800412c:	603b      	str	r3, [r7, #0]
 800412e:	e7fe      	b.n	800412e <vPortEnterCritical+0x46>
	}
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	bc80      	pop	{r7}
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	2000000c 	.word	0x2000000c
 8004140:	e000ed04 	.word	0xe000ed04

08004144 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800414a:	4b10      	ldr	r3, [pc, #64]	; (800418c <vPortExitCritical+0x48>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d109      	bne.n	8004166 <vPortExitCritical+0x22>
 8004152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004156:	f383 8811 	msr	BASEPRI, r3
 800415a:	f3bf 8f6f 	isb	sy
 800415e:	f3bf 8f4f 	dsb	sy
 8004162:	607b      	str	r3, [r7, #4]
 8004164:	e7fe      	b.n	8004164 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004166:	4b09      	ldr	r3, [pc, #36]	; (800418c <vPortExitCritical+0x48>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	3b01      	subs	r3, #1
 800416c:	4a07      	ldr	r2, [pc, #28]	; (800418c <vPortExitCritical+0x48>)
 800416e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004170:	4b06      	ldr	r3, [pc, #24]	; (800418c <vPortExitCritical+0x48>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d104      	bne.n	8004182 <vPortExitCritical+0x3e>
 8004178:	2300      	movs	r3, #0
 800417a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004182:	bf00      	nop
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	bc80      	pop	{r7}
 800418a:	4770      	bx	lr
 800418c:	2000000c 	.word	0x2000000c

08004190 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004190:	f3ef 8009 	mrs	r0, PSP
 8004194:	f3bf 8f6f 	isb	sy
 8004198:	4b0d      	ldr	r3, [pc, #52]	; (80041d0 <pxCurrentTCBConst>)
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80041a0:	6010      	str	r0, [r2, #0]
 80041a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80041a6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80041aa:	f380 8811 	msr	BASEPRI, r0
 80041ae:	f7ff f80f 	bl	80031d0 <vTaskSwitchContext>
 80041b2:	f04f 0000 	mov.w	r0, #0
 80041b6:	f380 8811 	msr	BASEPRI, r0
 80041ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80041be:	6819      	ldr	r1, [r3, #0]
 80041c0:	6808      	ldr	r0, [r1, #0]
 80041c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80041c6:	f380 8809 	msr	PSP, r0
 80041ca:	f3bf 8f6f 	isb	sy
 80041ce:	4770      	bx	lr

080041d0 <pxCurrentTCBConst>:
 80041d0:	20000454 	.word	0x20000454
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80041d4:	bf00      	nop
 80041d6:	bf00      	nop

080041d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
	__asm volatile
 80041de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e2:	f383 8811 	msr	BASEPRI, r3
 80041e6:	f3bf 8f6f 	isb	sy
 80041ea:	f3bf 8f4f 	dsb	sy
 80041ee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80041f0:	f7fe ff30 	bl	8003054 <xTaskIncrementTick>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d003      	beq.n	8004202 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80041fa:	4b06      	ldr	r3, [pc, #24]	; (8004214 <xPortSysTickHandler+0x3c>)
 80041fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004200:	601a      	str	r2, [r3, #0]
 8004202:	2300      	movs	r3, #0
 8004204:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800420c:	bf00      	nop
 800420e:	3708      	adds	r7, #8
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	e000ed04 	.word	0xe000ed04

08004218 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800421c:	4b0a      	ldr	r3, [pc, #40]	; (8004248 <vPortSetupTimerInterrupt+0x30>)
 800421e:	2200      	movs	r2, #0
 8004220:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004222:	4b0a      	ldr	r3, [pc, #40]	; (800424c <vPortSetupTimerInterrupt+0x34>)
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004228:	4b09      	ldr	r3, [pc, #36]	; (8004250 <vPortSetupTimerInterrupt+0x38>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a09      	ldr	r2, [pc, #36]	; (8004254 <vPortSetupTimerInterrupt+0x3c>)
 800422e:	fba2 2303 	umull	r2, r3, r2, r3
 8004232:	099b      	lsrs	r3, r3, #6
 8004234:	4a08      	ldr	r2, [pc, #32]	; (8004258 <vPortSetupTimerInterrupt+0x40>)
 8004236:	3b01      	subs	r3, #1
 8004238:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800423a:	4b03      	ldr	r3, [pc, #12]	; (8004248 <vPortSetupTimerInterrupt+0x30>)
 800423c:	2207      	movs	r2, #7
 800423e:	601a      	str	r2, [r3, #0]
}
 8004240:	bf00      	nop
 8004242:	46bd      	mov	sp, r7
 8004244:	bc80      	pop	{r7}
 8004246:	4770      	bx	lr
 8004248:	e000e010 	.word	0xe000e010
 800424c:	e000e018 	.word	0xe000e018
 8004250:	20000000 	.word	0x20000000
 8004254:	10624dd3 	.word	0x10624dd3
 8004258:	e000e014 	.word	0xe000e014

0800425c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004262:	f3ef 8305 	mrs	r3, IPSR
 8004266:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2b0f      	cmp	r3, #15
 800426c:	d913      	bls.n	8004296 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800426e:	4a15      	ldr	r2, [pc, #84]	; (80042c4 <vPortValidateInterruptPriority+0x68>)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	4413      	add	r3, r2
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004278:	4b13      	ldr	r3, [pc, #76]	; (80042c8 <vPortValidateInterruptPriority+0x6c>)
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	7afa      	ldrb	r2, [r7, #11]
 800427e:	429a      	cmp	r2, r3
 8004280:	d209      	bcs.n	8004296 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8004282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004286:	f383 8811 	msr	BASEPRI, r3
 800428a:	f3bf 8f6f 	isb	sy
 800428e:	f3bf 8f4f 	dsb	sy
 8004292:	607b      	str	r3, [r7, #4]
 8004294:	e7fe      	b.n	8004294 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004296:	4b0d      	ldr	r3, [pc, #52]	; (80042cc <vPortValidateInterruptPriority+0x70>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800429e:	4b0c      	ldr	r3, [pc, #48]	; (80042d0 <vPortValidateInterruptPriority+0x74>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d909      	bls.n	80042ba <vPortValidateInterruptPriority+0x5e>
 80042a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042aa:	f383 8811 	msr	BASEPRI, r3
 80042ae:	f3bf 8f6f 	isb	sy
 80042b2:	f3bf 8f4f 	dsb	sy
 80042b6:	603b      	str	r3, [r7, #0]
 80042b8:	e7fe      	b.n	80042b8 <vPortValidateInterruptPriority+0x5c>
	}
 80042ba:	bf00      	nop
 80042bc:	3714      	adds	r7, #20
 80042be:	46bd      	mov	sp, r7
 80042c0:	bc80      	pop	{r7}
 80042c2:	4770      	bx	lr
 80042c4:	e000e3f0 	.word	0xe000e3f0
 80042c8:	20000a80 	.word	0x20000a80
 80042cc:	e000ed0c 	.word	0xe000ed0c
 80042d0:	20000a84 	.word	0x20000a84

080042d4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b08a      	sub	sp, #40	; 0x28
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80042dc:	2300      	movs	r3, #0
 80042de:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80042e0:	f7fe fe00 	bl	8002ee4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80042e4:	4b57      	ldr	r3, [pc, #348]	; (8004444 <pvPortMalloc+0x170>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d101      	bne.n	80042f0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80042ec:	f000 f90c 	bl	8004508 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80042f0:	4b55      	ldr	r3, [pc, #340]	; (8004448 <pvPortMalloc+0x174>)
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4013      	ands	r3, r2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f040 808c 	bne.w	8004416 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d01c      	beq.n	800433e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004304:	2208      	movs	r2, #8
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4413      	add	r3, r2
 800430a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f003 0307 	and.w	r3, r3, #7
 8004312:	2b00      	cmp	r3, #0
 8004314:	d013      	beq.n	800433e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f023 0307 	bic.w	r3, r3, #7
 800431c:	3308      	adds	r3, #8
 800431e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f003 0307 	and.w	r3, r3, #7
 8004326:	2b00      	cmp	r3, #0
 8004328:	d009      	beq.n	800433e <pvPortMalloc+0x6a>
 800432a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432e:	f383 8811 	msr	BASEPRI, r3
 8004332:	f3bf 8f6f 	isb	sy
 8004336:	f3bf 8f4f 	dsb	sy
 800433a:	617b      	str	r3, [r7, #20]
 800433c:	e7fe      	b.n	800433c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d068      	beq.n	8004416 <pvPortMalloc+0x142>
 8004344:	4b41      	ldr	r3, [pc, #260]	; (800444c <pvPortMalloc+0x178>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	429a      	cmp	r2, r3
 800434c:	d863      	bhi.n	8004416 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800434e:	4b40      	ldr	r3, [pc, #256]	; (8004450 <pvPortMalloc+0x17c>)
 8004350:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004352:	4b3f      	ldr	r3, [pc, #252]	; (8004450 <pvPortMalloc+0x17c>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004358:	e004      	b.n	8004364 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800435a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800435e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	429a      	cmp	r2, r3
 800436c:	d903      	bls.n	8004376 <pvPortMalloc+0xa2>
 800436e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1f1      	bne.n	800435a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004376:	4b33      	ldr	r3, [pc, #204]	; (8004444 <pvPortMalloc+0x170>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800437c:	429a      	cmp	r2, r3
 800437e:	d04a      	beq.n	8004416 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004380:	6a3b      	ldr	r3, [r7, #32]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2208      	movs	r2, #8
 8004386:	4413      	add	r3, r2
 8004388:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800438a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	6a3b      	ldr	r3, [r7, #32]
 8004390:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004394:	685a      	ldr	r2, [r3, #4]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	1ad2      	subs	r2, r2, r3
 800439a:	2308      	movs	r3, #8
 800439c:	005b      	lsls	r3, r3, #1
 800439e:	429a      	cmp	r2, r3
 80043a0:	d91e      	bls.n	80043e0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80043a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4413      	add	r3, r2
 80043a8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	f003 0307 	and.w	r3, r3, #7
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d009      	beq.n	80043c8 <pvPortMalloc+0xf4>
 80043b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b8:	f383 8811 	msr	BASEPRI, r3
 80043bc:	f3bf 8f6f 	isb	sy
 80043c0:	f3bf 8f4f 	dsb	sy
 80043c4:	613b      	str	r3, [r7, #16]
 80043c6:	e7fe      	b.n	80043c6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80043c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	1ad2      	subs	r2, r2, r3
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80043d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80043da:	69b8      	ldr	r0, [r7, #24]
 80043dc:	f000 f8f6 	bl	80045cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80043e0:	4b1a      	ldr	r3, [pc, #104]	; (800444c <pvPortMalloc+0x178>)
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	4a18      	ldr	r2, [pc, #96]	; (800444c <pvPortMalloc+0x178>)
 80043ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80043ee:	4b17      	ldr	r3, [pc, #92]	; (800444c <pvPortMalloc+0x178>)
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	4b18      	ldr	r3, [pc, #96]	; (8004454 <pvPortMalloc+0x180>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d203      	bcs.n	8004402 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80043fa:	4b14      	ldr	r3, [pc, #80]	; (800444c <pvPortMalloc+0x178>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a15      	ldr	r2, [pc, #84]	; (8004454 <pvPortMalloc+0x180>)
 8004400:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004404:	685a      	ldr	r2, [r3, #4]
 8004406:	4b10      	ldr	r3, [pc, #64]	; (8004448 <pvPortMalloc+0x174>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	431a      	orrs	r2, r3
 800440c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004412:	2200      	movs	r2, #0
 8004414:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004416:	f7fe fd73 	bl	8002f00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	f003 0307 	and.w	r3, r3, #7
 8004420:	2b00      	cmp	r3, #0
 8004422:	d009      	beq.n	8004438 <pvPortMalloc+0x164>
 8004424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004428:	f383 8811 	msr	BASEPRI, r3
 800442c:	f3bf 8f6f 	isb	sy
 8004430:	f3bf 8f4f 	dsb	sy
 8004434:	60fb      	str	r3, [r7, #12]
 8004436:	e7fe      	b.n	8004436 <pvPortMalloc+0x162>
	return pvReturn;
 8004438:	69fb      	ldr	r3, [r7, #28]
}
 800443a:	4618      	mov	r0, r3
 800443c:	3728      	adds	r7, #40	; 0x28
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	20001a90 	.word	0x20001a90
 8004448:	20001a9c 	.word	0x20001a9c
 800444c:	20001a94 	.word	0x20001a94
 8004450:	20001a88 	.word	0x20001a88
 8004454:	20001a98 	.word	0x20001a98

08004458 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d046      	beq.n	80044f8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800446a:	2308      	movs	r3, #8
 800446c:	425b      	negs	r3, r3
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	4413      	add	r3, r2
 8004472:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	4b20      	ldr	r3, [pc, #128]	; (8004500 <vPortFree+0xa8>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4013      	ands	r3, r2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d109      	bne.n	800449a <vPortFree+0x42>
 8004486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800448a:	f383 8811 	msr	BASEPRI, r3
 800448e:	f3bf 8f6f 	isb	sy
 8004492:	f3bf 8f4f 	dsb	sy
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	e7fe      	b.n	8004498 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d009      	beq.n	80044b6 <vPortFree+0x5e>
 80044a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a6:	f383 8811 	msr	BASEPRI, r3
 80044aa:	f3bf 8f6f 	isb	sy
 80044ae:	f3bf 8f4f 	dsb	sy
 80044b2:	60bb      	str	r3, [r7, #8]
 80044b4:	e7fe      	b.n	80044b4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	685a      	ldr	r2, [r3, #4]
 80044ba:	4b11      	ldr	r3, [pc, #68]	; (8004500 <vPortFree+0xa8>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4013      	ands	r3, r2
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d019      	beq.n	80044f8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d115      	bne.n	80044f8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	685a      	ldr	r2, [r3, #4]
 80044d0:	4b0b      	ldr	r3, [pc, #44]	; (8004500 <vPortFree+0xa8>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	43db      	mvns	r3, r3
 80044d6:	401a      	ands	r2, r3
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80044dc:	f7fe fd02 	bl	8002ee4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	685a      	ldr	r2, [r3, #4]
 80044e4:	4b07      	ldr	r3, [pc, #28]	; (8004504 <vPortFree+0xac>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4413      	add	r3, r2
 80044ea:	4a06      	ldr	r2, [pc, #24]	; (8004504 <vPortFree+0xac>)
 80044ec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80044ee:	6938      	ldr	r0, [r7, #16]
 80044f0:	f000 f86c 	bl	80045cc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80044f4:	f7fe fd04 	bl	8002f00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80044f8:	bf00      	nop
 80044fa:	3718      	adds	r7, #24
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	20001a9c 	.word	0x20001a9c
 8004504:	20001a94 	.word	0x20001a94

08004508 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800450e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004512:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004514:	4b27      	ldr	r3, [pc, #156]	; (80045b4 <prvHeapInit+0xac>)
 8004516:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f003 0307 	and.w	r3, r3, #7
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00c      	beq.n	800453c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	3307      	adds	r3, #7
 8004526:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f023 0307 	bic.w	r3, r3, #7
 800452e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004530:	68ba      	ldr	r2, [r7, #8]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	4a1f      	ldr	r2, [pc, #124]	; (80045b4 <prvHeapInit+0xac>)
 8004538:	4413      	add	r3, r2
 800453a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004540:	4a1d      	ldr	r2, [pc, #116]	; (80045b8 <prvHeapInit+0xb0>)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004546:	4b1c      	ldr	r3, [pc, #112]	; (80045b8 <prvHeapInit+0xb0>)
 8004548:	2200      	movs	r2, #0
 800454a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68ba      	ldr	r2, [r7, #8]
 8004550:	4413      	add	r3, r2
 8004552:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004554:	2208      	movs	r2, #8
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	1a9b      	subs	r3, r3, r2
 800455a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f023 0307 	bic.w	r3, r3, #7
 8004562:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	4a15      	ldr	r2, [pc, #84]	; (80045bc <prvHeapInit+0xb4>)
 8004568:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800456a:	4b14      	ldr	r3, [pc, #80]	; (80045bc <prvHeapInit+0xb4>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2200      	movs	r2, #0
 8004570:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004572:	4b12      	ldr	r3, [pc, #72]	; (80045bc <prvHeapInit+0xb4>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2200      	movs	r2, #0
 8004578:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	1ad2      	subs	r2, r2, r3
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004588:	4b0c      	ldr	r3, [pc, #48]	; (80045bc <prvHeapInit+0xb4>)
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	4a0a      	ldr	r2, [pc, #40]	; (80045c0 <prvHeapInit+0xb8>)
 8004596:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	4a09      	ldr	r2, [pc, #36]	; (80045c4 <prvHeapInit+0xbc>)
 800459e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80045a0:	4b09      	ldr	r3, [pc, #36]	; (80045c8 <prvHeapInit+0xc0>)
 80045a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80045a6:	601a      	str	r2, [r3, #0]
}
 80045a8:	bf00      	nop
 80045aa:	3714      	adds	r7, #20
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bc80      	pop	{r7}
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	20000a88 	.word	0x20000a88
 80045b8:	20001a88 	.word	0x20001a88
 80045bc:	20001a90 	.word	0x20001a90
 80045c0:	20001a98 	.word	0x20001a98
 80045c4:	20001a94 	.word	0x20001a94
 80045c8:	20001a9c 	.word	0x20001a9c

080045cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80045d4:	4b27      	ldr	r3, [pc, #156]	; (8004674 <prvInsertBlockIntoFreeList+0xa8>)
 80045d6:	60fb      	str	r3, [r7, #12]
 80045d8:	e002      	b.n	80045e0 <prvInsertBlockIntoFreeList+0x14>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	60fb      	str	r3, [r7, #12]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d8f7      	bhi.n	80045da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	68ba      	ldr	r2, [r7, #8]
 80045f4:	4413      	add	r3, r2
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d108      	bne.n	800460e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	685a      	ldr	r2, [r3, #4]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	441a      	add	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	68ba      	ldr	r2, [r7, #8]
 8004618:	441a      	add	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	429a      	cmp	r2, r3
 8004620:	d118      	bne.n	8004654 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	4b14      	ldr	r3, [pc, #80]	; (8004678 <prvInsertBlockIntoFreeList+0xac>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	429a      	cmp	r2, r3
 800462c:	d00d      	beq.n	800464a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685a      	ldr	r2, [r3, #4]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	441a      	add	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	e008      	b.n	800465c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800464a:	4b0b      	ldr	r3, [pc, #44]	; (8004678 <prvInsertBlockIntoFreeList+0xac>)
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	601a      	str	r2, [r3, #0]
 8004652:	e003      	b.n	800465c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	429a      	cmp	r2, r3
 8004662:	d002      	beq.n	800466a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800466a:	bf00      	nop
 800466c:	3714      	adds	r7, #20
 800466e:	46bd      	mov	sp, r7
 8004670:	bc80      	pop	{r7}
 8004672:	4770      	bx	lr
 8004674:	20001a88 	.word	0x20001a88
 8004678:	20001a90 	.word	0x20001a90

0800467c <__errno>:
 800467c:	4b01      	ldr	r3, [pc, #4]	; (8004684 <__errno+0x8>)
 800467e:	6818      	ldr	r0, [r3, #0]
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	20000010 	.word	0x20000010

08004688 <__libc_init_array>:
 8004688:	b570      	push	{r4, r5, r6, lr}
 800468a:	2500      	movs	r5, #0
 800468c:	4e0c      	ldr	r6, [pc, #48]	; (80046c0 <__libc_init_array+0x38>)
 800468e:	4c0d      	ldr	r4, [pc, #52]	; (80046c4 <__libc_init_array+0x3c>)
 8004690:	1ba4      	subs	r4, r4, r6
 8004692:	10a4      	asrs	r4, r4, #2
 8004694:	42a5      	cmp	r5, r4
 8004696:	d109      	bne.n	80046ac <__libc_init_array+0x24>
 8004698:	f000 fc3e 	bl	8004f18 <_init>
 800469c:	2500      	movs	r5, #0
 800469e:	4e0a      	ldr	r6, [pc, #40]	; (80046c8 <__libc_init_array+0x40>)
 80046a0:	4c0a      	ldr	r4, [pc, #40]	; (80046cc <__libc_init_array+0x44>)
 80046a2:	1ba4      	subs	r4, r4, r6
 80046a4:	10a4      	asrs	r4, r4, #2
 80046a6:	42a5      	cmp	r5, r4
 80046a8:	d105      	bne.n	80046b6 <__libc_init_array+0x2e>
 80046aa:	bd70      	pop	{r4, r5, r6, pc}
 80046ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80046b0:	4798      	blx	r3
 80046b2:	3501      	adds	r5, #1
 80046b4:	e7ee      	b.n	8004694 <__libc_init_array+0xc>
 80046b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80046ba:	4798      	blx	r3
 80046bc:	3501      	adds	r5, #1
 80046be:	e7f2      	b.n	80046a6 <__libc_init_array+0x1e>
 80046c0:	080051a4 	.word	0x080051a4
 80046c4:	080051a4 	.word	0x080051a4
 80046c8:	080051a4 	.word	0x080051a4
 80046cc:	080051a8 	.word	0x080051a8

080046d0 <memcpy>:
 80046d0:	b510      	push	{r4, lr}
 80046d2:	1e43      	subs	r3, r0, #1
 80046d4:	440a      	add	r2, r1
 80046d6:	4291      	cmp	r1, r2
 80046d8:	d100      	bne.n	80046dc <memcpy+0xc>
 80046da:	bd10      	pop	{r4, pc}
 80046dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046e4:	e7f7      	b.n	80046d6 <memcpy+0x6>

080046e6 <memset>:
 80046e6:	4603      	mov	r3, r0
 80046e8:	4402      	add	r2, r0
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d100      	bne.n	80046f0 <memset+0xa>
 80046ee:	4770      	bx	lr
 80046f0:	f803 1b01 	strb.w	r1, [r3], #1
 80046f4:	e7f9      	b.n	80046ea <memset+0x4>
	...

080046f8 <siprintf>:
 80046f8:	b40e      	push	{r1, r2, r3}
 80046fa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80046fe:	b500      	push	{lr}
 8004700:	b09c      	sub	sp, #112	; 0x70
 8004702:	ab1d      	add	r3, sp, #116	; 0x74
 8004704:	9002      	str	r0, [sp, #8]
 8004706:	9006      	str	r0, [sp, #24]
 8004708:	9107      	str	r1, [sp, #28]
 800470a:	9104      	str	r1, [sp, #16]
 800470c:	4808      	ldr	r0, [pc, #32]	; (8004730 <siprintf+0x38>)
 800470e:	4909      	ldr	r1, [pc, #36]	; (8004734 <siprintf+0x3c>)
 8004710:	f853 2b04 	ldr.w	r2, [r3], #4
 8004714:	9105      	str	r1, [sp, #20]
 8004716:	6800      	ldr	r0, [r0, #0]
 8004718:	a902      	add	r1, sp, #8
 800471a:	9301      	str	r3, [sp, #4]
 800471c:	f000 f914 	bl	8004948 <_svfiprintf_r>
 8004720:	2200      	movs	r2, #0
 8004722:	9b02      	ldr	r3, [sp, #8]
 8004724:	701a      	strb	r2, [r3, #0]
 8004726:	b01c      	add	sp, #112	; 0x70
 8004728:	f85d eb04 	ldr.w	lr, [sp], #4
 800472c:	b003      	add	sp, #12
 800472e:	4770      	bx	lr
 8004730:	20000010 	.word	0x20000010
 8004734:	ffff0208 	.word	0xffff0208

08004738 <strcpy>:
 8004738:	4603      	mov	r3, r0
 800473a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800473e:	f803 2b01 	strb.w	r2, [r3], #1
 8004742:	2a00      	cmp	r2, #0
 8004744:	d1f9      	bne.n	800473a <strcpy+0x2>
 8004746:	4770      	bx	lr

08004748 <_free_r>:
 8004748:	b538      	push	{r3, r4, r5, lr}
 800474a:	4605      	mov	r5, r0
 800474c:	2900      	cmp	r1, #0
 800474e:	d043      	beq.n	80047d8 <_free_r+0x90>
 8004750:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004754:	1f0c      	subs	r4, r1, #4
 8004756:	2b00      	cmp	r3, #0
 8004758:	bfb8      	it	lt
 800475a:	18e4      	addlt	r4, r4, r3
 800475c:	f000 fbab 	bl	8004eb6 <__malloc_lock>
 8004760:	4a1e      	ldr	r2, [pc, #120]	; (80047dc <_free_r+0x94>)
 8004762:	6813      	ldr	r3, [r2, #0]
 8004764:	4610      	mov	r0, r2
 8004766:	b933      	cbnz	r3, 8004776 <_free_r+0x2e>
 8004768:	6063      	str	r3, [r4, #4]
 800476a:	6014      	str	r4, [r2, #0]
 800476c:	4628      	mov	r0, r5
 800476e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004772:	f000 bba1 	b.w	8004eb8 <__malloc_unlock>
 8004776:	42a3      	cmp	r3, r4
 8004778:	d90b      	bls.n	8004792 <_free_r+0x4a>
 800477a:	6821      	ldr	r1, [r4, #0]
 800477c:	1862      	adds	r2, r4, r1
 800477e:	4293      	cmp	r3, r2
 8004780:	bf01      	itttt	eq
 8004782:	681a      	ldreq	r2, [r3, #0]
 8004784:	685b      	ldreq	r3, [r3, #4]
 8004786:	1852      	addeq	r2, r2, r1
 8004788:	6022      	streq	r2, [r4, #0]
 800478a:	6063      	str	r3, [r4, #4]
 800478c:	6004      	str	r4, [r0, #0]
 800478e:	e7ed      	b.n	800476c <_free_r+0x24>
 8004790:	4613      	mov	r3, r2
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	b10a      	cbz	r2, 800479a <_free_r+0x52>
 8004796:	42a2      	cmp	r2, r4
 8004798:	d9fa      	bls.n	8004790 <_free_r+0x48>
 800479a:	6819      	ldr	r1, [r3, #0]
 800479c:	1858      	adds	r0, r3, r1
 800479e:	42a0      	cmp	r0, r4
 80047a0:	d10b      	bne.n	80047ba <_free_r+0x72>
 80047a2:	6820      	ldr	r0, [r4, #0]
 80047a4:	4401      	add	r1, r0
 80047a6:	1858      	adds	r0, r3, r1
 80047a8:	4282      	cmp	r2, r0
 80047aa:	6019      	str	r1, [r3, #0]
 80047ac:	d1de      	bne.n	800476c <_free_r+0x24>
 80047ae:	6810      	ldr	r0, [r2, #0]
 80047b0:	6852      	ldr	r2, [r2, #4]
 80047b2:	4401      	add	r1, r0
 80047b4:	6019      	str	r1, [r3, #0]
 80047b6:	605a      	str	r2, [r3, #4]
 80047b8:	e7d8      	b.n	800476c <_free_r+0x24>
 80047ba:	d902      	bls.n	80047c2 <_free_r+0x7a>
 80047bc:	230c      	movs	r3, #12
 80047be:	602b      	str	r3, [r5, #0]
 80047c0:	e7d4      	b.n	800476c <_free_r+0x24>
 80047c2:	6820      	ldr	r0, [r4, #0]
 80047c4:	1821      	adds	r1, r4, r0
 80047c6:	428a      	cmp	r2, r1
 80047c8:	bf01      	itttt	eq
 80047ca:	6811      	ldreq	r1, [r2, #0]
 80047cc:	6852      	ldreq	r2, [r2, #4]
 80047ce:	1809      	addeq	r1, r1, r0
 80047d0:	6021      	streq	r1, [r4, #0]
 80047d2:	6062      	str	r2, [r4, #4]
 80047d4:	605c      	str	r4, [r3, #4]
 80047d6:	e7c9      	b.n	800476c <_free_r+0x24>
 80047d8:	bd38      	pop	{r3, r4, r5, pc}
 80047da:	bf00      	nop
 80047dc:	20001aa0 	.word	0x20001aa0

080047e0 <_malloc_r>:
 80047e0:	b570      	push	{r4, r5, r6, lr}
 80047e2:	1ccd      	adds	r5, r1, #3
 80047e4:	f025 0503 	bic.w	r5, r5, #3
 80047e8:	3508      	adds	r5, #8
 80047ea:	2d0c      	cmp	r5, #12
 80047ec:	bf38      	it	cc
 80047ee:	250c      	movcc	r5, #12
 80047f0:	2d00      	cmp	r5, #0
 80047f2:	4606      	mov	r6, r0
 80047f4:	db01      	blt.n	80047fa <_malloc_r+0x1a>
 80047f6:	42a9      	cmp	r1, r5
 80047f8:	d903      	bls.n	8004802 <_malloc_r+0x22>
 80047fa:	230c      	movs	r3, #12
 80047fc:	6033      	str	r3, [r6, #0]
 80047fe:	2000      	movs	r0, #0
 8004800:	bd70      	pop	{r4, r5, r6, pc}
 8004802:	f000 fb58 	bl	8004eb6 <__malloc_lock>
 8004806:	4a21      	ldr	r2, [pc, #132]	; (800488c <_malloc_r+0xac>)
 8004808:	6814      	ldr	r4, [r2, #0]
 800480a:	4621      	mov	r1, r4
 800480c:	b991      	cbnz	r1, 8004834 <_malloc_r+0x54>
 800480e:	4c20      	ldr	r4, [pc, #128]	; (8004890 <_malloc_r+0xb0>)
 8004810:	6823      	ldr	r3, [r4, #0]
 8004812:	b91b      	cbnz	r3, 800481c <_malloc_r+0x3c>
 8004814:	4630      	mov	r0, r6
 8004816:	f000 fb17 	bl	8004e48 <_sbrk_r>
 800481a:	6020      	str	r0, [r4, #0]
 800481c:	4629      	mov	r1, r5
 800481e:	4630      	mov	r0, r6
 8004820:	f000 fb12 	bl	8004e48 <_sbrk_r>
 8004824:	1c43      	adds	r3, r0, #1
 8004826:	d124      	bne.n	8004872 <_malloc_r+0x92>
 8004828:	230c      	movs	r3, #12
 800482a:	4630      	mov	r0, r6
 800482c:	6033      	str	r3, [r6, #0]
 800482e:	f000 fb43 	bl	8004eb8 <__malloc_unlock>
 8004832:	e7e4      	b.n	80047fe <_malloc_r+0x1e>
 8004834:	680b      	ldr	r3, [r1, #0]
 8004836:	1b5b      	subs	r3, r3, r5
 8004838:	d418      	bmi.n	800486c <_malloc_r+0x8c>
 800483a:	2b0b      	cmp	r3, #11
 800483c:	d90f      	bls.n	800485e <_malloc_r+0x7e>
 800483e:	600b      	str	r3, [r1, #0]
 8004840:	18cc      	adds	r4, r1, r3
 8004842:	50cd      	str	r5, [r1, r3]
 8004844:	4630      	mov	r0, r6
 8004846:	f000 fb37 	bl	8004eb8 <__malloc_unlock>
 800484a:	f104 000b 	add.w	r0, r4, #11
 800484e:	1d23      	adds	r3, r4, #4
 8004850:	f020 0007 	bic.w	r0, r0, #7
 8004854:	1ac3      	subs	r3, r0, r3
 8004856:	d0d3      	beq.n	8004800 <_malloc_r+0x20>
 8004858:	425a      	negs	r2, r3
 800485a:	50e2      	str	r2, [r4, r3]
 800485c:	e7d0      	b.n	8004800 <_malloc_r+0x20>
 800485e:	684b      	ldr	r3, [r1, #4]
 8004860:	428c      	cmp	r4, r1
 8004862:	bf16      	itet	ne
 8004864:	6063      	strne	r3, [r4, #4]
 8004866:	6013      	streq	r3, [r2, #0]
 8004868:	460c      	movne	r4, r1
 800486a:	e7eb      	b.n	8004844 <_malloc_r+0x64>
 800486c:	460c      	mov	r4, r1
 800486e:	6849      	ldr	r1, [r1, #4]
 8004870:	e7cc      	b.n	800480c <_malloc_r+0x2c>
 8004872:	1cc4      	adds	r4, r0, #3
 8004874:	f024 0403 	bic.w	r4, r4, #3
 8004878:	42a0      	cmp	r0, r4
 800487a:	d005      	beq.n	8004888 <_malloc_r+0xa8>
 800487c:	1a21      	subs	r1, r4, r0
 800487e:	4630      	mov	r0, r6
 8004880:	f000 fae2 	bl	8004e48 <_sbrk_r>
 8004884:	3001      	adds	r0, #1
 8004886:	d0cf      	beq.n	8004828 <_malloc_r+0x48>
 8004888:	6025      	str	r5, [r4, #0]
 800488a:	e7db      	b.n	8004844 <_malloc_r+0x64>
 800488c:	20001aa0 	.word	0x20001aa0
 8004890:	20001aa4 	.word	0x20001aa4

08004894 <__ssputs_r>:
 8004894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004898:	688e      	ldr	r6, [r1, #8]
 800489a:	4682      	mov	sl, r0
 800489c:	429e      	cmp	r6, r3
 800489e:	460c      	mov	r4, r1
 80048a0:	4690      	mov	r8, r2
 80048a2:	4699      	mov	r9, r3
 80048a4:	d837      	bhi.n	8004916 <__ssputs_r+0x82>
 80048a6:	898a      	ldrh	r2, [r1, #12]
 80048a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80048ac:	d031      	beq.n	8004912 <__ssputs_r+0x7e>
 80048ae:	2302      	movs	r3, #2
 80048b0:	6825      	ldr	r5, [r4, #0]
 80048b2:	6909      	ldr	r1, [r1, #16]
 80048b4:	1a6f      	subs	r7, r5, r1
 80048b6:	6965      	ldr	r5, [r4, #20]
 80048b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80048bc:	fb95 f5f3 	sdiv	r5, r5, r3
 80048c0:	f109 0301 	add.w	r3, r9, #1
 80048c4:	443b      	add	r3, r7
 80048c6:	429d      	cmp	r5, r3
 80048c8:	bf38      	it	cc
 80048ca:	461d      	movcc	r5, r3
 80048cc:	0553      	lsls	r3, r2, #21
 80048ce:	d530      	bpl.n	8004932 <__ssputs_r+0x9e>
 80048d0:	4629      	mov	r1, r5
 80048d2:	f7ff ff85 	bl	80047e0 <_malloc_r>
 80048d6:	4606      	mov	r6, r0
 80048d8:	b950      	cbnz	r0, 80048f0 <__ssputs_r+0x5c>
 80048da:	230c      	movs	r3, #12
 80048dc:	f04f 30ff 	mov.w	r0, #4294967295
 80048e0:	f8ca 3000 	str.w	r3, [sl]
 80048e4:	89a3      	ldrh	r3, [r4, #12]
 80048e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048ea:	81a3      	strh	r3, [r4, #12]
 80048ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048f0:	463a      	mov	r2, r7
 80048f2:	6921      	ldr	r1, [r4, #16]
 80048f4:	f7ff feec 	bl	80046d0 <memcpy>
 80048f8:	89a3      	ldrh	r3, [r4, #12]
 80048fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80048fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004902:	81a3      	strh	r3, [r4, #12]
 8004904:	6126      	str	r6, [r4, #16]
 8004906:	443e      	add	r6, r7
 8004908:	6026      	str	r6, [r4, #0]
 800490a:	464e      	mov	r6, r9
 800490c:	6165      	str	r5, [r4, #20]
 800490e:	1bed      	subs	r5, r5, r7
 8004910:	60a5      	str	r5, [r4, #8]
 8004912:	454e      	cmp	r6, r9
 8004914:	d900      	bls.n	8004918 <__ssputs_r+0x84>
 8004916:	464e      	mov	r6, r9
 8004918:	4632      	mov	r2, r6
 800491a:	4641      	mov	r1, r8
 800491c:	6820      	ldr	r0, [r4, #0]
 800491e:	f000 fab1 	bl	8004e84 <memmove>
 8004922:	68a3      	ldr	r3, [r4, #8]
 8004924:	2000      	movs	r0, #0
 8004926:	1b9b      	subs	r3, r3, r6
 8004928:	60a3      	str	r3, [r4, #8]
 800492a:	6823      	ldr	r3, [r4, #0]
 800492c:	441e      	add	r6, r3
 800492e:	6026      	str	r6, [r4, #0]
 8004930:	e7dc      	b.n	80048ec <__ssputs_r+0x58>
 8004932:	462a      	mov	r2, r5
 8004934:	f000 fac1 	bl	8004eba <_realloc_r>
 8004938:	4606      	mov	r6, r0
 800493a:	2800      	cmp	r0, #0
 800493c:	d1e2      	bne.n	8004904 <__ssputs_r+0x70>
 800493e:	6921      	ldr	r1, [r4, #16]
 8004940:	4650      	mov	r0, sl
 8004942:	f7ff ff01 	bl	8004748 <_free_r>
 8004946:	e7c8      	b.n	80048da <__ssputs_r+0x46>

08004948 <_svfiprintf_r>:
 8004948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800494c:	461d      	mov	r5, r3
 800494e:	898b      	ldrh	r3, [r1, #12]
 8004950:	b09d      	sub	sp, #116	; 0x74
 8004952:	061f      	lsls	r7, r3, #24
 8004954:	4680      	mov	r8, r0
 8004956:	460c      	mov	r4, r1
 8004958:	4616      	mov	r6, r2
 800495a:	d50f      	bpl.n	800497c <_svfiprintf_r+0x34>
 800495c:	690b      	ldr	r3, [r1, #16]
 800495e:	b96b      	cbnz	r3, 800497c <_svfiprintf_r+0x34>
 8004960:	2140      	movs	r1, #64	; 0x40
 8004962:	f7ff ff3d 	bl	80047e0 <_malloc_r>
 8004966:	6020      	str	r0, [r4, #0]
 8004968:	6120      	str	r0, [r4, #16]
 800496a:	b928      	cbnz	r0, 8004978 <_svfiprintf_r+0x30>
 800496c:	230c      	movs	r3, #12
 800496e:	f8c8 3000 	str.w	r3, [r8]
 8004972:	f04f 30ff 	mov.w	r0, #4294967295
 8004976:	e0c8      	b.n	8004b0a <_svfiprintf_r+0x1c2>
 8004978:	2340      	movs	r3, #64	; 0x40
 800497a:	6163      	str	r3, [r4, #20]
 800497c:	2300      	movs	r3, #0
 800497e:	9309      	str	r3, [sp, #36]	; 0x24
 8004980:	2320      	movs	r3, #32
 8004982:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004986:	2330      	movs	r3, #48	; 0x30
 8004988:	f04f 0b01 	mov.w	fp, #1
 800498c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004990:	9503      	str	r5, [sp, #12]
 8004992:	4637      	mov	r7, r6
 8004994:	463d      	mov	r5, r7
 8004996:	f815 3b01 	ldrb.w	r3, [r5], #1
 800499a:	b10b      	cbz	r3, 80049a0 <_svfiprintf_r+0x58>
 800499c:	2b25      	cmp	r3, #37	; 0x25
 800499e:	d13e      	bne.n	8004a1e <_svfiprintf_r+0xd6>
 80049a0:	ebb7 0a06 	subs.w	sl, r7, r6
 80049a4:	d00b      	beq.n	80049be <_svfiprintf_r+0x76>
 80049a6:	4653      	mov	r3, sl
 80049a8:	4632      	mov	r2, r6
 80049aa:	4621      	mov	r1, r4
 80049ac:	4640      	mov	r0, r8
 80049ae:	f7ff ff71 	bl	8004894 <__ssputs_r>
 80049b2:	3001      	adds	r0, #1
 80049b4:	f000 80a4 	beq.w	8004b00 <_svfiprintf_r+0x1b8>
 80049b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049ba:	4453      	add	r3, sl
 80049bc:	9309      	str	r3, [sp, #36]	; 0x24
 80049be:	783b      	ldrb	r3, [r7, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f000 809d 	beq.w	8004b00 <_svfiprintf_r+0x1b8>
 80049c6:	2300      	movs	r3, #0
 80049c8:	f04f 32ff 	mov.w	r2, #4294967295
 80049cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049d0:	9304      	str	r3, [sp, #16]
 80049d2:	9307      	str	r3, [sp, #28]
 80049d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80049d8:	931a      	str	r3, [sp, #104]	; 0x68
 80049da:	462f      	mov	r7, r5
 80049dc:	2205      	movs	r2, #5
 80049de:	f817 1b01 	ldrb.w	r1, [r7], #1
 80049e2:	4850      	ldr	r0, [pc, #320]	; (8004b24 <_svfiprintf_r+0x1dc>)
 80049e4:	f000 fa40 	bl	8004e68 <memchr>
 80049e8:	9b04      	ldr	r3, [sp, #16]
 80049ea:	b9d0      	cbnz	r0, 8004a22 <_svfiprintf_r+0xda>
 80049ec:	06d9      	lsls	r1, r3, #27
 80049ee:	bf44      	itt	mi
 80049f0:	2220      	movmi	r2, #32
 80049f2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80049f6:	071a      	lsls	r2, r3, #28
 80049f8:	bf44      	itt	mi
 80049fa:	222b      	movmi	r2, #43	; 0x2b
 80049fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004a00:	782a      	ldrb	r2, [r5, #0]
 8004a02:	2a2a      	cmp	r2, #42	; 0x2a
 8004a04:	d015      	beq.n	8004a32 <_svfiprintf_r+0xea>
 8004a06:	462f      	mov	r7, r5
 8004a08:	2000      	movs	r0, #0
 8004a0a:	250a      	movs	r5, #10
 8004a0c:	9a07      	ldr	r2, [sp, #28]
 8004a0e:	4639      	mov	r1, r7
 8004a10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a14:	3b30      	subs	r3, #48	; 0x30
 8004a16:	2b09      	cmp	r3, #9
 8004a18:	d94d      	bls.n	8004ab6 <_svfiprintf_r+0x16e>
 8004a1a:	b1b8      	cbz	r0, 8004a4c <_svfiprintf_r+0x104>
 8004a1c:	e00f      	b.n	8004a3e <_svfiprintf_r+0xf6>
 8004a1e:	462f      	mov	r7, r5
 8004a20:	e7b8      	b.n	8004994 <_svfiprintf_r+0x4c>
 8004a22:	4a40      	ldr	r2, [pc, #256]	; (8004b24 <_svfiprintf_r+0x1dc>)
 8004a24:	463d      	mov	r5, r7
 8004a26:	1a80      	subs	r0, r0, r2
 8004a28:	fa0b f000 	lsl.w	r0, fp, r0
 8004a2c:	4318      	orrs	r0, r3
 8004a2e:	9004      	str	r0, [sp, #16]
 8004a30:	e7d3      	b.n	80049da <_svfiprintf_r+0x92>
 8004a32:	9a03      	ldr	r2, [sp, #12]
 8004a34:	1d11      	adds	r1, r2, #4
 8004a36:	6812      	ldr	r2, [r2, #0]
 8004a38:	9103      	str	r1, [sp, #12]
 8004a3a:	2a00      	cmp	r2, #0
 8004a3c:	db01      	blt.n	8004a42 <_svfiprintf_r+0xfa>
 8004a3e:	9207      	str	r2, [sp, #28]
 8004a40:	e004      	b.n	8004a4c <_svfiprintf_r+0x104>
 8004a42:	4252      	negs	r2, r2
 8004a44:	f043 0302 	orr.w	r3, r3, #2
 8004a48:	9207      	str	r2, [sp, #28]
 8004a4a:	9304      	str	r3, [sp, #16]
 8004a4c:	783b      	ldrb	r3, [r7, #0]
 8004a4e:	2b2e      	cmp	r3, #46	; 0x2e
 8004a50:	d10c      	bne.n	8004a6c <_svfiprintf_r+0x124>
 8004a52:	787b      	ldrb	r3, [r7, #1]
 8004a54:	2b2a      	cmp	r3, #42	; 0x2a
 8004a56:	d133      	bne.n	8004ac0 <_svfiprintf_r+0x178>
 8004a58:	9b03      	ldr	r3, [sp, #12]
 8004a5a:	3702      	adds	r7, #2
 8004a5c:	1d1a      	adds	r2, r3, #4
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	9203      	str	r2, [sp, #12]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	bfb8      	it	lt
 8004a66:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a6a:	9305      	str	r3, [sp, #20]
 8004a6c:	4d2e      	ldr	r5, [pc, #184]	; (8004b28 <_svfiprintf_r+0x1e0>)
 8004a6e:	2203      	movs	r2, #3
 8004a70:	7839      	ldrb	r1, [r7, #0]
 8004a72:	4628      	mov	r0, r5
 8004a74:	f000 f9f8 	bl	8004e68 <memchr>
 8004a78:	b138      	cbz	r0, 8004a8a <_svfiprintf_r+0x142>
 8004a7a:	2340      	movs	r3, #64	; 0x40
 8004a7c:	1b40      	subs	r0, r0, r5
 8004a7e:	fa03 f000 	lsl.w	r0, r3, r0
 8004a82:	9b04      	ldr	r3, [sp, #16]
 8004a84:	3701      	adds	r7, #1
 8004a86:	4303      	orrs	r3, r0
 8004a88:	9304      	str	r3, [sp, #16]
 8004a8a:	7839      	ldrb	r1, [r7, #0]
 8004a8c:	2206      	movs	r2, #6
 8004a8e:	4827      	ldr	r0, [pc, #156]	; (8004b2c <_svfiprintf_r+0x1e4>)
 8004a90:	1c7e      	adds	r6, r7, #1
 8004a92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a96:	f000 f9e7 	bl	8004e68 <memchr>
 8004a9a:	2800      	cmp	r0, #0
 8004a9c:	d038      	beq.n	8004b10 <_svfiprintf_r+0x1c8>
 8004a9e:	4b24      	ldr	r3, [pc, #144]	; (8004b30 <_svfiprintf_r+0x1e8>)
 8004aa0:	bb13      	cbnz	r3, 8004ae8 <_svfiprintf_r+0x1a0>
 8004aa2:	9b03      	ldr	r3, [sp, #12]
 8004aa4:	3307      	adds	r3, #7
 8004aa6:	f023 0307 	bic.w	r3, r3, #7
 8004aaa:	3308      	adds	r3, #8
 8004aac:	9303      	str	r3, [sp, #12]
 8004aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ab0:	444b      	add	r3, r9
 8004ab2:	9309      	str	r3, [sp, #36]	; 0x24
 8004ab4:	e76d      	b.n	8004992 <_svfiprintf_r+0x4a>
 8004ab6:	fb05 3202 	mla	r2, r5, r2, r3
 8004aba:	2001      	movs	r0, #1
 8004abc:	460f      	mov	r7, r1
 8004abe:	e7a6      	b.n	8004a0e <_svfiprintf_r+0xc6>
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	250a      	movs	r5, #10
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	3701      	adds	r7, #1
 8004ac8:	9305      	str	r3, [sp, #20]
 8004aca:	4638      	mov	r0, r7
 8004acc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ad0:	3a30      	subs	r2, #48	; 0x30
 8004ad2:	2a09      	cmp	r2, #9
 8004ad4:	d903      	bls.n	8004ade <_svfiprintf_r+0x196>
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d0c8      	beq.n	8004a6c <_svfiprintf_r+0x124>
 8004ada:	9105      	str	r1, [sp, #20]
 8004adc:	e7c6      	b.n	8004a6c <_svfiprintf_r+0x124>
 8004ade:	fb05 2101 	mla	r1, r5, r1, r2
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	4607      	mov	r7, r0
 8004ae6:	e7f0      	b.n	8004aca <_svfiprintf_r+0x182>
 8004ae8:	ab03      	add	r3, sp, #12
 8004aea:	9300      	str	r3, [sp, #0]
 8004aec:	4622      	mov	r2, r4
 8004aee:	4b11      	ldr	r3, [pc, #68]	; (8004b34 <_svfiprintf_r+0x1ec>)
 8004af0:	a904      	add	r1, sp, #16
 8004af2:	4640      	mov	r0, r8
 8004af4:	f3af 8000 	nop.w
 8004af8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004afc:	4681      	mov	r9, r0
 8004afe:	d1d6      	bne.n	8004aae <_svfiprintf_r+0x166>
 8004b00:	89a3      	ldrh	r3, [r4, #12]
 8004b02:	065b      	lsls	r3, r3, #25
 8004b04:	f53f af35 	bmi.w	8004972 <_svfiprintf_r+0x2a>
 8004b08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b0a:	b01d      	add	sp, #116	; 0x74
 8004b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b10:	ab03      	add	r3, sp, #12
 8004b12:	9300      	str	r3, [sp, #0]
 8004b14:	4622      	mov	r2, r4
 8004b16:	4b07      	ldr	r3, [pc, #28]	; (8004b34 <_svfiprintf_r+0x1ec>)
 8004b18:	a904      	add	r1, sp, #16
 8004b1a:	4640      	mov	r0, r8
 8004b1c:	f000 f882 	bl	8004c24 <_printf_i>
 8004b20:	e7ea      	b.n	8004af8 <_svfiprintf_r+0x1b0>
 8004b22:	bf00      	nop
 8004b24:	08005170 	.word	0x08005170
 8004b28:	08005176 	.word	0x08005176
 8004b2c:	0800517a 	.word	0x0800517a
 8004b30:	00000000 	.word	0x00000000
 8004b34:	08004895 	.word	0x08004895

08004b38 <_printf_common>:
 8004b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b3c:	4691      	mov	r9, r2
 8004b3e:	461f      	mov	r7, r3
 8004b40:	688a      	ldr	r2, [r1, #8]
 8004b42:	690b      	ldr	r3, [r1, #16]
 8004b44:	4606      	mov	r6, r0
 8004b46:	4293      	cmp	r3, r2
 8004b48:	bfb8      	it	lt
 8004b4a:	4613      	movlt	r3, r2
 8004b4c:	f8c9 3000 	str.w	r3, [r9]
 8004b50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b54:	460c      	mov	r4, r1
 8004b56:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b5a:	b112      	cbz	r2, 8004b62 <_printf_common+0x2a>
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	f8c9 3000 	str.w	r3, [r9]
 8004b62:	6823      	ldr	r3, [r4, #0]
 8004b64:	0699      	lsls	r1, r3, #26
 8004b66:	bf42      	ittt	mi
 8004b68:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004b6c:	3302      	addmi	r3, #2
 8004b6e:	f8c9 3000 	strmi.w	r3, [r9]
 8004b72:	6825      	ldr	r5, [r4, #0]
 8004b74:	f015 0506 	ands.w	r5, r5, #6
 8004b78:	d107      	bne.n	8004b8a <_printf_common+0x52>
 8004b7a:	f104 0a19 	add.w	sl, r4, #25
 8004b7e:	68e3      	ldr	r3, [r4, #12]
 8004b80:	f8d9 2000 	ldr.w	r2, [r9]
 8004b84:	1a9b      	subs	r3, r3, r2
 8004b86:	42ab      	cmp	r3, r5
 8004b88:	dc29      	bgt.n	8004bde <_printf_common+0xa6>
 8004b8a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004b8e:	6822      	ldr	r2, [r4, #0]
 8004b90:	3300      	adds	r3, #0
 8004b92:	bf18      	it	ne
 8004b94:	2301      	movne	r3, #1
 8004b96:	0692      	lsls	r2, r2, #26
 8004b98:	d42e      	bmi.n	8004bf8 <_printf_common+0xc0>
 8004b9a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b9e:	4639      	mov	r1, r7
 8004ba0:	4630      	mov	r0, r6
 8004ba2:	47c0      	blx	r8
 8004ba4:	3001      	adds	r0, #1
 8004ba6:	d021      	beq.n	8004bec <_printf_common+0xb4>
 8004ba8:	6823      	ldr	r3, [r4, #0]
 8004baa:	68e5      	ldr	r5, [r4, #12]
 8004bac:	f003 0306 	and.w	r3, r3, #6
 8004bb0:	2b04      	cmp	r3, #4
 8004bb2:	bf18      	it	ne
 8004bb4:	2500      	movne	r5, #0
 8004bb6:	f8d9 2000 	ldr.w	r2, [r9]
 8004bba:	f04f 0900 	mov.w	r9, #0
 8004bbe:	bf08      	it	eq
 8004bc0:	1aad      	subeq	r5, r5, r2
 8004bc2:	68a3      	ldr	r3, [r4, #8]
 8004bc4:	6922      	ldr	r2, [r4, #16]
 8004bc6:	bf08      	it	eq
 8004bc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	bfc4      	itt	gt
 8004bd0:	1a9b      	subgt	r3, r3, r2
 8004bd2:	18ed      	addgt	r5, r5, r3
 8004bd4:	341a      	adds	r4, #26
 8004bd6:	454d      	cmp	r5, r9
 8004bd8:	d11a      	bne.n	8004c10 <_printf_common+0xd8>
 8004bda:	2000      	movs	r0, #0
 8004bdc:	e008      	b.n	8004bf0 <_printf_common+0xb8>
 8004bde:	2301      	movs	r3, #1
 8004be0:	4652      	mov	r2, sl
 8004be2:	4639      	mov	r1, r7
 8004be4:	4630      	mov	r0, r6
 8004be6:	47c0      	blx	r8
 8004be8:	3001      	adds	r0, #1
 8004bea:	d103      	bne.n	8004bf4 <_printf_common+0xbc>
 8004bec:	f04f 30ff 	mov.w	r0, #4294967295
 8004bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bf4:	3501      	adds	r5, #1
 8004bf6:	e7c2      	b.n	8004b7e <_printf_common+0x46>
 8004bf8:	2030      	movs	r0, #48	; 0x30
 8004bfa:	18e1      	adds	r1, r4, r3
 8004bfc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c00:	1c5a      	adds	r2, r3, #1
 8004c02:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c06:	4422      	add	r2, r4
 8004c08:	3302      	adds	r3, #2
 8004c0a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c0e:	e7c4      	b.n	8004b9a <_printf_common+0x62>
 8004c10:	2301      	movs	r3, #1
 8004c12:	4622      	mov	r2, r4
 8004c14:	4639      	mov	r1, r7
 8004c16:	4630      	mov	r0, r6
 8004c18:	47c0      	blx	r8
 8004c1a:	3001      	adds	r0, #1
 8004c1c:	d0e6      	beq.n	8004bec <_printf_common+0xb4>
 8004c1e:	f109 0901 	add.w	r9, r9, #1
 8004c22:	e7d8      	b.n	8004bd6 <_printf_common+0x9e>

08004c24 <_printf_i>:
 8004c24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004c28:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004c2c:	460c      	mov	r4, r1
 8004c2e:	7e09      	ldrb	r1, [r1, #24]
 8004c30:	b085      	sub	sp, #20
 8004c32:	296e      	cmp	r1, #110	; 0x6e
 8004c34:	4617      	mov	r7, r2
 8004c36:	4606      	mov	r6, r0
 8004c38:	4698      	mov	r8, r3
 8004c3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004c3c:	f000 80b3 	beq.w	8004da6 <_printf_i+0x182>
 8004c40:	d822      	bhi.n	8004c88 <_printf_i+0x64>
 8004c42:	2963      	cmp	r1, #99	; 0x63
 8004c44:	d036      	beq.n	8004cb4 <_printf_i+0x90>
 8004c46:	d80a      	bhi.n	8004c5e <_printf_i+0x3a>
 8004c48:	2900      	cmp	r1, #0
 8004c4a:	f000 80b9 	beq.w	8004dc0 <_printf_i+0x19c>
 8004c4e:	2958      	cmp	r1, #88	; 0x58
 8004c50:	f000 8083 	beq.w	8004d5a <_printf_i+0x136>
 8004c54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c58:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004c5c:	e032      	b.n	8004cc4 <_printf_i+0xa0>
 8004c5e:	2964      	cmp	r1, #100	; 0x64
 8004c60:	d001      	beq.n	8004c66 <_printf_i+0x42>
 8004c62:	2969      	cmp	r1, #105	; 0x69
 8004c64:	d1f6      	bne.n	8004c54 <_printf_i+0x30>
 8004c66:	6820      	ldr	r0, [r4, #0]
 8004c68:	6813      	ldr	r3, [r2, #0]
 8004c6a:	0605      	lsls	r5, r0, #24
 8004c6c:	f103 0104 	add.w	r1, r3, #4
 8004c70:	d52a      	bpl.n	8004cc8 <_printf_i+0xa4>
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	6011      	str	r1, [r2, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	da03      	bge.n	8004c82 <_printf_i+0x5e>
 8004c7a:	222d      	movs	r2, #45	; 0x2d
 8004c7c:	425b      	negs	r3, r3
 8004c7e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004c82:	486f      	ldr	r0, [pc, #444]	; (8004e40 <_printf_i+0x21c>)
 8004c84:	220a      	movs	r2, #10
 8004c86:	e039      	b.n	8004cfc <_printf_i+0xd8>
 8004c88:	2973      	cmp	r1, #115	; 0x73
 8004c8a:	f000 809d 	beq.w	8004dc8 <_printf_i+0x1a4>
 8004c8e:	d808      	bhi.n	8004ca2 <_printf_i+0x7e>
 8004c90:	296f      	cmp	r1, #111	; 0x6f
 8004c92:	d020      	beq.n	8004cd6 <_printf_i+0xb2>
 8004c94:	2970      	cmp	r1, #112	; 0x70
 8004c96:	d1dd      	bne.n	8004c54 <_printf_i+0x30>
 8004c98:	6823      	ldr	r3, [r4, #0]
 8004c9a:	f043 0320 	orr.w	r3, r3, #32
 8004c9e:	6023      	str	r3, [r4, #0]
 8004ca0:	e003      	b.n	8004caa <_printf_i+0x86>
 8004ca2:	2975      	cmp	r1, #117	; 0x75
 8004ca4:	d017      	beq.n	8004cd6 <_printf_i+0xb2>
 8004ca6:	2978      	cmp	r1, #120	; 0x78
 8004ca8:	d1d4      	bne.n	8004c54 <_printf_i+0x30>
 8004caa:	2378      	movs	r3, #120	; 0x78
 8004cac:	4865      	ldr	r0, [pc, #404]	; (8004e44 <_printf_i+0x220>)
 8004cae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004cb2:	e055      	b.n	8004d60 <_printf_i+0x13c>
 8004cb4:	6813      	ldr	r3, [r2, #0]
 8004cb6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cba:	1d19      	adds	r1, r3, #4
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6011      	str	r1, [r2, #0]
 8004cc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e08c      	b.n	8004de2 <_printf_i+0x1be>
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004cce:	6011      	str	r1, [r2, #0]
 8004cd0:	bf18      	it	ne
 8004cd2:	b21b      	sxthne	r3, r3
 8004cd4:	e7cf      	b.n	8004c76 <_printf_i+0x52>
 8004cd6:	6813      	ldr	r3, [r2, #0]
 8004cd8:	6825      	ldr	r5, [r4, #0]
 8004cda:	1d18      	adds	r0, r3, #4
 8004cdc:	6010      	str	r0, [r2, #0]
 8004cde:	0628      	lsls	r0, r5, #24
 8004ce0:	d501      	bpl.n	8004ce6 <_printf_i+0xc2>
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	e002      	b.n	8004cec <_printf_i+0xc8>
 8004ce6:	0668      	lsls	r0, r5, #25
 8004ce8:	d5fb      	bpl.n	8004ce2 <_printf_i+0xbe>
 8004cea:	881b      	ldrh	r3, [r3, #0]
 8004cec:	296f      	cmp	r1, #111	; 0x6f
 8004cee:	bf14      	ite	ne
 8004cf0:	220a      	movne	r2, #10
 8004cf2:	2208      	moveq	r2, #8
 8004cf4:	4852      	ldr	r0, [pc, #328]	; (8004e40 <_printf_i+0x21c>)
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004cfc:	6865      	ldr	r5, [r4, #4]
 8004cfe:	2d00      	cmp	r5, #0
 8004d00:	60a5      	str	r5, [r4, #8]
 8004d02:	f2c0 8095 	blt.w	8004e30 <_printf_i+0x20c>
 8004d06:	6821      	ldr	r1, [r4, #0]
 8004d08:	f021 0104 	bic.w	r1, r1, #4
 8004d0c:	6021      	str	r1, [r4, #0]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d13d      	bne.n	8004d8e <_printf_i+0x16a>
 8004d12:	2d00      	cmp	r5, #0
 8004d14:	f040 808e 	bne.w	8004e34 <_printf_i+0x210>
 8004d18:	4665      	mov	r5, ip
 8004d1a:	2a08      	cmp	r2, #8
 8004d1c:	d10b      	bne.n	8004d36 <_printf_i+0x112>
 8004d1e:	6823      	ldr	r3, [r4, #0]
 8004d20:	07db      	lsls	r3, r3, #31
 8004d22:	d508      	bpl.n	8004d36 <_printf_i+0x112>
 8004d24:	6923      	ldr	r3, [r4, #16]
 8004d26:	6862      	ldr	r2, [r4, #4]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	bfde      	ittt	le
 8004d2c:	2330      	movle	r3, #48	; 0x30
 8004d2e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d32:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d36:	ebac 0305 	sub.w	r3, ip, r5
 8004d3a:	6123      	str	r3, [r4, #16]
 8004d3c:	f8cd 8000 	str.w	r8, [sp]
 8004d40:	463b      	mov	r3, r7
 8004d42:	aa03      	add	r2, sp, #12
 8004d44:	4621      	mov	r1, r4
 8004d46:	4630      	mov	r0, r6
 8004d48:	f7ff fef6 	bl	8004b38 <_printf_common>
 8004d4c:	3001      	adds	r0, #1
 8004d4e:	d14d      	bne.n	8004dec <_printf_i+0x1c8>
 8004d50:	f04f 30ff 	mov.w	r0, #4294967295
 8004d54:	b005      	add	sp, #20
 8004d56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d5a:	4839      	ldr	r0, [pc, #228]	; (8004e40 <_printf_i+0x21c>)
 8004d5c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004d60:	6813      	ldr	r3, [r2, #0]
 8004d62:	6821      	ldr	r1, [r4, #0]
 8004d64:	1d1d      	adds	r5, r3, #4
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	6015      	str	r5, [r2, #0]
 8004d6a:	060a      	lsls	r2, r1, #24
 8004d6c:	d50b      	bpl.n	8004d86 <_printf_i+0x162>
 8004d6e:	07ca      	lsls	r2, r1, #31
 8004d70:	bf44      	itt	mi
 8004d72:	f041 0120 	orrmi.w	r1, r1, #32
 8004d76:	6021      	strmi	r1, [r4, #0]
 8004d78:	b91b      	cbnz	r3, 8004d82 <_printf_i+0x15e>
 8004d7a:	6822      	ldr	r2, [r4, #0]
 8004d7c:	f022 0220 	bic.w	r2, r2, #32
 8004d80:	6022      	str	r2, [r4, #0]
 8004d82:	2210      	movs	r2, #16
 8004d84:	e7b7      	b.n	8004cf6 <_printf_i+0xd2>
 8004d86:	064d      	lsls	r5, r1, #25
 8004d88:	bf48      	it	mi
 8004d8a:	b29b      	uxthmi	r3, r3
 8004d8c:	e7ef      	b.n	8004d6e <_printf_i+0x14a>
 8004d8e:	4665      	mov	r5, ip
 8004d90:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d94:	fb02 3311 	mls	r3, r2, r1, r3
 8004d98:	5cc3      	ldrb	r3, [r0, r3]
 8004d9a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004d9e:	460b      	mov	r3, r1
 8004da0:	2900      	cmp	r1, #0
 8004da2:	d1f5      	bne.n	8004d90 <_printf_i+0x16c>
 8004da4:	e7b9      	b.n	8004d1a <_printf_i+0xf6>
 8004da6:	6813      	ldr	r3, [r2, #0]
 8004da8:	6825      	ldr	r5, [r4, #0]
 8004daa:	1d18      	adds	r0, r3, #4
 8004dac:	6961      	ldr	r1, [r4, #20]
 8004dae:	6010      	str	r0, [r2, #0]
 8004db0:	0628      	lsls	r0, r5, #24
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	d501      	bpl.n	8004dba <_printf_i+0x196>
 8004db6:	6019      	str	r1, [r3, #0]
 8004db8:	e002      	b.n	8004dc0 <_printf_i+0x19c>
 8004dba:	066a      	lsls	r2, r5, #25
 8004dbc:	d5fb      	bpl.n	8004db6 <_printf_i+0x192>
 8004dbe:	8019      	strh	r1, [r3, #0]
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	4665      	mov	r5, ip
 8004dc4:	6123      	str	r3, [r4, #16]
 8004dc6:	e7b9      	b.n	8004d3c <_printf_i+0x118>
 8004dc8:	6813      	ldr	r3, [r2, #0]
 8004dca:	1d19      	adds	r1, r3, #4
 8004dcc:	6011      	str	r1, [r2, #0]
 8004dce:	681d      	ldr	r5, [r3, #0]
 8004dd0:	6862      	ldr	r2, [r4, #4]
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	4628      	mov	r0, r5
 8004dd6:	f000 f847 	bl	8004e68 <memchr>
 8004dda:	b108      	cbz	r0, 8004de0 <_printf_i+0x1bc>
 8004ddc:	1b40      	subs	r0, r0, r5
 8004dde:	6060      	str	r0, [r4, #4]
 8004de0:	6863      	ldr	r3, [r4, #4]
 8004de2:	6123      	str	r3, [r4, #16]
 8004de4:	2300      	movs	r3, #0
 8004de6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dea:	e7a7      	b.n	8004d3c <_printf_i+0x118>
 8004dec:	6923      	ldr	r3, [r4, #16]
 8004dee:	462a      	mov	r2, r5
 8004df0:	4639      	mov	r1, r7
 8004df2:	4630      	mov	r0, r6
 8004df4:	47c0      	blx	r8
 8004df6:	3001      	adds	r0, #1
 8004df8:	d0aa      	beq.n	8004d50 <_printf_i+0x12c>
 8004dfa:	6823      	ldr	r3, [r4, #0]
 8004dfc:	079b      	lsls	r3, r3, #30
 8004dfe:	d413      	bmi.n	8004e28 <_printf_i+0x204>
 8004e00:	68e0      	ldr	r0, [r4, #12]
 8004e02:	9b03      	ldr	r3, [sp, #12]
 8004e04:	4298      	cmp	r0, r3
 8004e06:	bfb8      	it	lt
 8004e08:	4618      	movlt	r0, r3
 8004e0a:	e7a3      	b.n	8004d54 <_printf_i+0x130>
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	464a      	mov	r2, r9
 8004e10:	4639      	mov	r1, r7
 8004e12:	4630      	mov	r0, r6
 8004e14:	47c0      	blx	r8
 8004e16:	3001      	adds	r0, #1
 8004e18:	d09a      	beq.n	8004d50 <_printf_i+0x12c>
 8004e1a:	3501      	adds	r5, #1
 8004e1c:	68e3      	ldr	r3, [r4, #12]
 8004e1e:	9a03      	ldr	r2, [sp, #12]
 8004e20:	1a9b      	subs	r3, r3, r2
 8004e22:	42ab      	cmp	r3, r5
 8004e24:	dcf2      	bgt.n	8004e0c <_printf_i+0x1e8>
 8004e26:	e7eb      	b.n	8004e00 <_printf_i+0x1dc>
 8004e28:	2500      	movs	r5, #0
 8004e2a:	f104 0919 	add.w	r9, r4, #25
 8004e2e:	e7f5      	b.n	8004e1c <_printf_i+0x1f8>
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1ac      	bne.n	8004d8e <_printf_i+0x16a>
 8004e34:	7803      	ldrb	r3, [r0, #0]
 8004e36:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e3a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e3e:	e76c      	b.n	8004d1a <_printf_i+0xf6>
 8004e40:	08005181 	.word	0x08005181
 8004e44:	08005192 	.word	0x08005192

08004e48 <_sbrk_r>:
 8004e48:	b538      	push	{r3, r4, r5, lr}
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	4c05      	ldr	r4, [pc, #20]	; (8004e64 <_sbrk_r+0x1c>)
 8004e4e:	4605      	mov	r5, r0
 8004e50:	4608      	mov	r0, r1
 8004e52:	6023      	str	r3, [r4, #0]
 8004e54:	f7fb fda2 	bl	800099c <_sbrk>
 8004e58:	1c43      	adds	r3, r0, #1
 8004e5a:	d102      	bne.n	8004e62 <_sbrk_r+0x1a>
 8004e5c:	6823      	ldr	r3, [r4, #0]
 8004e5e:	b103      	cbz	r3, 8004e62 <_sbrk_r+0x1a>
 8004e60:	602b      	str	r3, [r5, #0]
 8004e62:	bd38      	pop	{r3, r4, r5, pc}
 8004e64:	20001c04 	.word	0x20001c04

08004e68 <memchr>:
 8004e68:	b510      	push	{r4, lr}
 8004e6a:	b2c9      	uxtb	r1, r1
 8004e6c:	4402      	add	r2, r0
 8004e6e:	4290      	cmp	r0, r2
 8004e70:	4603      	mov	r3, r0
 8004e72:	d101      	bne.n	8004e78 <memchr+0x10>
 8004e74:	2300      	movs	r3, #0
 8004e76:	e003      	b.n	8004e80 <memchr+0x18>
 8004e78:	781c      	ldrb	r4, [r3, #0]
 8004e7a:	3001      	adds	r0, #1
 8004e7c:	428c      	cmp	r4, r1
 8004e7e:	d1f6      	bne.n	8004e6e <memchr+0x6>
 8004e80:	4618      	mov	r0, r3
 8004e82:	bd10      	pop	{r4, pc}

08004e84 <memmove>:
 8004e84:	4288      	cmp	r0, r1
 8004e86:	b510      	push	{r4, lr}
 8004e88:	eb01 0302 	add.w	r3, r1, r2
 8004e8c:	d807      	bhi.n	8004e9e <memmove+0x1a>
 8004e8e:	1e42      	subs	r2, r0, #1
 8004e90:	4299      	cmp	r1, r3
 8004e92:	d00a      	beq.n	8004eaa <memmove+0x26>
 8004e94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e98:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004e9c:	e7f8      	b.n	8004e90 <memmove+0xc>
 8004e9e:	4283      	cmp	r3, r0
 8004ea0:	d9f5      	bls.n	8004e8e <memmove+0xa>
 8004ea2:	1881      	adds	r1, r0, r2
 8004ea4:	1ad2      	subs	r2, r2, r3
 8004ea6:	42d3      	cmn	r3, r2
 8004ea8:	d100      	bne.n	8004eac <memmove+0x28>
 8004eaa:	bd10      	pop	{r4, pc}
 8004eac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004eb0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004eb4:	e7f7      	b.n	8004ea6 <memmove+0x22>

08004eb6 <__malloc_lock>:
 8004eb6:	4770      	bx	lr

08004eb8 <__malloc_unlock>:
 8004eb8:	4770      	bx	lr

08004eba <_realloc_r>:
 8004eba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ebc:	4607      	mov	r7, r0
 8004ebe:	4614      	mov	r4, r2
 8004ec0:	460e      	mov	r6, r1
 8004ec2:	b921      	cbnz	r1, 8004ece <_realloc_r+0x14>
 8004ec4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004ec8:	4611      	mov	r1, r2
 8004eca:	f7ff bc89 	b.w	80047e0 <_malloc_r>
 8004ece:	b922      	cbnz	r2, 8004eda <_realloc_r+0x20>
 8004ed0:	f7ff fc3a 	bl	8004748 <_free_r>
 8004ed4:	4625      	mov	r5, r4
 8004ed6:	4628      	mov	r0, r5
 8004ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004eda:	f000 f814 	bl	8004f06 <_malloc_usable_size_r>
 8004ede:	42a0      	cmp	r0, r4
 8004ee0:	d20f      	bcs.n	8004f02 <_realloc_r+0x48>
 8004ee2:	4621      	mov	r1, r4
 8004ee4:	4638      	mov	r0, r7
 8004ee6:	f7ff fc7b 	bl	80047e0 <_malloc_r>
 8004eea:	4605      	mov	r5, r0
 8004eec:	2800      	cmp	r0, #0
 8004eee:	d0f2      	beq.n	8004ed6 <_realloc_r+0x1c>
 8004ef0:	4631      	mov	r1, r6
 8004ef2:	4622      	mov	r2, r4
 8004ef4:	f7ff fbec 	bl	80046d0 <memcpy>
 8004ef8:	4631      	mov	r1, r6
 8004efa:	4638      	mov	r0, r7
 8004efc:	f7ff fc24 	bl	8004748 <_free_r>
 8004f00:	e7e9      	b.n	8004ed6 <_realloc_r+0x1c>
 8004f02:	4635      	mov	r5, r6
 8004f04:	e7e7      	b.n	8004ed6 <_realloc_r+0x1c>

08004f06 <_malloc_usable_size_r>:
 8004f06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f0a:	1f18      	subs	r0, r3, #4
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	bfbc      	itt	lt
 8004f10:	580b      	ldrlt	r3, [r1, r0]
 8004f12:	18c0      	addlt	r0, r0, r3
 8004f14:	4770      	bx	lr
	...

08004f18 <_init>:
 8004f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f1a:	bf00      	nop
 8004f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f1e:	bc08      	pop	{r3}
 8004f20:	469e      	mov	lr, r3
 8004f22:	4770      	bx	lr

08004f24 <_fini>:
 8004f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f26:	bf00      	nop
 8004f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f2a:	bc08      	pop	{r3}
 8004f2c:	469e      	mov	lr, r3
 8004f2e:	4770      	bx	lr
