
[RTOS]Software_Timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ee0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  08004ff0  08004ff0  00014ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005280  08005280  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005280  08005280  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005280  08005280  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005280  08005280  00015280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005284  08005284  00015284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005288  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b94  20000074  080052fc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c08  080052fc  00021c08  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013bcb  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002926  00000000  00000000  00033c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d70  00000000  00000000  00036590  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c48  00000000  00000000  00037300  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003e2e  00000000  00000000  00037f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dc41  00000000  00000000  0003bd76  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00074c34  00000000  00000000  000499b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000be5eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000398c  00000000  00000000  000be668  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08004fd8 	.word	0x08004fd8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08004fd8 	.word	0x08004fd8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000162:	b08f      	sub	sp, #60	; 0x3c
 8000164:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000166:	f000 fd11 	bl	8000b8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800016a:	f000 f997 	bl	800049c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016e:	f000 fa05 	bl	800057c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000172:	f000 f9d9 	bl	8000528 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  offAllLed;
 8000176:	2201      	movs	r2, #1
 8000178:	2120      	movs	r1, #32
 800017a:	48b1      	ldr	r0, [pc, #708]	; (8000440 <main+0x2e0>)
 800017c:	f000 ffa6 	bl	80010cc <HAL_GPIO_WritePin>
 8000180:	2201      	movs	r2, #1
 8000182:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000186:	48af      	ldr	r0, [pc, #700]	; (8000444 <main+0x2e4>)
 8000188:	f000 ffa0 	bl	80010cc <HAL_GPIO_WritePin>
 800018c:	2201      	movs	r2, #1
 800018e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000192:	48ac      	ldr	r0, [pc, #688]	; (8000444 <main+0x2e4>)
 8000194:	f000 ff9a 	bl	80010cc <HAL_GPIO_WritePin>
 8000198:	2201      	movs	r2, #1
 800019a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800019e:	48a8      	ldr	r0, [pc, #672]	; (8000440 <main+0x2e0>)
 80001a0:	f000 ff94 	bl	80010cc <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001a4:	f001 fde8 	bl	8001d78 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of PeriodicTimer1 */
  PeriodicTimer1Handle = xTimerCreate("PeriodicTimer1", PERIOD_TIMER_1,
 80001a8:	4ba7      	ldr	r3, [pc, #668]	; (8000448 <main+0x2e8>)
 80001aa:	9300      	str	r3, [sp, #0]
 80001ac:	2300      	movs	r3, #0
 80001ae:	2201      	movs	r2, #1
 80001b0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80001b4:	48a5      	ldr	r0, [pc, #660]	; (800044c <main+0x2ec>)
 80001b6:	f003 fbfd 	bl	80039b4 <xTimerCreate>
 80001ba:	4602      	mov	r2, r0
 80001bc:	4ba4      	ldr	r3, [pc, #656]	; (8000450 <main+0x2f0>)
 80001be:	601a      	str	r2, [r3, #0]
                                      pdTRUE, 0, timer1Callback);
  PeriodicTimer2Handle = xTimerCreate("PeriodicTimer2", PERIOD_TIMER_2,
 80001c0:	4ba4      	ldr	r3, [pc, #656]	; (8000454 <main+0x2f4>)
 80001c2:	9300      	str	r3, [sp, #0]
 80001c4:	2300      	movs	r3, #0
 80001c6:	2201      	movs	r2, #1
 80001c8:	2132      	movs	r1, #50	; 0x32
 80001ca:	48a3      	ldr	r0, [pc, #652]	; (8000458 <main+0x2f8>)
 80001cc:	f003 fbf2 	bl	80039b4 <xTimerCreate>
 80001d0:	4602      	mov	r2, r0
 80001d2:	4ba2      	ldr	r3, [pc, #648]	; (800045c <main+0x2fc>)
 80001d4:	601a      	str	r2, [r3, #0]
                                      pdTRUE, 0, timer2Callback);
  OneShotTimer3Handle = xTimerCreate("OneShotTimer3", ONESHOT_TIMER_3,
 80001d6:	4ba2      	ldr	r3, [pc, #648]	; (8000460 <main+0x300>)
 80001d8:	9300      	str	r3, [sp, #0]
 80001da:	2300      	movs	r3, #0
 80001dc:	2200      	movs	r2, #0
 80001de:	f640 5105 	movw	r1, #3333	; 0xd05
 80001e2:	48a0      	ldr	r0, [pc, #640]	; (8000464 <main+0x304>)
 80001e4:	f003 fbe6 	bl	80039b4 <xTimerCreate>
 80001e8:	4602      	mov	r2, r0
 80001ea:	4b9f      	ldr	r3, [pc, #636]	; (8000468 <main+0x308>)
 80001ec:	601a      	str	r2, [r3, #0]
                                     pdFALSE, 0, timer3Callback);
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  if ((PeriodicTimer1Handle == NULL) || (PeriodicTimer2Handle == NULL) || (OneShotTimer3Handle == NULL))
 80001ee:	4b98      	ldr	r3, [pc, #608]	; (8000450 <main+0x2f0>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d007      	beq.n	8000206 <main+0xa6>
 80001f6:	4b99      	ldr	r3, [pc, #612]	; (800045c <main+0x2fc>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d003      	beq.n	8000206 <main+0xa6>
 80001fe:	4b9a      	ldr	r3, [pc, #616]	; (8000468 <main+0x308>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	2b00      	cmp	r3, #0
 8000204:	d136      	bne.n	8000274 <main+0x114>
  {
    error_count++;
 8000206:	4b99      	ldr	r3, [pc, #612]	; (800046c <main+0x30c>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	3301      	adds	r3, #1
 800020c:	4a97      	ldr	r2, [pc, #604]	; (800046c <main+0x30c>)
 800020e:	6013      	str	r3, [r2, #0]
    PRINTF("Failed to initialize software timers\r\n");
 8000210:	2264      	movs	r2, #100	; 0x64
 8000212:	2100      	movs	r1, #0
 8000214:	4896      	ldr	r0, [pc, #600]	; (8000470 <main+0x310>)
 8000216:	f004 face 	bl	80047b6 <memset>
 800021a:	4b95      	ldr	r3, [pc, #596]	; (8000470 <main+0x310>)
 800021c:	4a95      	ldr	r2, [pc, #596]	; (8000474 <main+0x314>)
 800021e:	4614      	mov	r4, r2
 8000220:	469c      	mov	ip, r3
 8000222:	f104 0e20 	add.w	lr, r4, #32
 8000226:	4665      	mov	r5, ip
 8000228:	4626      	mov	r6, r4
 800022a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800022c:	6028      	str	r0, [r5, #0]
 800022e:	6069      	str	r1, [r5, #4]
 8000230:	60aa      	str	r2, [r5, #8]
 8000232:	60eb      	str	r3, [r5, #12]
 8000234:	3410      	adds	r4, #16
 8000236:	f10c 0c10 	add.w	ip, ip, #16
 800023a:	4574      	cmp	r4, lr
 800023c:	d1f3      	bne.n	8000226 <main+0xc6>
 800023e:	4663      	mov	r3, ip
 8000240:	4622      	mov	r2, r4
 8000242:	6810      	ldr	r0, [r2, #0]
 8000244:	6018      	str	r0, [r3, #0]
 8000246:	8891      	ldrh	r1, [r2, #4]
 8000248:	7992      	ldrb	r2, [r2, #6]
 800024a:	8099      	strh	r1, [r3, #4]
 800024c:	719a      	strb	r2, [r3, #6]
 800024e:	4e8a      	ldr	r6, [pc, #552]	; (8000478 <main+0x318>)
 8000250:	4b87      	ldr	r3, [pc, #540]	; (8000470 <main+0x310>)
 8000252:	930c      	str	r3, [sp, #48]	; 0x30
 8000254:	466d      	mov	r5, sp
 8000256:	f106 0410 	add.w	r4, r6, #16
 800025a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800025c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800025e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000260:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000262:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000266:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800026a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800026e:	f000 fb0b 	bl	8000888 <vUARTSend>
 8000272:	e023      	b.n	80002bc <main+0x15c>
  }
  else
  {
    /* Start software timers */
    xTimerStart(PeriodicTimer1Handle, 0);
 8000274:	4b76      	ldr	r3, [pc, #472]	; (8000450 <main+0x2f0>)
 8000276:	681c      	ldr	r4, [r3, #0]
 8000278:	f002 ff46 	bl	8003108 <xTaskGetTickCount>
 800027c:	4602      	mov	r2, r0
 800027e:	2300      	movs	r3, #0
 8000280:	9300      	str	r3, [sp, #0]
 8000282:	2300      	movs	r3, #0
 8000284:	2101      	movs	r1, #1
 8000286:	4620      	mov	r0, r4
 8000288:	f003 fbe6 	bl	8003a58 <xTimerGenericCommand>
    xTimerStart(PeriodicTimer2Handle, 0);
 800028c:	4b73      	ldr	r3, [pc, #460]	; (800045c <main+0x2fc>)
 800028e:	681c      	ldr	r4, [r3, #0]
 8000290:	f002 ff3a 	bl	8003108 <xTaskGetTickCount>
 8000294:	4602      	mov	r2, r0
 8000296:	2300      	movs	r3, #0
 8000298:	9300      	str	r3, [sp, #0]
 800029a:	2300      	movs	r3, #0
 800029c:	2101      	movs	r1, #1
 800029e:	4620      	mov	r0, r4
 80002a0:	f003 fbda 	bl	8003a58 <xTimerGenericCommand>
    xTimerStart(OneShotTimer3Handle, 0);
 80002a4:	4b70      	ldr	r3, [pc, #448]	; (8000468 <main+0x308>)
 80002a6:	681c      	ldr	r4, [r3, #0]
 80002a8:	f002 ff2e 	bl	8003108 <xTaskGetTickCount>
 80002ac:	4602      	mov	r2, r0
 80002ae:	2300      	movs	r3, #0
 80002b0:	9300      	str	r3, [sp, #0]
 80002b2:	2300      	movs	r3, #0
 80002b4:	2101      	movs	r1, #1
 80002b6:	4620      	mov	r0, r4
 80002b8:	f003 fbce 	bl	8003a58 <xTimerGenericCommand>
  }
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_THREADS */
  blinkLed1Handle = osThreadNew(blinkTask, NULL, &blinkLed1_attributes);
 80002bc:	4a6f      	ldr	r2, [pc, #444]	; (800047c <main+0x31c>)
 80002be:	2100      	movs	r1, #0
 80002c0:	486f      	ldr	r0, [pc, #444]	; (8000480 <main+0x320>)
 80002c2:	f001 fdbf 	bl	8001e44 <osThreadNew>
 80002c6:	4602      	mov	r2, r0
 80002c8:	4b6e      	ldr	r3, [pc, #440]	; (8000484 <main+0x324>)
 80002ca:	601a      	str	r2, [r3, #0]
  if (blinkLed1Handle == NULL)
 80002cc:	4b6d      	ldr	r3, [pc, #436]	; (8000484 <main+0x324>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d12a      	bne.n	800032a <main+0x1ca>
  {
    PRINTF("Failed to create user tasks\r\n");
 80002d4:	2264      	movs	r2, #100	; 0x64
 80002d6:	2100      	movs	r1, #0
 80002d8:	4865      	ldr	r0, [pc, #404]	; (8000470 <main+0x310>)
 80002da:	f004 fa6c 	bl	80047b6 <memset>
 80002de:	4a64      	ldr	r2, [pc, #400]	; (8000470 <main+0x310>)
 80002e0:	4b69      	ldr	r3, [pc, #420]	; (8000488 <main+0x328>)
 80002e2:	4615      	mov	r5, r2
 80002e4:	461c      	mov	r4, r3
 80002e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002e8:	6028      	str	r0, [r5, #0]
 80002ea:	6069      	str	r1, [r5, #4]
 80002ec:	60aa      	str	r2, [r5, #8]
 80002ee:	60eb      	str	r3, [r5, #12]
 80002f0:	cc07      	ldmia	r4!, {r0, r1, r2}
 80002f2:	6128      	str	r0, [r5, #16]
 80002f4:	6169      	str	r1, [r5, #20]
 80002f6:	61aa      	str	r2, [r5, #24]
 80002f8:	8823      	ldrh	r3, [r4, #0]
 80002fa:	83ab      	strh	r3, [r5, #28]
 80002fc:	4e5e      	ldr	r6, [pc, #376]	; (8000478 <main+0x318>)
 80002fe:	4b5c      	ldr	r3, [pc, #368]	; (8000470 <main+0x310>)
 8000300:	930c      	str	r3, [sp, #48]	; 0x30
 8000302:	466d      	mov	r5, sp
 8000304:	f106 0410 	add.w	r4, r6, #16
 8000308:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800030a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800030c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800030e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000310:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000314:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000318:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800031c:	f000 fab4 	bl	8000888 <vUARTSend>
    error_count++;
 8000320:	4b52      	ldr	r3, [pc, #328]	; (800046c <main+0x30c>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	3301      	adds	r3, #1
 8000326:	4a51      	ldr	r2, [pc, #324]	; (800046c <main+0x30c>)
 8000328:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END RTOS_THREADS */

  if (error_count == 0)
 800032a:	4b50      	ldr	r3, [pc, #320]	; (800046c <main+0x30c>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d15f      	bne.n	80003f2 <main+0x292>
  {
    PRINT_VAR(error_count);
 8000332:	2264      	movs	r2, #100	; 0x64
 8000334:	2100      	movs	r1, #0
 8000336:	484e      	ldr	r0, [pc, #312]	; (8000470 <main+0x310>)
 8000338:	f004 fa3d 	bl	80047b6 <memset>
 800033c:	4b4b      	ldr	r3, [pc, #300]	; (800046c <main+0x30c>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	461a      	mov	r2, r3
 8000342:	4952      	ldr	r1, [pc, #328]	; (800048c <main+0x32c>)
 8000344:	484a      	ldr	r0, [pc, #296]	; (8000470 <main+0x310>)
 8000346:	f004 fa3f 	bl	80047c8 <siprintf>
 800034a:	4e4b      	ldr	r6, [pc, #300]	; (8000478 <main+0x318>)
 800034c:	4b48      	ldr	r3, [pc, #288]	; (8000470 <main+0x310>)
 800034e:	930c      	str	r3, [sp, #48]	; 0x30
 8000350:	466d      	mov	r5, sp
 8000352:	f106 0410 	add.w	r4, r6, #16
 8000356:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000358:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800035a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800035c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800035e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000362:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000366:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800036a:	f000 fa8d 	bl	8000888 <vUARTSend>
 800036e:	2264      	movs	r2, #100	; 0x64
 8000370:	2100      	movs	r1, #0
 8000372:	483f      	ldr	r0, [pc, #252]	; (8000470 <main+0x310>)
 8000374:	f004 fa1f 	bl	80047b6 <memset>
 8000378:	4b3d      	ldr	r3, [pc, #244]	; (8000470 <main+0x310>)
 800037a:	4a45      	ldr	r2, [pc, #276]	; (8000490 <main+0x330>)
 800037c:	8811      	ldrh	r1, [r2, #0]
 800037e:	7892      	ldrb	r2, [r2, #2]
 8000380:	8019      	strh	r1, [r3, #0]
 8000382:	709a      	strb	r2, [r3, #2]
 8000384:	4e3c      	ldr	r6, [pc, #240]	; (8000478 <main+0x318>)
 8000386:	4b3a      	ldr	r3, [pc, #232]	; (8000470 <main+0x310>)
 8000388:	930c      	str	r3, [sp, #48]	; 0x30
 800038a:	466d      	mov	r5, sp
 800038c:	f106 0410 	add.w	r4, r6, #16
 8000390:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000392:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000394:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000396:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000398:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800039c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80003a0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80003a4:	f000 fa70 	bl	8000888 <vUARTSend>
    PRINTF("Start RTOS_Kernel\r\n");
 80003a8:	2264      	movs	r2, #100	; 0x64
 80003aa:	2100      	movs	r1, #0
 80003ac:	4830      	ldr	r0, [pc, #192]	; (8000470 <main+0x310>)
 80003ae:	f004 fa02 	bl	80047b6 <memset>
 80003b2:	4a2f      	ldr	r2, [pc, #188]	; (8000470 <main+0x310>)
 80003b4:	4b37      	ldr	r3, [pc, #220]	; (8000494 <main+0x334>)
 80003b6:	4615      	mov	r5, r2
 80003b8:	461c      	mov	r4, r3
 80003ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003bc:	6028      	str	r0, [r5, #0]
 80003be:	6069      	str	r1, [r5, #4]
 80003c0:	60aa      	str	r2, [r5, #8]
 80003c2:	60eb      	str	r3, [r5, #12]
 80003c4:	6820      	ldr	r0, [r4, #0]
 80003c6:	6128      	str	r0, [r5, #16]
 80003c8:	4e2b      	ldr	r6, [pc, #172]	; (8000478 <main+0x318>)
 80003ca:	4b29      	ldr	r3, [pc, #164]	; (8000470 <main+0x310>)
 80003cc:	930c      	str	r3, [sp, #48]	; 0x30
 80003ce:	466d      	mov	r5, sp
 80003d0:	f106 0410 	add.w	r4, r6, #16
 80003d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003dc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80003e0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80003e4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80003e8:	f000 fa4e 	bl	8000888 <vUARTSend>
    osKernelStart();
 80003ec:	f001 fcf6 	bl	8001ddc <osKernelStart>
 80003f0:	e025      	b.n	800043e <main+0x2de>
  }
  else
  {
    PRINTF("Failed to start RTOS_Kernel\r\n");
 80003f2:	2264      	movs	r2, #100	; 0x64
 80003f4:	2100      	movs	r1, #0
 80003f6:	481e      	ldr	r0, [pc, #120]	; (8000470 <main+0x310>)
 80003f8:	f004 f9dd 	bl	80047b6 <memset>
 80003fc:	4a1c      	ldr	r2, [pc, #112]	; (8000470 <main+0x310>)
 80003fe:	4b26      	ldr	r3, [pc, #152]	; (8000498 <main+0x338>)
 8000400:	4615      	mov	r5, r2
 8000402:	461c      	mov	r4, r3
 8000404:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000406:	6028      	str	r0, [r5, #0]
 8000408:	6069      	str	r1, [r5, #4]
 800040a:	60aa      	str	r2, [r5, #8]
 800040c:	60eb      	str	r3, [r5, #12]
 800040e:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000410:	6128      	str	r0, [r5, #16]
 8000412:	6169      	str	r1, [r5, #20]
 8000414:	61aa      	str	r2, [r5, #24]
 8000416:	8823      	ldrh	r3, [r4, #0]
 8000418:	83ab      	strh	r3, [r5, #28]
 800041a:	4e17      	ldr	r6, [pc, #92]	; (8000478 <main+0x318>)
 800041c:	4b14      	ldr	r3, [pc, #80]	; (8000470 <main+0x310>)
 800041e:	930c      	str	r3, [sp, #48]	; 0x30
 8000420:	466d      	mov	r5, sp
 8000422:	f106 0410 	add.w	r4, r6, #16
 8000426:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000428:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800042a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800042c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800042e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000432:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000436:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800043a:	f000 fa25 	bl	8000888 <vUARTSend>
  /* Start scheduler */

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800043e:	e7fe      	b.n	800043e <main+0x2de>
 8000440:	40010c00 	.word	0x40010c00
 8000444:	40010800 	.word	0x40010800
 8000448:	08000661 	.word	0x08000661
 800044c:	08004ffc 	.word	0x08004ffc
 8000450:	20001b74 	.word	0x20001b74
 8000454:	080006e9 	.word	0x080006e9
 8000458:	0800500c 	.word	0x0800500c
 800045c:	20001bb8 	.word	0x20001bb8
 8000460:	080007f9 	.word	0x080007f9
 8000464:	0800501c 	.word	0x0800501c
 8000468:	20001bbc 	.word	0x20001bbc
 800046c:	20000090 	.word	0x20000090
 8000470:	20001b0c 	.word	0x20001b0c
 8000474:	0800502c 	.word	0x0800502c
 8000478:	20001b78 	.word	0x20001b78
 800047c:	08005210 	.word	0x08005210
 8000480:	08000641 	.word	0x08000641
 8000484:	20001b70 	.word	0x20001b70
 8000488:	08005054 	.word	0x08005054
 800048c:	08005074 	.word	0x08005074
 8000490:	08005090 	.word	0x08005090
 8000494:	08005094 	.word	0x08005094
 8000498:	080050a8 	.word	0x080050a8

0800049c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b090      	sub	sp, #64	; 0x40
 80004a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004a2:	f107 0318 	add.w	r3, r7, #24
 80004a6:	2228      	movs	r2, #40	; 0x28
 80004a8:	2100      	movs	r1, #0
 80004aa:	4618      	mov	r0, r3
 80004ac:	f004 f983 	bl	80047b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004b0:	1d3b      	adds	r3, r7, #4
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
 80004b6:	605a      	str	r2, [r3, #4]
 80004b8:	609a      	str	r2, [r3, #8]
 80004ba:	60da      	str	r2, [r3, #12]
 80004bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004be:	2301      	movs	r3, #1
 80004c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004c8:	2300      	movs	r3, #0
 80004ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004cc:	2301      	movs	r3, #1
 80004ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004d0:	2302      	movs	r3, #2
 80004d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004da:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80004de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004e0:	f107 0318 	add.w	r3, r7, #24
 80004e4:	4618      	mov	r0, r3
 80004e6:	f000 fe21 	bl	800112c <HAL_RCC_OscConfig>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d001      	beq.n	80004f4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80004f0:	f000 f9c4 	bl	800087c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
     */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80004f4:	230f      	movs	r3, #15
 80004f6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004f8:	2302      	movs	r3, #2
 80004fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004fc:	2300      	movs	r3, #0
 80004fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000500:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000504:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000506:	2300      	movs	r3, #0
 8000508:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	2102      	movs	r1, #2
 800050e:	4618      	mov	r0, r3
 8000510:	f001 f88c 	bl	800162c <HAL_RCC_ClockConfig>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800051a:	f000 f9af 	bl	800087c <Error_Handler>
  }
}
 800051e:	bf00      	nop
 8000520:	3740      	adds	r7, #64	; 0x40
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
	...

08000528 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800052c:	4b11      	ldr	r3, [pc, #68]	; (8000574 <MX_USART2_UART_Init+0x4c>)
 800052e:	4a12      	ldr	r2, [pc, #72]	; (8000578 <MX_USART2_UART_Init+0x50>)
 8000530:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000532:	4b10      	ldr	r3, [pc, #64]	; (8000574 <MX_USART2_UART_Init+0x4c>)
 8000534:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000538:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800053a:	4b0e      	ldr	r3, [pc, #56]	; (8000574 <MX_USART2_UART_Init+0x4c>)
 800053c:	2200      	movs	r2, #0
 800053e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000540:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <MX_USART2_UART_Init+0x4c>)
 8000542:	2200      	movs	r2, #0
 8000544:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000546:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <MX_USART2_UART_Init+0x4c>)
 8000548:	2200      	movs	r2, #0
 800054a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800054c:	4b09      	ldr	r3, [pc, #36]	; (8000574 <MX_USART2_UART_Init+0x4c>)
 800054e:	220c      	movs	r2, #12
 8000550:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000552:	4b08      	ldr	r3, [pc, #32]	; (8000574 <MX_USART2_UART_Init+0x4c>)
 8000554:	2200      	movs	r2, #0
 8000556:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000558:	4b06      	ldr	r3, [pc, #24]	; (8000574 <MX_USART2_UART_Init+0x4c>)
 800055a:	2200      	movs	r2, #0
 800055c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800055e:	4805      	ldr	r0, [pc, #20]	; (8000574 <MX_USART2_UART_Init+0x4c>)
 8000560:	f001 fa00 	bl	8001964 <HAL_UART_Init>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800056a:	f000 f987 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	20001b78 	.word	0x20001b78
 8000578:	40004400 	.word	0x40004400

0800057c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b088      	sub	sp, #32
 8000580:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000582:	f107 0310 	add.w	r3, r7, #16
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000590:	4b28      	ldr	r3, [pc, #160]	; (8000634 <MX_GPIO_Init+0xb8>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	4a27      	ldr	r2, [pc, #156]	; (8000634 <MX_GPIO_Init+0xb8>)
 8000596:	f043 0320 	orr.w	r3, r3, #32
 800059a:	6193      	str	r3, [r2, #24]
 800059c:	4b25      	ldr	r3, [pc, #148]	; (8000634 <MX_GPIO_Init+0xb8>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	f003 0320 	and.w	r3, r3, #32
 80005a4:	60fb      	str	r3, [r7, #12]
 80005a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a8:	4b22      	ldr	r3, [pc, #136]	; (8000634 <MX_GPIO_Init+0xb8>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	4a21      	ldr	r2, [pc, #132]	; (8000634 <MX_GPIO_Init+0xb8>)
 80005ae:	f043 0304 	orr.w	r3, r3, #4
 80005b2:	6193      	str	r3, [r2, #24]
 80005b4:	4b1f      	ldr	r3, [pc, #124]	; (8000634 <MX_GPIO_Init+0xb8>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	f003 0304 	and.w	r3, r3, #4
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c0:	4b1c      	ldr	r3, [pc, #112]	; (8000634 <MX_GPIO_Init+0xb8>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	4a1b      	ldr	r2, [pc, #108]	; (8000634 <MX_GPIO_Init+0xb8>)
 80005c6:	f043 0308 	orr.w	r3, r3, #8
 80005ca:	6193      	str	r3, [r2, #24]
 80005cc:	4b19      	ldr	r3, [pc, #100]	; (8000634 <MX_GPIO_Init+0xb8>)
 80005ce:	699b      	ldr	r3, [r3, #24]
 80005d0:	f003 0308 	and.w	r3, r3, #8
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12,
 80005d8:	2200      	movs	r2, #0
 80005da:	f44f 51c1 	mov.w	r1, #6176	; 0x1820
 80005de:	4816      	ldr	r0, [pc, #88]	; (8000638 <MX_GPIO_Init+0xbc>)
 80005e0:	f000 fd74 	bl	80010cc <HAL_GPIO_WritePin>
                    GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80005e4:	2200      	movs	r2, #0
 80005e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ea:	4814      	ldr	r0, [pc, #80]	; (800063c <MX_GPIO_Init+0xc0>)
 80005ec:	f000 fd6e 	bl	80010cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12;
 80005f0:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 80005f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f6:	2301      	movs	r3, #1
 80005f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fe:	2302      	movs	r3, #2
 8000600:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000602:	f107 0310 	add.w	r3, r7, #16
 8000606:	4619      	mov	r1, r3
 8000608:	480b      	ldr	r0, [pc, #44]	; (8000638 <MX_GPIO_Init+0xbc>)
 800060a:	f000 fc05 	bl	8000e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800060e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000612:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000614:	2301      	movs	r3, #1
 8000616:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	2300      	movs	r3, #0
 800061a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061c:	2302      	movs	r3, #2
 800061e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000620:	f107 0310 	add.w	r3, r7, #16
 8000624:	4619      	mov	r1, r3
 8000626:	4805      	ldr	r0, [pc, #20]	; (800063c <MX_GPIO_Init+0xc0>)
 8000628:	f000 fbf6 	bl	8000e18 <HAL_GPIO_Init>
}
 800062c:	bf00      	nop
 800062e:	3720      	adds	r7, #32
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40021000 	.word	0x40021000
 8000638:	40010800 	.word	0x40010800
 800063c:	40010c00 	.word	0x40010c00

08000640 <blinkTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_blinkTask */
void blinkTask(void *argument)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blinkTask */
  /* Infinite loop */
  for (;;)
  {
    toggleLed4;
 8000648:	f44f 7180 	mov.w	r1, #256	; 0x100
 800064c:	4803      	ldr	r0, [pc, #12]	; (800065c <blinkTask+0x1c>)
 800064e:	f000 fd55 	bl	80010fc <HAL_GPIO_TogglePin>
    osDelay(1000);
 8000652:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000656:	f001 fc9f 	bl	8001f98 <osDelay>
    toggleLed4;
 800065a:	e7f5      	b.n	8000648 <blinkTask+0x8>
 800065c:	40010c00 	.word	0x40010c00

08000660 <timer1Callback>:
  /* USER CODE END blinkTask */
}

/* timer1Callback function */
void timer1Callback(void *argument)
{
 8000660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000662:	b093      	sub	sp, #76	; 0x4c
 8000664:	af0e      	add	r7, sp, #56	; 0x38
 8000666:	6078      	str	r0, [r7, #4]
  TickType_t tick_now;
  /* Obtain current tick count */
  newline;
 8000668:	4e1b      	ldr	r6, [pc, #108]	; (80006d8 <timer1Callback+0x78>)
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <timer1Callback+0x7c>)
 800066c:	930c      	str	r3, [sp, #48]	; 0x30
 800066e:	466d      	mov	r5, sp
 8000670:	f106 0410 	add.w	r4, r6, #16
 8000674:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000676:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000678:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800067a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800067c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000680:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000684:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000688:	f000 f8fe 	bl	8000888 <vUARTSend>
  tick_now = xTaskGetTickCount();
 800068c:	f002 fd3c 	bl	8003108 <xTaskGetTickCount>
 8000690:	60f8      	str	r0, [r7, #12]
  memset(main_string, 0, sizeof(main_string));
 8000692:	2264      	movs	r2, #100	; 0x64
 8000694:	2100      	movs	r1, #0
 8000696:	4812      	ldr	r0, [pc, #72]	; (80006e0 <timer1Callback+0x80>)
 8000698:	f004 f88d 	bl	80047b6 <memset>
  sprintf(main_string,
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006a2:	4910      	ldr	r1, [pc, #64]	; (80006e4 <timer1Callback+0x84>)
 80006a4:	480e      	ldr	r0, [pc, #56]	; (80006e0 <timer1Callback+0x80>)
 80006a6:	f004 f88f 	bl	80047c8 <siprintf>
          "SW_Periodic_Timer_1 executes every %lums - tick_count = %lu\r\n",
          PERIOD_TIMER_1, tick_now);
  vUARTSend(DEBUG_USART, (uint8_t *)main_string);
 80006aa:	4e0b      	ldr	r6, [pc, #44]	; (80006d8 <timer1Callback+0x78>)
 80006ac:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <timer1Callback+0x80>)
 80006ae:	930c      	str	r3, [sp, #48]	; 0x30
 80006b0:	466d      	mov	r5, sp
 80006b2:	f106 0410 	add.w	r4, r6, #16
 80006b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006be:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80006c2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80006c6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80006ca:	f000 f8dd 	bl	8000888 <vUARTSend>
  //  PRINTF(main_string);
  // PRINT_IN_SWTIMER((void *)TIMER_1_ID, main_string);
}
 80006ce:	bf00      	nop
 80006d0:	3714      	adds	r7, #20
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20001b78 	.word	0x20001b78
 80006dc:	08005090 	.word	0x08005090
 80006e0:	20001aa8 	.word	0x20001aa8
 80006e4:	080050c8 	.word	0x080050c8

080006e8 <timer2Callback>:

/* timer2Callback function */
void timer2Callback(void *argument)
{
 80006e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ea:	b095      	sub	sp, #84	; 0x54
 80006ec:	af0e      	add	r7, sp, #56	; 0x38
 80006ee:	6078      	str	r0, [r7, #4]
  TickType_t tick_now;
  uint32_t timer2_freq = PERIOD_TIMER_2;
 80006f0:	2332      	movs	r3, #50	; 0x32
 80006f2:	617b      	str	r3, [r7, #20]
  /* Count number of time Timer2 has expired */
  uint32_t timer2_expired_count = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	613b      	str	r3, [r7, #16]

  newline;
 80006f8:	4e37      	ldr	r6, [pc, #220]	; (80007d8 <timer2Callback+0xf0>)
 80006fa:	4b38      	ldr	r3, [pc, #224]	; (80007dc <timer2Callback+0xf4>)
 80006fc:	930c      	str	r3, [sp, #48]	; 0x30
 80006fe:	466d      	mov	r5, sp
 8000700:	f106 0410 	add.w	r4, r6, #16
 8000704:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000706:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000708:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800070a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800070c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000710:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000714:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000718:	f000 f8b6 	bl	8000888 <vUARTSend>
  ++timer2_expired_count;
 800071c:	693b      	ldr	r3, [r7, #16]
 800071e:	3301      	adds	r3, #1
 8000720:	613b      	str	r3, [r7, #16]
  /* Obtain current tick count */
  tick_now = xTaskGetTickCount();
 8000722:	f002 fcf1 	bl	8003108 <xTaskGetTickCount>
 8000726:	60f8      	str	r0, [r7, #12]

  /* Reset GeneralString to NULL */
  memset(main_string, 0, sizeof(main_string));
 8000728:	2264      	movs	r2, #100	; 0x64
 800072a:	2100      	movs	r1, #0
 800072c:	482c      	ldr	r0, [pc, #176]	; (80007e0 <timer2Callback+0xf8>)
 800072e:	f004 f842 	bl	80047b6 <memset>
  sprintf(main_string,
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	697a      	ldr	r2, [r7, #20]
 8000736:	492b      	ldr	r1, [pc, #172]	; (80007e4 <timer2Callback+0xfc>)
 8000738:	4829      	ldr	r0, [pc, #164]	; (80007e0 <timer2Callback+0xf8>)
 800073a:	f004 f845 	bl	80047c8 <siprintf>
          "\r\nSW_Periodic_Timer_2 has fre = %lums - tick_count = %lu\r\n",
          timer2_freq, tick_now);
  // PRINT_IN_SWTIMER((void *)TIMER_2_ID, main_string);
  // PRINTF(main_string);
  vUARTSend(DEBUG_USART, (uint8_t *)main_string);
 800073e:	4e26      	ldr	r6, [pc, #152]	; (80007d8 <timer2Callback+0xf0>)
 8000740:	4b27      	ldr	r3, [pc, #156]	; (80007e0 <timer2Callback+0xf8>)
 8000742:	930c      	str	r3, [sp, #48]	; 0x30
 8000744:	466d      	mov	r5, sp
 8000746:	f106 0410 	add.w	r4, r6, #16
 800074a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800074c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800074e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000750:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000752:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000756:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800075a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800075e:	f000 f893 	bl	8000888 <vUARTSend>

  toggleLed1;
 8000762:	2120      	movs	r1, #32
 8000764:	4820      	ldr	r0, [pc, #128]	; (80007e8 <timer2Callback+0x100>)
 8000766:	f000 fcc9 	bl	80010fc <HAL_GPIO_TogglePin>
  /* Modify timer 2 period every 5 times expires */
  if (timer2_expired_count % 5 == 0)
 800076a:	6939      	ldr	r1, [r7, #16]
 800076c:	4b1f      	ldr	r3, [pc, #124]	; (80007ec <timer2Callback+0x104>)
 800076e:	fba3 2301 	umull	r2, r3, r3, r1
 8000772:	089a      	lsrs	r2, r3, #2
 8000774:	4613      	mov	r3, r2
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	4413      	add	r3, r2
 800077a:	1aca      	subs	r2, r1, r3
 800077c:	2a00      	cmp	r2, #0
 800077e:	d127      	bne.n	80007d0 <timer2Callback+0xe8>
  {
    timer2_freq += 50;
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	3332      	adds	r3, #50	; 0x32
 8000784:	617b      	str	r3, [r7, #20]
    /* Modify timer 2 period */
    xTimerChangePeriod(PeriodicTimer2Handle, timer2_freq, 0);
 8000786:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <timer2Callback+0x108>)
 8000788:	6818      	ldr	r0, [r3, #0]
 800078a:	2300      	movs	r3, #0
 800078c:	9300      	str	r3, [sp, #0]
 800078e:	2300      	movs	r3, #0
 8000790:	697a      	ldr	r2, [r7, #20]
 8000792:	2104      	movs	r1, #4
 8000794:	f003 f960 	bl	8003a58 <xTimerGenericCommand>

    /* Print debug value */
    memset(main_string, 0, sizeof(main_string));
 8000798:	2264      	movs	r2, #100	; 0x64
 800079a:	2100      	movs	r1, #0
 800079c:	4810      	ldr	r0, [pc, #64]	; (80007e0 <timer2Callback+0xf8>)
 800079e:	f004 f80a 	bl	80047b6 <memset>
    sprintf(main_string,
 80007a2:	693a      	ldr	r2, [r7, #16]
 80007a4:	4913      	ldr	r1, [pc, #76]	; (80007f4 <timer2Callback+0x10c>)
 80007a6:	480e      	ldr	r0, [pc, #56]	; (80007e0 <timer2Callback+0xf8>)
 80007a8:	f004 f80e 	bl	80047c8 <siprintf>
            "Timer 2 period modified - timer_2_expired_count = %lu\r\n",
            timer2_expired_count);
    // PRINT_IN_SWTIMER((void *)TIMER_2_ID, main_string);
    // PRINTF(main_string);
    vUARTSend(DEBUG_USART, (uint8_t *)main_string);
 80007ac:	4e0a      	ldr	r6, [pc, #40]	; (80007d8 <timer2Callback+0xf0>)
 80007ae:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <timer2Callback+0xf8>)
 80007b0:	930c      	str	r3, [sp, #48]	; 0x30
 80007b2:	466d      	mov	r5, sp
 80007b4:	f106 0410 	add.w	r4, r6, #16
 80007b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007c0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80007c4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80007c8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80007cc:	f000 f85c 	bl	8000888 <vUARTSend>
  }
}
 80007d0:	bf00      	nop
 80007d2:	371c      	adds	r7, #28
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007d8:	20001b78 	.word	0x20001b78
 80007dc:	08005090 	.word	0x08005090
 80007e0:	20001aa8 	.word	0x20001aa8
 80007e4:	08005108 	.word	0x08005108
 80007e8:	40010c00 	.word	0x40010c00
 80007ec:	cccccccd 	.word	0xcccccccd
 80007f0:	20001bb8 	.word	0x20001bb8
 80007f4:	08005144 	.word	0x08005144

080007f8 <timer3Callback>:
/* timer3Callback function */
void timer3Callback(void *argument)
{
 80007f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007fa:	b093      	sub	sp, #76	; 0x4c
 80007fc:	af0e      	add	r7, sp, #56	; 0x38
 80007fe:	6078      	str	r0, [r7, #4]
  TickType_t tick_now;
  newline;
 8000800:	4e1a      	ldr	r6, [pc, #104]	; (800086c <timer3Callback+0x74>)
 8000802:	4b1b      	ldr	r3, [pc, #108]	; (8000870 <timer3Callback+0x78>)
 8000804:	930c      	str	r3, [sp, #48]	; 0x30
 8000806:	466d      	mov	r5, sp
 8000808:	f106 0410 	add.w	r4, r6, #16
 800080c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800080e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000810:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000812:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000814:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000818:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800081c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000820:	f000 f832 	bl	8000888 <vUARTSend>
  tick_now = xTaskGetTickCount();
 8000824:	f002 fc70 	bl	8003108 <xTaskGetTickCount>
 8000828:	60f8      	str	r0, [r7, #12]
  memset(main_string, 0, sizeof(main_string));
 800082a:	2264      	movs	r2, #100	; 0x64
 800082c:	2100      	movs	r1, #0
 800082e:	4811      	ldr	r0, [pc, #68]	; (8000874 <timer3Callback+0x7c>)
 8000830:	f003 ffc1 	bl	80047b6 <memset>
  sprintf(main_string,
 8000834:	68fa      	ldr	r2, [r7, #12]
 8000836:	4910      	ldr	r1, [pc, #64]	; (8000878 <timer3Callback+0x80>)
 8000838:	480e      	ldr	r0, [pc, #56]	; (8000874 <timer3Callback+0x7c>)
 800083a:	f003 ffc5 	bl	80047c8 <siprintf>
          "SW_OneShot_Timer_3 executes once at 3333ms - tick_count = %lu\r\n",
          tick_now);
  vUARTSend(DEBUG_USART, (uint8_t *)main_string);
 800083e:	4e0b      	ldr	r6, [pc, #44]	; (800086c <timer3Callback+0x74>)
 8000840:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <timer3Callback+0x7c>)
 8000842:	930c      	str	r3, [sp, #48]	; 0x30
 8000844:	466d      	mov	r5, sp
 8000846:	f106 0410 	add.w	r4, r6, #16
 800084a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800084c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800084e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000850:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000852:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000856:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800085a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800085e:	f000 f813 	bl	8000888 <vUARTSend>
  // PRINTF(main_string);
  // PRINT_IN_SWTIMER((void *)TIMER_3_ID, main_string);
}
 8000862:	bf00      	nop
 8000864:	3714      	adds	r7, #20
 8000866:	46bd      	mov	sp, r7
 8000868:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800086a:	bf00      	nop
 800086c:	20001b78 	.word	0x20001b78
 8000870:	08005090 	.word	0x08005090
 8000874:	20001aa8 	.word	0x20001aa8
 8000878:	0800517c 	.word	0x0800517c

0800087c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr

08000888 <vUARTSend>:
#include "myLib.h"

#if defined(configHAL_UART)
void vUARTSend(UART_HandleTypeDef huart, uint8_t *String)
{
 8000888:	b084      	sub	sp, #16
 800088a:	b580      	push	{r7, lr}
 800088c:	af00      	add	r7, sp, #0
 800088e:	f107 0c08 	add.w	ip, r7, #8
 8000892:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_UART_Transmit(&huart, (uint8_t *)String, strlen((char *)String), 100);
 8000896:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000898:	f7ff fc5a 	bl	8000150 <strlen>
 800089c:	4603      	mov	r3, r0
 800089e:	b29a      	uxth	r2, r3
 80008a0:	2364      	movs	r3, #100	; 0x64
 80008a2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80008a4:	f107 0008 	add.w	r0, r7, #8
 80008a8:	f001 f8a9 	bl	80019fe <HAL_UART_Transmit>
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008b4:	b004      	add	sp, #16
 80008b6:	4770      	bx	lr

080008b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <HAL_MspInit+0x5c>)
 80008c0:	699b      	ldr	r3, [r3, #24]
 80008c2:	4a14      	ldr	r2, [pc, #80]	; (8000914 <HAL_MspInit+0x5c>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6193      	str	r3, [r2, #24]
 80008ca:	4b12      	ldr	r3, [pc, #72]	; (8000914 <HAL_MspInit+0x5c>)
 80008cc:	699b      	ldr	r3, [r3, #24]
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d6:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <HAL_MspInit+0x5c>)
 80008d8:	69db      	ldr	r3, [r3, #28]
 80008da:	4a0e      	ldr	r2, [pc, #56]	; (8000914 <HAL_MspInit+0x5c>)
 80008dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e0:	61d3      	str	r3, [r2, #28]
 80008e2:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <HAL_MspInit+0x5c>)
 80008e4:	69db      	ldr	r3, [r3, #28]
 80008e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008ee:	4b0a      	ldr	r3, [pc, #40]	; (8000918 <HAL_MspInit+0x60>)
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	4a04      	ldr	r2, [pc, #16]	; (8000918 <HAL_MspInit+0x60>)
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090a:	bf00      	nop
 800090c:	3714      	adds	r7, #20
 800090e:	46bd      	mov	sp, r7
 8000910:	bc80      	pop	{r7}
 8000912:	4770      	bx	lr
 8000914:	40021000 	.word	0x40021000
 8000918:	40010000 	.word	0x40010000

0800091c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b088      	sub	sp, #32
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	f107 0310 	add.w	r3, r7, #16
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a1b      	ldr	r2, [pc, #108]	; (80009a4 <HAL_UART_MspInit+0x88>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d12f      	bne.n	800099c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800093c:	4b1a      	ldr	r3, [pc, #104]	; (80009a8 <HAL_UART_MspInit+0x8c>)
 800093e:	69db      	ldr	r3, [r3, #28]
 8000940:	4a19      	ldr	r2, [pc, #100]	; (80009a8 <HAL_UART_MspInit+0x8c>)
 8000942:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000946:	61d3      	str	r3, [r2, #28]
 8000948:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <HAL_UART_MspInit+0x8c>)
 800094a:	69db      	ldr	r3, [r3, #28]
 800094c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000954:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <HAL_UART_MspInit+0x8c>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	4a13      	ldr	r2, [pc, #76]	; (80009a8 <HAL_UART_MspInit+0x8c>)
 800095a:	f043 0304 	orr.w	r3, r3, #4
 800095e:	6193      	str	r3, [r2, #24]
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <HAL_UART_MspInit+0x8c>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	f003 0304 	and.w	r3, r3, #4
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800096c:	2304      	movs	r3, #4
 800096e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000970:	2302      	movs	r3, #2
 8000972:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000974:	2303      	movs	r3, #3
 8000976:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000978:	f107 0310 	add.w	r3, r7, #16
 800097c:	4619      	mov	r1, r3
 800097e:	480b      	ldr	r0, [pc, #44]	; (80009ac <HAL_UART_MspInit+0x90>)
 8000980:	f000 fa4a 	bl	8000e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000984:	2308      	movs	r3, #8
 8000986:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000988:	2300      	movs	r3, #0
 800098a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000990:	f107 0310 	add.w	r3, r7, #16
 8000994:	4619      	mov	r1, r3
 8000996:	4805      	ldr	r0, [pc, #20]	; (80009ac <HAL_UART_MspInit+0x90>)
 8000998:	f000 fa3e 	bl	8000e18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800099c:	bf00      	nop
 800099e:	3720      	adds	r7, #32
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40004400 	.word	0x40004400
 80009a8:	40021000 	.word	0x40021000
 80009ac:	40010800 	.word	0x40010800

080009b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr

080009bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009be:	b08f      	sub	sp, #60	; 0x3c
 80009c0:	af0e      	add	r7, sp, #56	; 0x38

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    PRINTF("[Hardfault_Handler]Program error !!!\r\n");
 80009c2:	2264      	movs	r2, #100	; 0x64
 80009c4:	2100      	movs	r1, #0
 80009c6:	4818      	ldr	r0, [pc, #96]	; (8000a28 <HardFault_Handler+0x6c>)
 80009c8:	f003 fef5 	bl	80047b6 <memset>
 80009cc:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <HardFault_Handler+0x6c>)
 80009ce:	4a17      	ldr	r2, [pc, #92]	; (8000a2c <HardFault_Handler+0x70>)
 80009d0:	4614      	mov	r4, r2
 80009d2:	469c      	mov	ip, r3
 80009d4:	f104 0e20 	add.w	lr, r4, #32
 80009d8:	4665      	mov	r5, ip
 80009da:	4626      	mov	r6, r4
 80009dc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80009de:	6028      	str	r0, [r5, #0]
 80009e0:	6069      	str	r1, [r5, #4]
 80009e2:	60aa      	str	r2, [r5, #8]
 80009e4:	60eb      	str	r3, [r5, #12]
 80009e6:	3410      	adds	r4, #16
 80009e8:	f10c 0c10 	add.w	ip, ip, #16
 80009ec:	4574      	cmp	r4, lr
 80009ee:	d1f3      	bne.n	80009d8 <HardFault_Handler+0x1c>
 80009f0:	4663      	mov	r3, ip
 80009f2:	4622      	mov	r2, r4
 80009f4:	6810      	ldr	r0, [r2, #0]
 80009f6:	6018      	str	r0, [r3, #0]
 80009f8:	8891      	ldrh	r1, [r2, #4]
 80009fa:	7992      	ldrb	r2, [r2, #6]
 80009fc:	8099      	strh	r1, [r3, #4]
 80009fe:	719a      	strb	r2, [r3, #6]
 8000a00:	4e0b      	ldr	r6, [pc, #44]	; (8000a30 <HardFault_Handler+0x74>)
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <HardFault_Handler+0x6c>)
 8000a04:	930c      	str	r3, [sp, #48]	; 0x30
 8000a06:	466d      	mov	r5, sp
 8000a08:	f106 0410 	add.w	r4, r6, #16
 8000a0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a14:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a18:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000a1c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000a20:	f7ff ff32 	bl	8000888 <vUARTSend>
 8000a24:	e7cd      	b.n	80009c2 <HardFault_Handler+0x6>
 8000a26:	bf00      	nop
 8000a28:	20001b0c 	.word	0x20001b0c
 8000a2c:	080051bc 	.word	0x080051bc
 8000a30:	20001b78 	.word	0x20001b78

08000a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <MemManage_Handler+0x4>

08000a3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <BusFault_Handler+0x4>

08000a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <UsageFault_Handler+0x4>

08000a46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr

08000a52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a56:	f000 f8df 	bl	8000c18 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a5a:	f002 fe85 	bl	8003768 <xTaskGetSchedulerState>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d001      	beq.n	8000a68 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a64:	f003 fc20 	bl	80042a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <_sbrk>:
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	4a14      	ldr	r2, [pc, #80]	; (8000ac8 <_sbrk+0x5c>)
 8000a76:	4b15      	ldr	r3, [pc, #84]	; (8000acc <_sbrk+0x60>)
 8000a78:	1ad3      	subs	r3, r2, r3
 8000a7a:	617b      	str	r3, [r7, #20]
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <_sbrk+0x64>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d102      	bne.n	8000a8e <_sbrk+0x22>
 8000a88:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <_sbrk+0x64>)
 8000a8a:	4a12      	ldr	r2, [pc, #72]	; (8000ad4 <_sbrk+0x68>)
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <_sbrk+0x64>)
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4413      	add	r3, r2
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d207      	bcs.n	8000aac <_sbrk+0x40>
 8000a9c:	f003 fe56 	bl	800474c <__errno>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	230c      	movs	r3, #12
 8000aa4:	6013      	str	r3, [r2, #0]
 8000aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aaa:	e009      	b.n	8000ac0 <_sbrk+0x54>
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <_sbrk+0x64>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <_sbrk+0x64>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4413      	add	r3, r2
 8000aba:	4a05      	ldr	r2, [pc, #20]	; (8000ad0 <_sbrk+0x64>)
 8000abc:	6013      	str	r3, [r2, #0]
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3718      	adds	r7, #24
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20005000 	.word	0x20005000
 8000acc:	00000400 	.word	0x00000400
 8000ad0:	20000094 	.word	0x20000094
 8000ad4:	20001c08 	.word	0x20001c08

08000ad8 <SystemInit>:
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <SystemInit+0x5c>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a14      	ldr	r2, [pc, #80]	; (8000b34 <SystemInit+0x5c>)
 8000ae2:	f043 0301 	orr.w	r3, r3, #1
 8000ae6:	6013      	str	r3, [r2, #0]
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <SystemInit+0x5c>)
 8000aea:	685a      	ldr	r2, [r3, #4]
 8000aec:	4911      	ldr	r1, [pc, #68]	; (8000b34 <SystemInit+0x5c>)
 8000aee:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <SystemInit+0x60>)
 8000af0:	4013      	ands	r3, r2
 8000af2:	604b      	str	r3, [r1, #4]
 8000af4:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <SystemInit+0x5c>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a0e      	ldr	r2, [pc, #56]	; (8000b34 <SystemInit+0x5c>)
 8000afa:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000afe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b02:	6013      	str	r3, [r2, #0]
 8000b04:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <SystemInit+0x5c>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a0a      	ldr	r2, [pc, #40]	; (8000b34 <SystemInit+0x5c>)
 8000b0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b0e:	6013      	str	r3, [r2, #0]
 8000b10:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <SystemInit+0x5c>)
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	4a07      	ldr	r2, [pc, #28]	; (8000b34 <SystemInit+0x5c>)
 8000b16:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000b1a:	6053      	str	r3, [r2, #4]
 8000b1c:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <SystemInit+0x5c>)
 8000b1e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <SystemInit+0x64>)
 8000b26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr
 8000b34:	40021000 	.word	0x40021000
 8000b38:	f8ff0000 	.word	0xf8ff0000
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <Reset_Handler>:
 8000b40:	2100      	movs	r1, #0
 8000b42:	e003      	b.n	8000b4c <LoopCopyDataInit>

08000b44 <CopyDataInit>:
 8000b44:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <LoopFillZerobss+0x14>)
 8000b46:	585b      	ldr	r3, [r3, r1]
 8000b48:	5043      	str	r3, [r0, r1]
 8000b4a:	3104      	adds	r1, #4

08000b4c <LoopCopyDataInit>:
 8000b4c:	480a      	ldr	r0, [pc, #40]	; (8000b78 <LoopFillZerobss+0x18>)
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <LoopFillZerobss+0x1c>)
 8000b50:	1842      	adds	r2, r0, r1
 8000b52:	429a      	cmp	r2, r3
 8000b54:	d3f6      	bcc.n	8000b44 <CopyDataInit>
 8000b56:	4a0a      	ldr	r2, [pc, #40]	; (8000b80 <LoopFillZerobss+0x20>)
 8000b58:	e002      	b.n	8000b60 <LoopFillZerobss>

08000b5a <FillZerobss>:
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	f842 3b04 	str.w	r3, [r2], #4

08000b60 <LoopFillZerobss>:
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <LoopFillZerobss+0x24>)
 8000b62:	429a      	cmp	r2, r3
 8000b64:	d3f9      	bcc.n	8000b5a <FillZerobss>
 8000b66:	f7ff ffb7 	bl	8000ad8 <SystemInit>
 8000b6a:	f003 fdf5 	bl	8004758 <__libc_init_array>
 8000b6e:	f7ff faf7 	bl	8000160 <main>
 8000b72:	4770      	bx	lr
 8000b74:	08005288 	.word	0x08005288
 8000b78:	20000000 	.word	0x20000000
 8000b7c:	20000074 	.word	0x20000074
 8000b80:	20000074 	.word	0x20000074
 8000b84:	20001c08 	.word	0x20001c08

08000b88 <ADC1_2_IRQHandler>:
 8000b88:	e7fe      	b.n	8000b88 <ADC1_2_IRQHandler>
	...

08000b8c <HAL_Init>:
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <HAL_Init+0x28>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a07      	ldr	r2, [pc, #28]	; (8000bb4 <HAL_Init+0x28>)
 8000b96:	f043 0310 	orr.w	r3, r3, #16
 8000b9a:	6013      	str	r3, [r2, #0]
 8000b9c:	2003      	movs	r0, #3
 8000b9e:	f000 f907 	bl	8000db0 <HAL_NVIC_SetPriorityGrouping>
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f000 f808 	bl	8000bb8 <HAL_InitTick>
 8000ba8:	f7ff fe86 	bl	80008b8 <HAL_MspInit>
 8000bac:	2300      	movs	r3, #0
 8000bae:	4618      	mov	r0, r3
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40022000 	.word	0x40022000

08000bb8 <HAL_InitTick>:
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <HAL_InitTick+0x54>)
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <HAL_InitTick+0x58>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	4619      	mov	r1, r3
 8000bca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f000 f911 	bl	8000dfe <HAL_SYSTICK_Config>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <HAL_InitTick+0x2e>
 8000be2:	2301      	movs	r3, #1
 8000be4:	e00e      	b.n	8000c04 <HAL_InitTick+0x4c>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2b0f      	cmp	r3, #15
 8000bea:	d80a      	bhi.n	8000c02 <HAL_InitTick+0x4a>
 8000bec:	2200      	movs	r2, #0
 8000bee:	6879      	ldr	r1, [r7, #4]
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	f000 f8e7 	bl	8000dc6 <HAL_NVIC_SetPriority>
 8000bf8:	4a06      	ldr	r2, [pc, #24]	; (8000c14 <HAL_InitTick+0x5c>)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6013      	str	r3, [r2, #0]
 8000bfe:	2300      	movs	r3, #0
 8000c00:	e000      	b.n	8000c04 <HAL_InitTick+0x4c>
 8000c02:	2301      	movs	r3, #1
 8000c04:	4618      	mov	r0, r3
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000000 	.word	0x20000000
 8000c10:	20000008 	.word	0x20000008
 8000c14:	20000004 	.word	0x20000004

08000c18 <HAL_IncTick>:
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <HAL_IncTick+0x1c>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	461a      	mov	r2, r3
 8000c22:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <HAL_IncTick+0x20>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4413      	add	r3, r2
 8000c28:	4a03      	ldr	r2, [pc, #12]	; (8000c38 <HAL_IncTick+0x20>)
 8000c2a:	6013      	str	r3, [r2, #0]
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr
 8000c34:	20000008 	.word	0x20000008
 8000c38:	20001bc0 	.word	0x20001bc0

08000c3c <HAL_GetTick>:
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	4b02      	ldr	r3, [pc, #8]	; (8000c4c <HAL_GetTick+0x10>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4618      	mov	r0, r3
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc80      	pop	{r7}
 8000c4a:	4770      	bx	lr
 8000c4c:	20001bc0 	.word	0x20001bc0

08000c50 <__NVIC_SetPriorityGrouping>:
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <__NVIC_SetPriorityGrouping+0x44>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	60bb      	str	r3, [r7, #8]
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	021a      	lsls	r2, r3, #8
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c80:	60bb      	str	r3, [r7, #8]
 8000c82:	4a04      	ldr	r2, [pc, #16]	; (8000c94 <__NVIC_SetPriorityGrouping+0x44>)
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	60d3      	str	r3, [r2, #12]
 8000c88:	bf00      	nop
 8000c8a:	3714      	adds	r7, #20
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <__NVIC_GetPriorityGrouping>:
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	0a1b      	lsrs	r3, r3, #8
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_SetPriority>:
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	6039      	str	r1, [r7, #0]
 8000cbe:	71fb      	strb	r3, [r7, #7]
 8000cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	db0a      	blt.n	8000cde <__NVIC_SetPriority+0x2a>
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	490c      	ldr	r1, [pc, #48]	; (8000d00 <__NVIC_SetPriority+0x4c>)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	0112      	lsls	r2, r2, #4
 8000cd4:	b2d2      	uxtb	r2, r2
 8000cd6:	440b      	add	r3, r1
 8000cd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8000cdc:	e00a      	b.n	8000cf4 <__NVIC_SetPriority+0x40>
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	4908      	ldr	r1, [pc, #32]	; (8000d04 <__NVIC_SetPriority+0x50>)
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	f003 030f 	and.w	r3, r3, #15
 8000cea:	3b04      	subs	r3, #4
 8000cec:	0112      	lsls	r2, r2, #4
 8000cee:	b2d2      	uxtb	r2, r2
 8000cf0:	440b      	add	r3, r1
 8000cf2:	761a      	strb	r2, [r3, #24]
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bc80      	pop	{r7}
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000e100 	.word	0xe000e100
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <NVIC_EncodePriority>:
 8000d08:	b480      	push	{r7}
 8000d0a:	b089      	sub	sp, #36	; 0x24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	61fb      	str	r3, [r7, #28]
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	f1c3 0307 	rsb	r3, r3, #7
 8000d22:	2b04      	cmp	r3, #4
 8000d24:	bf28      	it	cs
 8000d26:	2304      	movcs	r3, #4
 8000d28:	61bb      	str	r3, [r7, #24]
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	2b06      	cmp	r3, #6
 8000d30:	d902      	bls.n	8000d38 <NVIC_EncodePriority+0x30>
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	3b03      	subs	r3, #3
 8000d36:	e000      	b.n	8000d3a <NVIC_EncodePriority+0x32>
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]
 8000d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43da      	mvns	r2, r3
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	401a      	ands	r2, r3
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	409a      	lsls	r2, r3
 8000d50:	f04f 31ff 	mov.w	r1, #4294967295
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5a:	43d9      	mvns	r1, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	400b      	ands	r3, r1
 8000d60:	4313      	orrs	r3, r2
 8000d62:	4618      	mov	r0, r3
 8000d64:	3724      	adds	r7, #36	; 0x24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bc80      	pop	{r7}
 8000d6a:	4770      	bx	lr

08000d6c <SysTick_Config>:
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d7c:	d301      	bcc.n	8000d82 <SysTick_Config+0x16>
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e00f      	b.n	8000da2 <SysTick_Config+0x36>
 8000d82:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <SysTick_Config+0x40>)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	6053      	str	r3, [r2, #4]
 8000d8a:	210f      	movs	r1, #15
 8000d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d90:	f7ff ff90 	bl	8000cb4 <__NVIC_SetPriority>
 8000d94:	4b05      	ldr	r3, [pc, #20]	; (8000dac <SysTick_Config+0x40>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	4b04      	ldr	r3, [pc, #16]	; (8000dac <SysTick_Config+0x40>)
 8000d9c:	2207      	movs	r2, #7
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	2300      	movs	r3, #0
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	e000e010 	.word	0xe000e010

08000db0 <HAL_NVIC_SetPriorityGrouping>:
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f7ff ff49 	bl	8000c50 <__NVIC_SetPriorityGrouping>
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_NVIC_SetPriority>:
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b086      	sub	sp, #24
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	4603      	mov	r3, r0
 8000dce:	60b9      	str	r1, [r7, #8]
 8000dd0:	607a      	str	r2, [r7, #4]
 8000dd2:	73fb      	strb	r3, [r7, #15]
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]
 8000dd8:	f7ff ff5e 	bl	8000c98 <__NVIC_GetPriorityGrouping>
 8000ddc:	6178      	str	r0, [r7, #20]
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	68b9      	ldr	r1, [r7, #8]
 8000de2:	6978      	ldr	r0, [r7, #20]
 8000de4:	f7ff ff90 	bl	8000d08 <NVIC_EncodePriority>
 8000de8:	4602      	mov	r2, r0
 8000dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dee:	4611      	mov	r1, r2
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff ff5f 	bl	8000cb4 <__NVIC_SetPriority>
 8000df6:	bf00      	nop
 8000df8:	3718      	adds	r7, #24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <HAL_SYSTICK_Config>:
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f7ff ffb0 	bl	8000d6c <SysTick_Config>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <HAL_GPIO_Init>:
 8000e18:	b480      	push	{r7}
 8000e1a:	b08b      	sub	sp, #44	; 0x2c
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
 8000e22:	2300      	movs	r3, #0
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
 8000e26:	2300      	movs	r3, #0
 8000e28:	623b      	str	r3, [r7, #32]
 8000e2a:	e127      	b.n	800107c <HAL_GPIO_Init+0x264>
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	61fb      	str	r3, [r7, #28]
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	69fa      	ldr	r2, [r7, #28]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	f040 8116 	bne.w	8001076 <HAL_GPIO_Init+0x25e>
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	2b12      	cmp	r3, #18
 8000e50:	d034      	beq.n	8000ebc <HAL_GPIO_Init+0xa4>
 8000e52:	2b12      	cmp	r3, #18
 8000e54:	d80d      	bhi.n	8000e72 <HAL_GPIO_Init+0x5a>
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d02b      	beq.n	8000eb2 <HAL_GPIO_Init+0x9a>
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d804      	bhi.n	8000e68 <HAL_GPIO_Init+0x50>
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d031      	beq.n	8000ec6 <HAL_GPIO_Init+0xae>
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d01c      	beq.n	8000ea0 <HAL_GPIO_Init+0x88>
 8000e66:	e048      	b.n	8000efa <HAL_GPIO_Init+0xe2>
 8000e68:	2b03      	cmp	r3, #3
 8000e6a:	d043      	beq.n	8000ef4 <HAL_GPIO_Init+0xdc>
 8000e6c:	2b11      	cmp	r3, #17
 8000e6e:	d01b      	beq.n	8000ea8 <HAL_GPIO_Init+0x90>
 8000e70:	e043      	b.n	8000efa <HAL_GPIO_Init+0xe2>
 8000e72:	4a89      	ldr	r2, [pc, #548]	; (8001098 <HAL_GPIO_Init+0x280>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d026      	beq.n	8000ec6 <HAL_GPIO_Init+0xae>
 8000e78:	4a87      	ldr	r2, [pc, #540]	; (8001098 <HAL_GPIO_Init+0x280>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d806      	bhi.n	8000e8c <HAL_GPIO_Init+0x74>
 8000e7e:	4a87      	ldr	r2, [pc, #540]	; (800109c <HAL_GPIO_Init+0x284>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d020      	beq.n	8000ec6 <HAL_GPIO_Init+0xae>
 8000e84:	4a86      	ldr	r2, [pc, #536]	; (80010a0 <HAL_GPIO_Init+0x288>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d01d      	beq.n	8000ec6 <HAL_GPIO_Init+0xae>
 8000e8a:	e036      	b.n	8000efa <HAL_GPIO_Init+0xe2>
 8000e8c:	4a85      	ldr	r2, [pc, #532]	; (80010a4 <HAL_GPIO_Init+0x28c>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d019      	beq.n	8000ec6 <HAL_GPIO_Init+0xae>
 8000e92:	4a85      	ldr	r2, [pc, #532]	; (80010a8 <HAL_GPIO_Init+0x290>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d016      	beq.n	8000ec6 <HAL_GPIO_Init+0xae>
 8000e98:	4a84      	ldr	r2, [pc, #528]	; (80010ac <HAL_GPIO_Init+0x294>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d013      	beq.n	8000ec6 <HAL_GPIO_Init+0xae>
 8000e9e:	e02c      	b.n	8000efa <HAL_GPIO_Init+0xe2>
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	623b      	str	r3, [r7, #32]
 8000ea6:	e028      	b.n	8000efa <HAL_GPIO_Init+0xe2>
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	3304      	adds	r3, #4
 8000eae:	623b      	str	r3, [r7, #32]
 8000eb0:	e023      	b.n	8000efa <HAL_GPIO_Init+0xe2>
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	68db      	ldr	r3, [r3, #12]
 8000eb6:	3308      	adds	r3, #8
 8000eb8:	623b      	str	r3, [r7, #32]
 8000eba:	e01e      	b.n	8000efa <HAL_GPIO_Init+0xe2>
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	330c      	adds	r3, #12
 8000ec2:	623b      	str	r3, [r7, #32]
 8000ec4:	e019      	b.n	8000efa <HAL_GPIO_Init+0xe2>
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d102      	bne.n	8000ed4 <HAL_GPIO_Init+0xbc>
 8000ece:	2304      	movs	r3, #4
 8000ed0:	623b      	str	r3, [r7, #32]
 8000ed2:	e012      	b.n	8000efa <HAL_GPIO_Init+0xe2>
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d105      	bne.n	8000ee8 <HAL_GPIO_Init+0xd0>
 8000edc:	2308      	movs	r3, #8
 8000ede:	623b      	str	r3, [r7, #32]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	69fa      	ldr	r2, [r7, #28]
 8000ee4:	611a      	str	r2, [r3, #16]
 8000ee6:	e008      	b.n	8000efa <HAL_GPIO_Init+0xe2>
 8000ee8:	2308      	movs	r3, #8
 8000eea:	623b      	str	r3, [r7, #32]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	69fa      	ldr	r2, [r7, #28]
 8000ef0:	615a      	str	r2, [r3, #20]
 8000ef2:	e002      	b.n	8000efa <HAL_GPIO_Init+0xe2>
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	623b      	str	r3, [r7, #32]
 8000ef8:	bf00      	nop
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	2bff      	cmp	r3, #255	; 0xff
 8000efe:	d801      	bhi.n	8000f04 <HAL_GPIO_Init+0xec>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	e001      	b.n	8000f08 <HAL_GPIO_Init+0xf0>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3304      	adds	r3, #4
 8000f08:	617b      	str	r3, [r7, #20]
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	2bff      	cmp	r3, #255	; 0xff
 8000f0e:	d802      	bhi.n	8000f16 <HAL_GPIO_Init+0xfe>
 8000f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	e002      	b.n	8000f1c <HAL_GPIO_Init+0x104>
 8000f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f18:	3b08      	subs	r3, #8
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	210f      	movs	r1, #15
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	401a      	ands	r2, r3
 8000f2e:	6a39      	ldr	r1, [r7, #32]
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	fa01 f303 	lsl.w	r3, r1, r3
 8000f36:	431a      	orrs	r2, r3
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	f000 8096 	beq.w	8001076 <HAL_GPIO_Init+0x25e>
 8000f4a:	4b59      	ldr	r3, [pc, #356]	; (80010b0 <HAL_GPIO_Init+0x298>)
 8000f4c:	699b      	ldr	r3, [r3, #24]
 8000f4e:	4a58      	ldr	r2, [pc, #352]	; (80010b0 <HAL_GPIO_Init+0x298>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6193      	str	r3, [r2, #24]
 8000f56:	4b56      	ldr	r3, [pc, #344]	; (80010b0 <HAL_GPIO_Init+0x298>)
 8000f58:	699b      	ldr	r3, [r3, #24]
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	4a54      	ldr	r2, [pc, #336]	; (80010b4 <HAL_GPIO_Init+0x29c>)
 8000f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f66:	089b      	lsrs	r3, r3, #2
 8000f68:	3302      	adds	r3, #2
 8000f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f72:	f003 0303 	and.w	r3, r3, #3
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	220f      	movs	r2, #15
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	68fa      	ldr	r2, [r7, #12]
 8000f82:	4013      	ands	r3, r2
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a4b      	ldr	r2, [pc, #300]	; (80010b8 <HAL_GPIO_Init+0x2a0>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d013      	beq.n	8000fb6 <HAL_GPIO_Init+0x19e>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a4a      	ldr	r2, [pc, #296]	; (80010bc <HAL_GPIO_Init+0x2a4>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d00d      	beq.n	8000fb2 <HAL_GPIO_Init+0x19a>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a49      	ldr	r2, [pc, #292]	; (80010c0 <HAL_GPIO_Init+0x2a8>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d007      	beq.n	8000fae <HAL_GPIO_Init+0x196>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a48      	ldr	r2, [pc, #288]	; (80010c4 <HAL_GPIO_Init+0x2ac>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d101      	bne.n	8000faa <HAL_GPIO_Init+0x192>
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e006      	b.n	8000fb8 <HAL_GPIO_Init+0x1a0>
 8000faa:	2304      	movs	r3, #4
 8000fac:	e004      	b.n	8000fb8 <HAL_GPIO_Init+0x1a0>
 8000fae:	2302      	movs	r3, #2
 8000fb0:	e002      	b.n	8000fb8 <HAL_GPIO_Init+0x1a0>
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e000      	b.n	8000fb8 <HAL_GPIO_Init+0x1a0>
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fba:	f002 0203 	and.w	r2, r2, #3
 8000fbe:	0092      	lsls	r2, r2, #2
 8000fc0:	4093      	lsls	r3, r2
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	493a      	ldr	r1, [pc, #232]	; (80010b4 <HAL_GPIO_Init+0x29c>)
 8000fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fcc:	089b      	lsrs	r3, r3, #2
 8000fce:	3302      	adds	r3, #2
 8000fd0:	68fa      	ldr	r2, [r7, #12]
 8000fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d006      	beq.n	8000ff0 <HAL_GPIO_Init+0x1d8>
 8000fe2:	4b39      	ldr	r3, [pc, #228]	; (80010c8 <HAL_GPIO_Init+0x2b0>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	4938      	ldr	r1, [pc, #224]	; (80010c8 <HAL_GPIO_Init+0x2b0>)
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	600b      	str	r3, [r1, #0]
 8000fee:	e006      	b.n	8000ffe <HAL_GPIO_Init+0x1e6>
 8000ff0:	4b35      	ldr	r3, [pc, #212]	; (80010c8 <HAL_GPIO_Init+0x2b0>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	4933      	ldr	r1, [pc, #204]	; (80010c8 <HAL_GPIO_Init+0x2b0>)
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	600b      	str	r3, [r1, #0]
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d006      	beq.n	8001018 <HAL_GPIO_Init+0x200>
 800100a:	4b2f      	ldr	r3, [pc, #188]	; (80010c8 <HAL_GPIO_Init+0x2b0>)
 800100c:	685a      	ldr	r2, [r3, #4]
 800100e:	492e      	ldr	r1, [pc, #184]	; (80010c8 <HAL_GPIO_Init+0x2b0>)
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	4313      	orrs	r3, r2
 8001014:	604b      	str	r3, [r1, #4]
 8001016:	e006      	b.n	8001026 <HAL_GPIO_Init+0x20e>
 8001018:	4b2b      	ldr	r3, [pc, #172]	; (80010c8 <HAL_GPIO_Init+0x2b0>)
 800101a:	685a      	ldr	r2, [r3, #4]
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	43db      	mvns	r3, r3
 8001020:	4929      	ldr	r1, [pc, #164]	; (80010c8 <HAL_GPIO_Init+0x2b0>)
 8001022:	4013      	ands	r3, r2
 8001024:	604b      	str	r3, [r1, #4]
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d006      	beq.n	8001040 <HAL_GPIO_Init+0x228>
 8001032:	4b25      	ldr	r3, [pc, #148]	; (80010c8 <HAL_GPIO_Init+0x2b0>)
 8001034:	689a      	ldr	r2, [r3, #8]
 8001036:	4924      	ldr	r1, [pc, #144]	; (80010c8 <HAL_GPIO_Init+0x2b0>)
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	4313      	orrs	r3, r2
 800103c:	608b      	str	r3, [r1, #8]
 800103e:	e006      	b.n	800104e <HAL_GPIO_Init+0x236>
 8001040:	4b21      	ldr	r3, [pc, #132]	; (80010c8 <HAL_GPIO_Init+0x2b0>)
 8001042:	689a      	ldr	r2, [r3, #8]
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	43db      	mvns	r3, r3
 8001048:	491f      	ldr	r1, [pc, #124]	; (80010c8 <HAL_GPIO_Init+0x2b0>)
 800104a:	4013      	ands	r3, r2
 800104c:	608b      	str	r3, [r1, #8]
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d006      	beq.n	8001068 <HAL_GPIO_Init+0x250>
 800105a:	4b1b      	ldr	r3, [pc, #108]	; (80010c8 <HAL_GPIO_Init+0x2b0>)
 800105c:	68da      	ldr	r2, [r3, #12]
 800105e:	491a      	ldr	r1, [pc, #104]	; (80010c8 <HAL_GPIO_Init+0x2b0>)
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	4313      	orrs	r3, r2
 8001064:	60cb      	str	r3, [r1, #12]
 8001066:	e006      	b.n	8001076 <HAL_GPIO_Init+0x25e>
 8001068:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <HAL_GPIO_Init+0x2b0>)
 800106a:	68da      	ldr	r2, [r3, #12]
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	43db      	mvns	r3, r3
 8001070:	4915      	ldr	r1, [pc, #84]	; (80010c8 <HAL_GPIO_Init+0x2b0>)
 8001072:	4013      	ands	r3, r2
 8001074:	60cb      	str	r3, [r1, #12]
 8001076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001078:	3301      	adds	r3, #1
 800107a:	627b      	str	r3, [r7, #36]	; 0x24
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001082:	fa22 f303 	lsr.w	r3, r2, r3
 8001086:	2b00      	cmp	r3, #0
 8001088:	f47f aed0 	bne.w	8000e2c <HAL_GPIO_Init+0x14>
 800108c:	bf00      	nop
 800108e:	372c      	adds	r7, #44	; 0x2c
 8001090:	46bd      	mov	sp, r7
 8001092:	bc80      	pop	{r7}
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	10210000 	.word	0x10210000
 800109c:	10110000 	.word	0x10110000
 80010a0:	10120000 	.word	0x10120000
 80010a4:	10310000 	.word	0x10310000
 80010a8:	10320000 	.word	0x10320000
 80010ac:	10220000 	.word	0x10220000
 80010b0:	40021000 	.word	0x40021000
 80010b4:	40010000 	.word	0x40010000
 80010b8:	40010800 	.word	0x40010800
 80010bc:	40010c00 	.word	0x40010c00
 80010c0:	40011000 	.word	0x40011000
 80010c4:	40011400 	.word	0x40011400
 80010c8:	40010400 	.word	0x40010400

080010cc <HAL_GPIO_WritePin>:
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	460b      	mov	r3, r1
 80010d6:	807b      	strh	r3, [r7, #2]
 80010d8:	4613      	mov	r3, r2
 80010da:	707b      	strb	r3, [r7, #1]
 80010dc:	787b      	ldrb	r3, [r7, #1]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_WritePin+0x1e>
 80010e2:	887a      	ldrh	r2, [r7, #2]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	611a      	str	r2, [r3, #16]
 80010e8:	e003      	b.n	80010f2 <HAL_GPIO_WritePin+0x26>
 80010ea:	887b      	ldrh	r3, [r7, #2]
 80010ec:	041a      	lsls	r2, r3, #16
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	611a      	str	r2, [r3, #16]
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr

080010fc <HAL_GPIO_TogglePin>:
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	807b      	strh	r3, [r7, #2]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	68da      	ldr	r2, [r3, #12]
 800110c:	887b      	ldrh	r3, [r7, #2]
 800110e:	4013      	ands	r3, r2
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <HAL_GPIO_TogglePin+0x20>
 8001114:	887a      	ldrh	r2, [r7, #2]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	615a      	str	r2, [r3, #20]
 800111a:	e002      	b.n	8001122 <HAL_GPIO_TogglePin+0x26>
 800111c:	887a      	ldrh	r2, [r7, #2]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	611a      	str	r2, [r3, #16]
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr

0800112c <HAL_RCC_OscConfig>:
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d101      	bne.n	800113e <HAL_RCC_OscConfig+0x12>
 800113a:	2301      	movs	r3, #1
 800113c:	e26c      	b.n	8001618 <HAL_RCC_OscConfig+0x4ec>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	2b00      	cmp	r3, #0
 8001148:	f000 8087 	beq.w	800125a <HAL_RCC_OscConfig+0x12e>
 800114c:	4b92      	ldr	r3, [pc, #584]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f003 030c 	and.w	r3, r3, #12
 8001154:	2b04      	cmp	r3, #4
 8001156:	d00c      	beq.n	8001172 <HAL_RCC_OscConfig+0x46>
 8001158:	4b8f      	ldr	r3, [pc, #572]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 030c 	and.w	r3, r3, #12
 8001160:	2b08      	cmp	r3, #8
 8001162:	d112      	bne.n	800118a <HAL_RCC_OscConfig+0x5e>
 8001164:	4b8c      	ldr	r3, [pc, #560]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800116c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001170:	d10b      	bne.n	800118a <HAL_RCC_OscConfig+0x5e>
 8001172:	4b89      	ldr	r3, [pc, #548]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d06c      	beq.n	8001258 <HAL_RCC_OscConfig+0x12c>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d168      	bne.n	8001258 <HAL_RCC_OscConfig+0x12c>
 8001186:	2301      	movs	r3, #1
 8001188:	e246      	b.n	8001618 <HAL_RCC_OscConfig+0x4ec>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001192:	d106      	bne.n	80011a2 <HAL_RCC_OscConfig+0x76>
 8001194:	4b80      	ldr	r3, [pc, #512]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a7f      	ldr	r2, [pc, #508]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 800119a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800119e:	6013      	str	r3, [r2, #0]
 80011a0:	e02e      	b.n	8001200 <HAL_RCC_OscConfig+0xd4>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d10c      	bne.n	80011c4 <HAL_RCC_OscConfig+0x98>
 80011aa:	4b7b      	ldr	r3, [pc, #492]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a7a      	ldr	r2, [pc, #488]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011b4:	6013      	str	r3, [r2, #0]
 80011b6:	4b78      	ldr	r3, [pc, #480]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a77      	ldr	r2, [pc, #476]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011c0:	6013      	str	r3, [r2, #0]
 80011c2:	e01d      	b.n	8001200 <HAL_RCC_OscConfig+0xd4>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011cc:	d10c      	bne.n	80011e8 <HAL_RCC_OscConfig+0xbc>
 80011ce:	4b72      	ldr	r3, [pc, #456]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a71      	ldr	r2, [pc, #452]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011d8:	6013      	str	r3, [r2, #0]
 80011da:	4b6f      	ldr	r3, [pc, #444]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a6e      	ldr	r2, [pc, #440]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e4:	6013      	str	r3, [r2, #0]
 80011e6:	e00b      	b.n	8001200 <HAL_RCC_OscConfig+0xd4>
 80011e8:	4b6b      	ldr	r3, [pc, #428]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a6a      	ldr	r2, [pc, #424]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011f2:	6013      	str	r3, [r2, #0]
 80011f4:	4b68      	ldr	r3, [pc, #416]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a67      	ldr	r2, [pc, #412]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011fe:	6013      	str	r3, [r2, #0]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d013      	beq.n	8001230 <HAL_RCC_OscConfig+0x104>
 8001208:	f7ff fd18 	bl	8000c3c <HAL_GetTick>
 800120c:	6138      	str	r0, [r7, #16]
 800120e:	e008      	b.n	8001222 <HAL_RCC_OscConfig+0xf6>
 8001210:	f7ff fd14 	bl	8000c3c <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b64      	cmp	r3, #100	; 0x64
 800121c:	d901      	bls.n	8001222 <HAL_RCC_OscConfig+0xf6>
 800121e:	2303      	movs	r3, #3
 8001220:	e1fa      	b.n	8001618 <HAL_RCC_OscConfig+0x4ec>
 8001222:	4b5d      	ldr	r3, [pc, #372]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d0f0      	beq.n	8001210 <HAL_RCC_OscConfig+0xe4>
 800122e:	e014      	b.n	800125a <HAL_RCC_OscConfig+0x12e>
 8001230:	f7ff fd04 	bl	8000c3c <HAL_GetTick>
 8001234:	6138      	str	r0, [r7, #16]
 8001236:	e008      	b.n	800124a <HAL_RCC_OscConfig+0x11e>
 8001238:	f7ff fd00 	bl	8000c3c <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b64      	cmp	r3, #100	; 0x64
 8001244:	d901      	bls.n	800124a <HAL_RCC_OscConfig+0x11e>
 8001246:	2303      	movs	r3, #3
 8001248:	e1e6      	b.n	8001618 <HAL_RCC_OscConfig+0x4ec>
 800124a:	4b53      	ldr	r3, [pc, #332]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1f0      	bne.n	8001238 <HAL_RCC_OscConfig+0x10c>
 8001256:	e000      	b.n	800125a <HAL_RCC_OscConfig+0x12e>
 8001258:	bf00      	nop
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d063      	beq.n	800132e <HAL_RCC_OscConfig+0x202>
 8001266:	4b4c      	ldr	r3, [pc, #304]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f003 030c 	and.w	r3, r3, #12
 800126e:	2b00      	cmp	r3, #0
 8001270:	d00b      	beq.n	800128a <HAL_RCC_OscConfig+0x15e>
 8001272:	4b49      	ldr	r3, [pc, #292]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f003 030c 	and.w	r3, r3, #12
 800127a:	2b08      	cmp	r3, #8
 800127c:	d11c      	bne.n	80012b8 <HAL_RCC_OscConfig+0x18c>
 800127e:	4b46      	ldr	r3, [pc, #280]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d116      	bne.n	80012b8 <HAL_RCC_OscConfig+0x18c>
 800128a:	4b43      	ldr	r3, [pc, #268]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d005      	beq.n	80012a2 <HAL_RCC_OscConfig+0x176>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	691b      	ldr	r3, [r3, #16]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d001      	beq.n	80012a2 <HAL_RCC_OscConfig+0x176>
 800129e:	2301      	movs	r3, #1
 80012a0:	e1ba      	b.n	8001618 <HAL_RCC_OscConfig+0x4ec>
 80012a2:	4b3d      	ldr	r3, [pc, #244]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	4939      	ldr	r1, [pc, #228]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80012b2:	4313      	orrs	r3, r2
 80012b4:	600b      	str	r3, [r1, #0]
 80012b6:	e03a      	b.n	800132e <HAL_RCC_OscConfig+0x202>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	691b      	ldr	r3, [r3, #16]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d020      	beq.n	8001302 <HAL_RCC_OscConfig+0x1d6>
 80012c0:	4b36      	ldr	r3, [pc, #216]	; (800139c <HAL_RCC_OscConfig+0x270>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	f7ff fcb9 	bl	8000c3c <HAL_GetTick>
 80012ca:	6138      	str	r0, [r7, #16]
 80012cc:	e008      	b.n	80012e0 <HAL_RCC_OscConfig+0x1b4>
 80012ce:	f7ff fcb5 	bl	8000c3c <HAL_GetTick>
 80012d2:	4602      	mov	r2, r0
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d901      	bls.n	80012e0 <HAL_RCC_OscConfig+0x1b4>
 80012dc:	2303      	movs	r3, #3
 80012de:	e19b      	b.n	8001618 <HAL_RCC_OscConfig+0x4ec>
 80012e0:	4b2d      	ldr	r3, [pc, #180]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0302 	and.w	r3, r3, #2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d0f0      	beq.n	80012ce <HAL_RCC_OscConfig+0x1a2>
 80012ec:	4b2a      	ldr	r3, [pc, #168]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	695b      	ldr	r3, [r3, #20]
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	4927      	ldr	r1, [pc, #156]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80012fc:	4313      	orrs	r3, r2
 80012fe:	600b      	str	r3, [r1, #0]
 8001300:	e015      	b.n	800132e <HAL_RCC_OscConfig+0x202>
 8001302:	4b26      	ldr	r3, [pc, #152]	; (800139c <HAL_RCC_OscConfig+0x270>)
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	f7ff fc98 	bl	8000c3c <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0x1f6>
 8001310:	f7ff fc94 	bl	8000c3c <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x1f6>
 800131e:	2303      	movs	r3, #3
 8001320:	e17a      	b.n	8001618 <HAL_RCC_OscConfig+0x4ec>
 8001322:	4b1d      	ldr	r3, [pc, #116]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1f0      	bne.n	8001310 <HAL_RCC_OscConfig+0x1e4>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0308 	and.w	r3, r3, #8
 8001336:	2b00      	cmp	r3, #0
 8001338:	d03a      	beq.n	80013b0 <HAL_RCC_OscConfig+0x284>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d019      	beq.n	8001376 <HAL_RCC_OscConfig+0x24a>
 8001342:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <HAL_RCC_OscConfig+0x274>)
 8001344:	2201      	movs	r2, #1
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	f7ff fc78 	bl	8000c3c <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0x236>
 8001350:	f7ff fc74 	bl	8000c3c <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b02      	cmp	r3, #2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x236>
 800135e:	2303      	movs	r3, #3
 8001360:	e15a      	b.n	8001618 <HAL_RCC_OscConfig+0x4ec>
 8001362:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0f0      	beq.n	8001350 <HAL_RCC_OscConfig+0x224>
 800136e:	2001      	movs	r0, #1
 8001370:	f000 fada 	bl	8001928 <RCC_Delay>
 8001374:	e01c      	b.n	80013b0 <HAL_RCC_OscConfig+0x284>
 8001376:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <HAL_RCC_OscConfig+0x274>)
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	f7ff fc5e 	bl	8000c3c <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]
 8001382:	e00f      	b.n	80013a4 <HAL_RCC_OscConfig+0x278>
 8001384:	f7ff fc5a 	bl	8000c3c <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d908      	bls.n	80013a4 <HAL_RCC_OscConfig+0x278>
 8001392:	2303      	movs	r3, #3
 8001394:	e140      	b.n	8001618 <HAL_RCC_OscConfig+0x4ec>
 8001396:	bf00      	nop
 8001398:	40021000 	.word	0x40021000
 800139c:	42420000 	.word	0x42420000
 80013a0:	42420480 	.word	0x42420480
 80013a4:	4b9e      	ldr	r3, [pc, #632]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 80013a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1e9      	bne.n	8001384 <HAL_RCC_OscConfig+0x258>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 80a6 	beq.w	800150a <HAL_RCC_OscConfig+0x3de>
 80013be:	2300      	movs	r3, #0
 80013c0:	75fb      	strb	r3, [r7, #23]
 80013c2:	4b97      	ldr	r3, [pc, #604]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d10d      	bne.n	80013ea <HAL_RCC_OscConfig+0x2be>
 80013ce:	4b94      	ldr	r3, [pc, #592]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	4a93      	ldr	r2, [pc, #588]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 80013d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d8:	61d3      	str	r3, [r2, #28]
 80013da:	4b91      	ldr	r3, [pc, #580]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	2301      	movs	r3, #1
 80013e8:	75fb      	strb	r3, [r7, #23]
 80013ea:	4b8e      	ldr	r3, [pc, #568]	; (8001624 <HAL_RCC_OscConfig+0x4f8>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d118      	bne.n	8001428 <HAL_RCC_OscConfig+0x2fc>
 80013f6:	4b8b      	ldr	r3, [pc, #556]	; (8001624 <HAL_RCC_OscConfig+0x4f8>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a8a      	ldr	r2, [pc, #552]	; (8001624 <HAL_RCC_OscConfig+0x4f8>)
 80013fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001400:	6013      	str	r3, [r2, #0]
 8001402:	f7ff fc1b 	bl	8000c3c <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]
 8001408:	e008      	b.n	800141c <HAL_RCC_OscConfig+0x2f0>
 800140a:	f7ff fc17 	bl	8000c3c <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b64      	cmp	r3, #100	; 0x64
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x2f0>
 8001418:	2303      	movs	r3, #3
 800141a:	e0fd      	b.n	8001618 <HAL_RCC_OscConfig+0x4ec>
 800141c:	4b81      	ldr	r3, [pc, #516]	; (8001624 <HAL_RCC_OscConfig+0x4f8>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001424:	2b00      	cmp	r3, #0
 8001426:	d0f0      	beq.n	800140a <HAL_RCC_OscConfig+0x2de>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d106      	bne.n	800143e <HAL_RCC_OscConfig+0x312>
 8001430:	4b7b      	ldr	r3, [pc, #492]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 8001432:	6a1b      	ldr	r3, [r3, #32]
 8001434:	4a7a      	ldr	r2, [pc, #488]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	6213      	str	r3, [r2, #32]
 800143c:	e02d      	b.n	800149a <HAL_RCC_OscConfig+0x36e>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10c      	bne.n	8001460 <HAL_RCC_OscConfig+0x334>
 8001446:	4b76      	ldr	r3, [pc, #472]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 8001448:	6a1b      	ldr	r3, [r3, #32]
 800144a:	4a75      	ldr	r2, [pc, #468]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 800144c:	f023 0301 	bic.w	r3, r3, #1
 8001450:	6213      	str	r3, [r2, #32]
 8001452:	4b73      	ldr	r3, [pc, #460]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 8001454:	6a1b      	ldr	r3, [r3, #32]
 8001456:	4a72      	ldr	r2, [pc, #456]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 8001458:	f023 0304 	bic.w	r3, r3, #4
 800145c:	6213      	str	r3, [r2, #32]
 800145e:	e01c      	b.n	800149a <HAL_RCC_OscConfig+0x36e>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	2b05      	cmp	r3, #5
 8001466:	d10c      	bne.n	8001482 <HAL_RCC_OscConfig+0x356>
 8001468:	4b6d      	ldr	r3, [pc, #436]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 800146a:	6a1b      	ldr	r3, [r3, #32]
 800146c:	4a6c      	ldr	r2, [pc, #432]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 800146e:	f043 0304 	orr.w	r3, r3, #4
 8001472:	6213      	str	r3, [r2, #32]
 8001474:	4b6a      	ldr	r3, [pc, #424]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 8001476:	6a1b      	ldr	r3, [r3, #32]
 8001478:	4a69      	ldr	r2, [pc, #420]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	6213      	str	r3, [r2, #32]
 8001480:	e00b      	b.n	800149a <HAL_RCC_OscConfig+0x36e>
 8001482:	4b67      	ldr	r3, [pc, #412]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 8001484:	6a1b      	ldr	r3, [r3, #32]
 8001486:	4a66      	ldr	r2, [pc, #408]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 8001488:	f023 0301 	bic.w	r3, r3, #1
 800148c:	6213      	str	r3, [r2, #32]
 800148e:	4b64      	ldr	r3, [pc, #400]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 8001490:	6a1b      	ldr	r3, [r3, #32]
 8001492:	4a63      	ldr	r2, [pc, #396]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 8001494:	f023 0304 	bic.w	r3, r3, #4
 8001498:	6213      	str	r3, [r2, #32]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d015      	beq.n	80014ce <HAL_RCC_OscConfig+0x3a2>
 80014a2:	f7ff fbcb 	bl	8000c3c <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]
 80014a8:	e00a      	b.n	80014c0 <HAL_RCC_OscConfig+0x394>
 80014aa:	f7ff fbc7 	bl	8000c3c <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x394>
 80014bc:	2303      	movs	r3, #3
 80014be:	e0ab      	b.n	8001618 <HAL_RCC_OscConfig+0x4ec>
 80014c0:	4b57      	ldr	r3, [pc, #348]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d0ee      	beq.n	80014aa <HAL_RCC_OscConfig+0x37e>
 80014cc:	e014      	b.n	80014f8 <HAL_RCC_OscConfig+0x3cc>
 80014ce:	f7ff fbb5 	bl	8000c3c <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]
 80014d4:	e00a      	b.n	80014ec <HAL_RCC_OscConfig+0x3c0>
 80014d6:	f7ff fbb1 	bl	8000c3c <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x3c0>
 80014e8:	2303      	movs	r3, #3
 80014ea:	e095      	b.n	8001618 <HAL_RCC_OscConfig+0x4ec>
 80014ec:	4b4c      	ldr	r3, [pc, #304]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1ee      	bne.n	80014d6 <HAL_RCC_OscConfig+0x3aa>
 80014f8:	7dfb      	ldrb	r3, [r7, #23]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d105      	bne.n	800150a <HAL_RCC_OscConfig+0x3de>
 80014fe:	4b48      	ldr	r3, [pc, #288]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	4a47      	ldr	r2, [pc, #284]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 8001504:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001508:	61d3      	str	r3, [r2, #28]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	2b00      	cmp	r3, #0
 8001510:	f000 8081 	beq.w	8001616 <HAL_RCC_OscConfig+0x4ea>
 8001514:	4b42      	ldr	r3, [pc, #264]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f003 030c 	and.w	r3, r3, #12
 800151c:	2b08      	cmp	r3, #8
 800151e:	d061      	beq.n	80015e4 <HAL_RCC_OscConfig+0x4b8>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	69db      	ldr	r3, [r3, #28]
 8001524:	2b02      	cmp	r3, #2
 8001526:	d146      	bne.n	80015b6 <HAL_RCC_OscConfig+0x48a>
 8001528:	4b3f      	ldr	r3, [pc, #252]	; (8001628 <HAL_RCC_OscConfig+0x4fc>)
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	f7ff fb85 	bl	8000c3c <HAL_GetTick>
 8001532:	6138      	str	r0, [r7, #16]
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x41c>
 8001536:	f7ff fb81 	bl	8000c3c <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x41c>
 8001544:	2303      	movs	r3, #3
 8001546:	e067      	b.n	8001618 <HAL_RCC_OscConfig+0x4ec>
 8001548:	4b35      	ldr	r3, [pc, #212]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1f0      	bne.n	8001536 <HAL_RCC_OscConfig+0x40a>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800155c:	d108      	bne.n	8001570 <HAL_RCC_OscConfig+0x444>
 800155e:	4b30      	ldr	r3, [pc, #192]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	492d      	ldr	r1, [pc, #180]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 800156c:	4313      	orrs	r3, r2
 800156e:	604b      	str	r3, [r1, #4]
 8001570:	4b2b      	ldr	r3, [pc, #172]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a19      	ldr	r1, [r3, #32]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001580:	430b      	orrs	r3, r1
 8001582:	4927      	ldr	r1, [pc, #156]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 8001584:	4313      	orrs	r3, r2
 8001586:	604b      	str	r3, [r1, #4]
 8001588:	4b27      	ldr	r3, [pc, #156]	; (8001628 <HAL_RCC_OscConfig+0x4fc>)
 800158a:	2201      	movs	r2, #1
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	f7ff fb55 	bl	8000c3c <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x47c>
 8001596:	f7ff fb51 	bl	8000c3c <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x47c>
 80015a4:	2303      	movs	r3, #3
 80015a6:	e037      	b.n	8001618 <HAL_RCC_OscConfig+0x4ec>
 80015a8:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d0f0      	beq.n	8001596 <HAL_RCC_OscConfig+0x46a>
 80015b4:	e02f      	b.n	8001616 <HAL_RCC_OscConfig+0x4ea>
 80015b6:	4b1c      	ldr	r3, [pc, #112]	; (8001628 <HAL_RCC_OscConfig+0x4fc>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	f7ff fb3e 	bl	8000c3c <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x4aa>
 80015c4:	f7ff fb3a 	bl	8000c3c <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x4aa>
 80015d2:	2303      	movs	r3, #3
 80015d4:	e020      	b.n	8001618 <HAL_RCC_OscConfig+0x4ec>
 80015d6:	4b12      	ldr	r3, [pc, #72]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1f0      	bne.n	80015c4 <HAL_RCC_OscConfig+0x498>
 80015e2:	e018      	b.n	8001616 <HAL_RCC_OscConfig+0x4ea>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	69db      	ldr	r3, [r3, #28]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d101      	bne.n	80015f0 <HAL_RCC_OscConfig+0x4c4>
 80015ec:	2301      	movs	r3, #1
 80015ee:	e013      	b.n	8001618 <HAL_RCC_OscConfig+0x4ec>
 80015f0:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a1b      	ldr	r3, [r3, #32]
 8001600:	429a      	cmp	r2, r3
 8001602:	d106      	bne.n	8001612 <HAL_RCC_OscConfig+0x4e6>
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160e:	429a      	cmp	r2, r3
 8001610:	d001      	beq.n	8001616 <HAL_RCC_OscConfig+0x4ea>
 8001612:	2301      	movs	r3, #1
 8001614:	e000      	b.n	8001618 <HAL_RCC_OscConfig+0x4ec>
 8001616:	2300      	movs	r3, #0
 8001618:	4618      	mov	r0, r3
 800161a:	3718      	adds	r7, #24
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40021000 	.word	0x40021000
 8001624:	40007000 	.word	0x40007000
 8001628:	42420060 	.word	0x42420060

0800162c <HAL_RCC_ClockConfig>:
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d101      	bne.n	8001640 <HAL_RCC_ClockConfig+0x14>
 800163c:	2301      	movs	r3, #1
 800163e:	e0d0      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1b6>
 8001640:	4b6a      	ldr	r3, [pc, #424]	; (80017ec <HAL_RCC_ClockConfig+0x1c0>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0307 	and.w	r3, r3, #7
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	429a      	cmp	r2, r3
 800164c:	d910      	bls.n	8001670 <HAL_RCC_ClockConfig+0x44>
 800164e:	4b67      	ldr	r3, [pc, #412]	; (80017ec <HAL_RCC_ClockConfig+0x1c0>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f023 0207 	bic.w	r2, r3, #7
 8001656:	4965      	ldr	r1, [pc, #404]	; (80017ec <HAL_RCC_ClockConfig+0x1c0>)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	4313      	orrs	r3, r2
 800165c:	600b      	str	r3, [r1, #0]
 800165e:	4b63      	ldr	r3, [pc, #396]	; (80017ec <HAL_RCC_ClockConfig+0x1c0>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	429a      	cmp	r2, r3
 800166a:	d001      	beq.n	8001670 <HAL_RCC_ClockConfig+0x44>
 800166c:	2301      	movs	r3, #1
 800166e:	e0b8      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1b6>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d020      	beq.n	80016be <HAL_RCC_ClockConfig+0x92>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0304 	and.w	r3, r3, #4
 8001684:	2b00      	cmp	r3, #0
 8001686:	d005      	beq.n	8001694 <HAL_RCC_ClockConfig+0x68>
 8001688:	4b59      	ldr	r3, [pc, #356]	; (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	4a58      	ldr	r2, [pc, #352]	; (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 800168e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001692:	6053      	str	r3, [r2, #4]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0308 	and.w	r3, r3, #8
 800169c:	2b00      	cmp	r3, #0
 800169e:	d005      	beq.n	80016ac <HAL_RCC_ClockConfig+0x80>
 80016a0:	4b53      	ldr	r3, [pc, #332]	; (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	4a52      	ldr	r2, [pc, #328]	; (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 80016a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80016aa:	6053      	str	r3, [r2, #4]
 80016ac:	4b50      	ldr	r3, [pc, #320]	; (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	494d      	ldr	r1, [pc, #308]	; (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	604b      	str	r3, [r1, #4]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d040      	beq.n	800174c <HAL_RCC_ClockConfig+0x120>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d107      	bne.n	80016e2 <HAL_RCC_ClockConfig+0xb6>
 80016d2:	4b47      	ldr	r3, [pc, #284]	; (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d115      	bne.n	800170a <HAL_RCC_ClockConfig+0xde>
 80016de:	2301      	movs	r3, #1
 80016e0:	e07f      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1b6>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d107      	bne.n	80016fa <HAL_RCC_ClockConfig+0xce>
 80016ea:	4b41      	ldr	r3, [pc, #260]	; (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d109      	bne.n	800170a <HAL_RCC_ClockConfig+0xde>
 80016f6:	2301      	movs	r3, #1
 80016f8:	e073      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1b6>
 80016fa:	4b3d      	ldr	r3, [pc, #244]	; (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <HAL_RCC_ClockConfig+0xde>
 8001706:	2301      	movs	r3, #1
 8001708:	e06b      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1b6>
 800170a:	4b39      	ldr	r3, [pc, #228]	; (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f023 0203 	bic.w	r2, r3, #3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	4936      	ldr	r1, [pc, #216]	; (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 8001718:	4313      	orrs	r3, r2
 800171a:	604b      	str	r3, [r1, #4]
 800171c:	f7ff fa8e 	bl	8000c3c <HAL_GetTick>
 8001720:	60f8      	str	r0, [r7, #12]
 8001722:	e00a      	b.n	800173a <HAL_RCC_ClockConfig+0x10e>
 8001724:	f7ff fa8a 	bl	8000c3c <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001732:	4293      	cmp	r3, r2
 8001734:	d901      	bls.n	800173a <HAL_RCC_ClockConfig+0x10e>
 8001736:	2303      	movs	r3, #3
 8001738:	e053      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1b6>
 800173a:	4b2d      	ldr	r3, [pc, #180]	; (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f003 020c 	and.w	r2, r3, #12
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	429a      	cmp	r2, r3
 800174a:	d1eb      	bne.n	8001724 <HAL_RCC_ClockConfig+0xf8>
 800174c:	4b27      	ldr	r3, [pc, #156]	; (80017ec <HAL_RCC_ClockConfig+0x1c0>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0307 	and.w	r3, r3, #7
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	429a      	cmp	r2, r3
 8001758:	d210      	bcs.n	800177c <HAL_RCC_ClockConfig+0x150>
 800175a:	4b24      	ldr	r3, [pc, #144]	; (80017ec <HAL_RCC_ClockConfig+0x1c0>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f023 0207 	bic.w	r2, r3, #7
 8001762:	4922      	ldr	r1, [pc, #136]	; (80017ec <HAL_RCC_ClockConfig+0x1c0>)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	4313      	orrs	r3, r2
 8001768:	600b      	str	r3, [r1, #0]
 800176a:	4b20      	ldr	r3, [pc, #128]	; (80017ec <HAL_RCC_ClockConfig+0x1c0>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	429a      	cmp	r2, r3
 8001776:	d001      	beq.n	800177c <HAL_RCC_ClockConfig+0x150>
 8001778:	2301      	movs	r3, #1
 800177a:	e032      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1b6>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	2b00      	cmp	r3, #0
 8001786:	d008      	beq.n	800179a <HAL_RCC_ClockConfig+0x16e>
 8001788:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	4916      	ldr	r1, [pc, #88]	; (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 8001796:	4313      	orrs	r3, r2
 8001798:	604b      	str	r3, [r1, #4]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0308 	and.w	r3, r3, #8
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d009      	beq.n	80017ba <HAL_RCC_ClockConfig+0x18e>
 80017a6:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	490e      	ldr	r1, [pc, #56]	; (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	604b      	str	r3, [r1, #4]
 80017ba:	f000 f821 	bl	8001800 <HAL_RCC_GetSysClockFreq>
 80017be:	4601      	mov	r1, r0
 80017c0:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	091b      	lsrs	r3, r3, #4
 80017c6:	f003 030f 	and.w	r3, r3, #15
 80017ca:	4a0a      	ldr	r2, [pc, #40]	; (80017f4 <HAL_RCC_ClockConfig+0x1c8>)
 80017cc:	5cd3      	ldrb	r3, [r2, r3]
 80017ce:	fa21 f303 	lsr.w	r3, r1, r3
 80017d2:	4a09      	ldr	r2, [pc, #36]	; (80017f8 <HAL_RCC_ClockConfig+0x1cc>)
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	4b09      	ldr	r3, [pc, #36]	; (80017fc <HAL_RCC_ClockConfig+0x1d0>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff f9ec 	bl	8000bb8 <HAL_InitTick>
 80017e0:	2300      	movs	r3, #0
 80017e2:	4618      	mov	r0, r3
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40022000 	.word	0x40022000
 80017f0:	40021000 	.word	0x40021000
 80017f4:	08005234 	.word	0x08005234
 80017f8:	20000000 	.word	0x20000000
 80017fc:	20000004 	.word	0x20000004

08001800 <HAL_RCC_GetSysClockFreq>:
 8001800:	b490      	push	{r4, r7}
 8001802:	b08a      	sub	sp, #40	; 0x28
 8001804:	af00      	add	r7, sp, #0
 8001806:	4b2a      	ldr	r3, [pc, #168]	; (80018b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001808:	1d3c      	adds	r4, r7, #4
 800180a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800180c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001810:	4b28      	ldr	r3, [pc, #160]	; (80018b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	803b      	strh	r3, [r7, #0]
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
 800181a:	2300      	movs	r3, #0
 800181c:	61bb      	str	r3, [r7, #24]
 800181e:	2300      	movs	r3, #0
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
 8001826:	2300      	movs	r3, #0
 8001828:	623b      	str	r3, [r7, #32]
 800182a:	4b23      	ldr	r3, [pc, #140]	; (80018b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	61fb      	str	r3, [r7, #28]
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f003 030c 	and.w	r3, r3, #12
 8001836:	2b04      	cmp	r3, #4
 8001838:	d002      	beq.n	8001840 <HAL_RCC_GetSysClockFreq+0x40>
 800183a:	2b08      	cmp	r3, #8
 800183c:	d003      	beq.n	8001846 <HAL_RCC_GetSysClockFreq+0x46>
 800183e:	e02d      	b.n	800189c <HAL_RCC_GetSysClockFreq+0x9c>
 8001840:	4b1e      	ldr	r3, [pc, #120]	; (80018bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001842:	623b      	str	r3, [r7, #32]
 8001844:	e02d      	b.n	80018a2 <HAL_RCC_GetSysClockFreq+0xa2>
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	0c9b      	lsrs	r3, r3, #18
 800184a:	f003 030f 	and.w	r3, r3, #15
 800184e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001852:	4413      	add	r3, r2
 8001854:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001858:	617b      	str	r3, [r7, #20]
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d013      	beq.n	800188c <HAL_RCC_GetSysClockFreq+0x8c>
 8001864:	4b14      	ldr	r3, [pc, #80]	; (80018b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	0c5b      	lsrs	r3, r3, #17
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001872:	4413      	add	r3, r2
 8001874:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001878:	61bb      	str	r3, [r7, #24]
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	4a0f      	ldr	r2, [pc, #60]	; (80018bc <HAL_RCC_GetSysClockFreq+0xbc>)
 800187e:	fb02 f203 	mul.w	r2, r2, r3
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	fbb2 f3f3 	udiv	r3, r2, r3
 8001888:	627b      	str	r3, [r7, #36]	; 0x24
 800188a:	e004      	b.n	8001896 <HAL_RCC_GetSysClockFreq+0x96>
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	4a0c      	ldr	r2, [pc, #48]	; (80018c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001890:	fb02 f303 	mul.w	r3, r2, r3
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
 8001896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001898:	623b      	str	r3, [r7, #32]
 800189a:	e002      	b.n	80018a2 <HAL_RCC_GetSysClockFreq+0xa2>
 800189c:	4b07      	ldr	r3, [pc, #28]	; (80018bc <HAL_RCC_GetSysClockFreq+0xbc>)
 800189e:	623b      	str	r3, [r7, #32]
 80018a0:	bf00      	nop
 80018a2:	6a3b      	ldr	r3, [r7, #32]
 80018a4:	4618      	mov	r0, r3
 80018a6:	3728      	adds	r7, #40	; 0x28
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc90      	pop	{r4, r7}
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	080051e4 	.word	0x080051e4
 80018b4:	080051f4 	.word	0x080051f4
 80018b8:	40021000 	.word	0x40021000
 80018bc:	007a1200 	.word	0x007a1200
 80018c0:	003d0900 	.word	0x003d0900

080018c4 <HAL_RCC_GetHCLKFreq>:
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	4b02      	ldr	r3, [pc, #8]	; (80018d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr
 80018d4:	20000000 	.word	0x20000000

080018d8 <HAL_RCC_GetPCLK1Freq>:
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
 80018dc:	f7ff fff2 	bl	80018c4 <HAL_RCC_GetHCLKFreq>
 80018e0:	4601      	mov	r1, r0
 80018e2:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	0a1b      	lsrs	r3, r3, #8
 80018e8:	f003 0307 	and.w	r3, r3, #7
 80018ec:	4a03      	ldr	r2, [pc, #12]	; (80018fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80018ee:	5cd3      	ldrb	r3, [r2, r3]
 80018f0:	fa21 f303 	lsr.w	r3, r1, r3
 80018f4:	4618      	mov	r0, r3
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40021000 	.word	0x40021000
 80018fc:	08005244 	.word	0x08005244

08001900 <HAL_RCC_GetPCLK2Freq>:
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
 8001904:	f7ff ffde 	bl	80018c4 <HAL_RCC_GetHCLKFreq>
 8001908:	4601      	mov	r1, r0
 800190a:	4b05      	ldr	r3, [pc, #20]	; (8001920 <HAL_RCC_GetPCLK2Freq+0x20>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	0adb      	lsrs	r3, r3, #11
 8001910:	f003 0307 	and.w	r3, r3, #7
 8001914:	4a03      	ldr	r2, [pc, #12]	; (8001924 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001916:	5cd3      	ldrb	r3, [r2, r3]
 8001918:	fa21 f303 	lsr.w	r3, r1, r3
 800191c:	4618      	mov	r0, r3
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40021000 	.word	0x40021000
 8001924:	08005244 	.word	0x08005244

08001928 <RCC_Delay>:
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	4b0a      	ldr	r3, [pc, #40]	; (800195c <RCC_Delay+0x34>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a0a      	ldr	r2, [pc, #40]	; (8001960 <RCC_Delay+0x38>)
 8001936:	fba2 2303 	umull	r2, r3, r2, r3
 800193a:	0a5b      	lsrs	r3, r3, #9
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	fb02 f303 	mul.w	r3, r2, r3
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	bf00      	nop
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	1e5a      	subs	r2, r3, #1
 800194a:	60fa      	str	r2, [r7, #12]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1f9      	bne.n	8001944 <RCC_Delay+0x1c>
 8001950:	bf00      	nop
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	20000000 	.word	0x20000000
 8001960:	10624dd3 	.word	0x10624dd3

08001964 <HAL_UART_Init>:
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <HAL_UART_Init+0x12>
 8001972:	2301      	movs	r3, #1
 8001974:	e03f      	b.n	80019f6 <HAL_UART_Init+0x92>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b00      	cmp	r3, #0
 8001980:	d106      	bne.n	8001990 <HAL_UART_Init+0x2c>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7fe ffc6 	bl	800091c <HAL_UART_MspInit>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2224      	movs	r2, #36	; 0x24
 8001994:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	68da      	ldr	r2, [r3, #12]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019a6:	60da      	str	r2, [r3, #12]
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f000 f90b 	bl	8001bc4 <UART_SetConfig>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	691a      	ldr	r2, [r3, #16]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80019bc:	611a      	str	r2, [r3, #16]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	695a      	ldr	r2, [r3, #20]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80019cc:	615a      	str	r2, [r3, #20]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68da      	ldr	r2, [r3, #12]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2220      	movs	r2, #32
 80019e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2220      	movs	r2, #32
 80019f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80019f4:	2300      	movs	r3, #0
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_UART_Transmit>:
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b088      	sub	sp, #32
 8001a02:	af02      	add	r7, sp, #8
 8001a04:	60f8      	str	r0, [r7, #12]
 8001a06:	60b9      	str	r1, [r7, #8]
 8001a08:	603b      	str	r3, [r7, #0]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	80fb      	strh	r3, [r7, #6]
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b20      	cmp	r3, #32
 8001a1c:	f040 8083 	bne.w	8001b26 <HAL_UART_Transmit+0x128>
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d002      	beq.n	8001a2c <HAL_UART_Transmit+0x2e>
 8001a26:	88fb      	ldrh	r3, [r7, #6]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d101      	bne.n	8001a30 <HAL_UART_Transmit+0x32>
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e07b      	b.n	8001b28 <HAL_UART_Transmit+0x12a>
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d101      	bne.n	8001a3e <HAL_UART_Transmit+0x40>
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	e074      	b.n	8001b28 <HAL_UART_Transmit+0x12a>
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2201      	movs	r2, #1
 8001a42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2221      	movs	r2, #33	; 0x21
 8001a50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001a54:	f7ff f8f2 	bl	8000c3c <HAL_GetTick>
 8001a58:	6178      	str	r0, [r7, #20]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	88fa      	ldrh	r2, [r7, #6]
 8001a5e:	849a      	strh	r2, [r3, #36]	; 0x24
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	88fa      	ldrh	r2, [r7, #6]
 8001a64:	84da      	strh	r2, [r3, #38]	; 0x26
 8001a66:	e042      	b.n	8001aee <HAL_UART_Transmit+0xf0>
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	84da      	strh	r2, [r3, #38]	; 0x26
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a7e:	d122      	bne.n	8001ac6 <HAL_UART_Transmit+0xc8>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	2200      	movs	r2, #0
 8001a88:	2180      	movs	r1, #128	; 0x80
 8001a8a:	68f8      	ldr	r0, [r7, #12]
 8001a8c:	f000 f850 	bl	8001b30 <UART_WaitOnFlagUntilTimeout>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <HAL_UART_Transmit+0x9c>
 8001a96:	2303      	movs	r3, #3
 8001a98:	e046      	b.n	8001b28 <HAL_UART_Transmit+0x12a>
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	881b      	ldrh	r3, [r3, #0]
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d103      	bne.n	8001abe <HAL_UART_Transmit+0xc0>
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	3302      	adds	r3, #2
 8001aba:	60bb      	str	r3, [r7, #8]
 8001abc:	e017      	b.n	8001aee <HAL_UART_Transmit+0xf0>
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	e013      	b.n	8001aee <HAL_UART_Transmit+0xf0>
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	2200      	movs	r2, #0
 8001ace:	2180      	movs	r1, #128	; 0x80
 8001ad0:	68f8      	ldr	r0, [r7, #12]
 8001ad2:	f000 f82d 	bl	8001b30 <UART_WaitOnFlagUntilTimeout>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <HAL_UART_Transmit+0xe2>
 8001adc:	2303      	movs	r3, #3
 8001ade:	e023      	b.n	8001b28 <HAL_UART_Transmit+0x12a>
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	1c5a      	adds	r2, r3, #1
 8001ae4:	60ba      	str	r2, [r7, #8]
 8001ae6:	781a      	ldrb	r2, [r3, #0]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1b7      	bne.n	8001a68 <HAL_UART_Transmit+0x6a>
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	9300      	str	r3, [sp, #0]
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	2200      	movs	r2, #0
 8001b00:	2140      	movs	r1, #64	; 0x40
 8001b02:	68f8      	ldr	r0, [r7, #12]
 8001b04:	f000 f814 	bl	8001b30 <UART_WaitOnFlagUntilTimeout>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <HAL_UART_Transmit+0x114>
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e00a      	b.n	8001b28 <HAL_UART_Transmit+0x12a>
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2220      	movs	r2, #32
 8001b16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8001b22:	2300      	movs	r3, #0
 8001b24:	e000      	b.n	8001b28 <HAL_UART_Transmit+0x12a>
 8001b26:	2302      	movs	r3, #2
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3718      	adds	r7, #24
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <UART_WaitOnFlagUntilTimeout>:
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	603b      	str	r3, [r7, #0]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	71fb      	strb	r3, [r7, #7]
 8001b40:	e02c      	b.n	8001b9c <UART_WaitOnFlagUntilTimeout+0x6c>
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b48:	d028      	beq.n	8001b9c <UART_WaitOnFlagUntilTimeout+0x6c>
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d007      	beq.n	8001b60 <UART_WaitOnFlagUntilTimeout+0x30>
 8001b50:	f7ff f874 	bl	8000c3c <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d21d      	bcs.n	8001b9c <UART_WaitOnFlagUntilTimeout+0x6c>
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68da      	ldr	r2, [r3, #12]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001b6e:	60da      	str	r2, [r3, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	695a      	ldr	r2, [r3, #20]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f022 0201 	bic.w	r2, r2, #1
 8001b7e:	615a      	str	r2, [r3, #20]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2220      	movs	r2, #32
 8001b84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2220      	movs	r2, #32
 8001b8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e00f      	b.n	8001bbc <UART_WaitOnFlagUntilTimeout+0x8c>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	68ba      	ldr	r2, [r7, #8]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	bf0c      	ite	eq
 8001bac:	2301      	moveq	r3, #1
 8001bae:	2300      	movne	r3, #0
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d0c3      	beq.n	8001b42 <UART_WaitOnFlagUntilTimeout+0x12>
 8001bba:	2300      	movs	r3, #0
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <UART_SetConfig>:
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	68da      	ldr	r2, [r3, #12]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	430a      	orrs	r2, r1
 8001be0:	611a      	str	r2, [r3, #16]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689a      	ldr	r2, [r3, #8]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	431a      	orrs	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	695b      	ldr	r3, [r3, #20]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001bfe:	f023 030c 	bic.w	r3, r3, #12
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	6812      	ldr	r2, [r2, #0]
 8001c06:	68f9      	ldr	r1, [r7, #12]
 8001c08:	430b      	orrs	r3, r1
 8001c0a:	60d3      	str	r3, [r2, #12]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	699a      	ldr	r2, [r3, #24]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	615a      	str	r2, [r3, #20]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a52      	ldr	r2, [pc, #328]	; (8001d70 <UART_SetConfig+0x1ac>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d14e      	bne.n	8001cca <UART_SetConfig+0x106>
 8001c2c:	f7ff fe68 	bl	8001900 <HAL_RCC_GetPCLK2Freq>
 8001c30:	60b8      	str	r0, [r7, #8]
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	4613      	mov	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	009a      	lsls	r2, r3, #2
 8001c3c:	441a      	add	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c48:	4a4a      	ldr	r2, [pc, #296]	; (8001d74 <UART_SetConfig+0x1b0>)
 8001c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4e:	095b      	lsrs	r3, r3, #5
 8001c50:	0119      	lsls	r1, r3, #4
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	4613      	mov	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	009a      	lsls	r2, r3, #2
 8001c5c:	441a      	add	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c68:	4b42      	ldr	r3, [pc, #264]	; (8001d74 <UART_SetConfig+0x1b0>)
 8001c6a:	fba3 0302 	umull	r0, r3, r3, r2
 8001c6e:	095b      	lsrs	r3, r3, #5
 8001c70:	2064      	movs	r0, #100	; 0x64
 8001c72:	fb00 f303 	mul.w	r3, r0, r3
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	011b      	lsls	r3, r3, #4
 8001c7a:	3332      	adds	r3, #50	; 0x32
 8001c7c:	4a3d      	ldr	r2, [pc, #244]	; (8001d74 <UART_SetConfig+0x1b0>)
 8001c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c82:	095b      	lsrs	r3, r3, #5
 8001c84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c88:	4419      	add	r1, r3
 8001c8a:	68ba      	ldr	r2, [r7, #8]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	4413      	add	r3, r2
 8001c92:	009a      	lsls	r2, r3, #2
 8001c94:	441a      	add	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ca0:	4b34      	ldr	r3, [pc, #208]	; (8001d74 <UART_SetConfig+0x1b0>)
 8001ca2:	fba3 0302 	umull	r0, r3, r3, r2
 8001ca6:	095b      	lsrs	r3, r3, #5
 8001ca8:	2064      	movs	r0, #100	; 0x64
 8001caa:	fb00 f303 	mul.w	r3, r0, r3
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	011b      	lsls	r3, r3, #4
 8001cb2:	3332      	adds	r3, #50	; 0x32
 8001cb4:	4a2f      	ldr	r2, [pc, #188]	; (8001d74 <UART_SetConfig+0x1b0>)
 8001cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cba:	095b      	lsrs	r3, r3, #5
 8001cbc:	f003 020f 	and.w	r2, r3, #15
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	440a      	add	r2, r1
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	e04d      	b.n	8001d66 <UART_SetConfig+0x1a2>
 8001cca:	f7ff fe05 	bl	80018d8 <HAL_RCC_GetPCLK1Freq>
 8001cce:	60b8      	str	r0, [r7, #8]
 8001cd0:	68ba      	ldr	r2, [r7, #8]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	4413      	add	r3, r2
 8001cd8:	009a      	lsls	r2, r3, #2
 8001cda:	441a      	add	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce6:	4a23      	ldr	r2, [pc, #140]	; (8001d74 <UART_SetConfig+0x1b0>)
 8001ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cec:	095b      	lsrs	r3, r3, #5
 8001cee:	0119      	lsls	r1, r3, #4
 8001cf0:	68ba      	ldr	r2, [r7, #8]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	009a      	lsls	r2, r3, #2
 8001cfa:	441a      	add	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d06:	4b1b      	ldr	r3, [pc, #108]	; (8001d74 <UART_SetConfig+0x1b0>)
 8001d08:	fba3 0302 	umull	r0, r3, r3, r2
 8001d0c:	095b      	lsrs	r3, r3, #5
 8001d0e:	2064      	movs	r0, #100	; 0x64
 8001d10:	fb00 f303 	mul.w	r3, r0, r3
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	011b      	lsls	r3, r3, #4
 8001d18:	3332      	adds	r3, #50	; 0x32
 8001d1a:	4a16      	ldr	r2, [pc, #88]	; (8001d74 <UART_SetConfig+0x1b0>)
 8001d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d20:	095b      	lsrs	r3, r3, #5
 8001d22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d26:	4419      	add	r1, r3
 8001d28:	68ba      	ldr	r2, [r7, #8]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	009a      	lsls	r2, r3, #2
 8001d32:	441a      	add	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d3e:	4b0d      	ldr	r3, [pc, #52]	; (8001d74 <UART_SetConfig+0x1b0>)
 8001d40:	fba3 0302 	umull	r0, r3, r3, r2
 8001d44:	095b      	lsrs	r3, r3, #5
 8001d46:	2064      	movs	r0, #100	; 0x64
 8001d48:	fb00 f303 	mul.w	r3, r0, r3
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	011b      	lsls	r3, r3, #4
 8001d50:	3332      	adds	r3, #50	; 0x32
 8001d52:	4a08      	ldr	r2, [pc, #32]	; (8001d74 <UART_SetConfig+0x1b0>)
 8001d54:	fba2 2303 	umull	r2, r3, r2, r3
 8001d58:	095b      	lsrs	r3, r3, #5
 8001d5a:	f003 020f 	and.w	r2, r3, #15
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	440a      	add	r2, r1
 8001d64:	609a      	str	r2, [r3, #8]
 8001d66:	bf00      	nop
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40013800 	.word	0x40013800
 8001d74:	51eb851f 	.word	0x51eb851f

08001d78 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d7e:	f3ef 8305 	mrs	r3, IPSR
 8001d82:	60bb      	str	r3, [r7, #8]
  return(result);
 8001d84:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10f      	bne.n	8001daa <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d8a:	f3ef 8310 	mrs	r3, PRIMASK
 8001d8e:	607b      	str	r3, [r7, #4]
  return(result);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d109      	bne.n	8001daa <osKernelInitialize+0x32>
 8001d96:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <osKernelInitialize+0x60>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d109      	bne.n	8001db2 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001d9e:	f3ef 8311 	mrs	r3, BASEPRI
 8001da2:	603b      	str	r3, [r7, #0]
  return(result);
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001daa:	f06f 0305 	mvn.w	r3, #5
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	e00c      	b.n	8001dcc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001db2:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <osKernelInitialize+0x60>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d105      	bne.n	8001dc6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8001dba:	4b07      	ldr	r3, [pc, #28]	; (8001dd8 <osKernelInitialize+0x60>)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	e002      	b.n	8001dcc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr
 8001dd8:	20000098 	.word	0x20000098

08001ddc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001de2:	f3ef 8305 	mrs	r3, IPSR
 8001de6:	60bb      	str	r3, [r7, #8]
  return(result);
 8001de8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d10f      	bne.n	8001e0e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001dee:	f3ef 8310 	mrs	r3, PRIMASK
 8001df2:	607b      	str	r3, [r7, #4]
  return(result);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d109      	bne.n	8001e0e <osKernelStart+0x32>
 8001dfa:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <osKernelStart+0x64>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d109      	bne.n	8001e16 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001e02:	f3ef 8311 	mrs	r3, BASEPRI
 8001e06:	603b      	str	r3, [r7, #0]
  return(result);
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <osKernelStart+0x3a>
    stat = osErrorISR;
 8001e0e:	f06f 0305 	mvn.w	r3, #5
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	e00e      	b.n	8001e34 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8001e16:	4b0a      	ldr	r3, [pc, #40]	; (8001e40 <osKernelStart+0x64>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d107      	bne.n	8001e2e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8001e1e:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <osKernelStart+0x64>)
 8001e20:	2202      	movs	r2, #2
 8001e22:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001e24:	f001 f862 	bl	8002eec <vTaskStartScheduler>
      stat = osOK;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	e002      	b.n	8001e34 <osKernelStart+0x58>
    } else {
      stat = osError;
 8001e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e32:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001e34:	68fb      	ldr	r3, [r7, #12]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000098 	.word	0x20000098

08001e44 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b092      	sub	sp, #72	; 0x48
 8001e48:	af04      	add	r7, sp, #16
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e54:	f3ef 8305 	mrs	r3, IPSR
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f040 8094 	bne.w	8001f8a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e62:	f3ef 8310 	mrs	r3, PRIMASK
 8001e66:	623b      	str	r3, [r7, #32]
  return(result);
 8001e68:	6a3b      	ldr	r3, [r7, #32]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f040 808d 	bne.w	8001f8a <osThreadNew+0x146>
 8001e70:	4b48      	ldr	r3, [pc, #288]	; (8001f94 <osThreadNew+0x150>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d106      	bne.n	8001e86 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001e78:	f3ef 8311 	mrs	r3, BASEPRI
 8001e7c:	61fb      	str	r3, [r7, #28]
  return(result);
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f040 8082 	bne.w	8001f8a <osThreadNew+0x146>
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d07e      	beq.n	8001f8a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8001e8c:	2340      	movs	r3, #64	; 0x40
 8001e8e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8001e90:	2318      	movs	r3, #24
 8001e92:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8001e94:	2300      	movs	r3, #0
 8001e96:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8001e98:	f107 031b 	add.w	r3, r7, #27
 8001e9c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8001e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d045      	beq.n	8001f36 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d002      	beq.n	8001eb8 <osThreadNew+0x74>
        name = attr->name;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d002      	beq.n	8001ec6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d008      	beq.n	8001ede <osThreadNew+0x9a>
 8001ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ece:	2b38      	cmp	r3, #56	; 0x38
 8001ed0:	d805      	bhi.n	8001ede <osThreadNew+0x9a>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <osThreadNew+0x9e>
        return (NULL);
 8001ede:	2300      	movs	r3, #0
 8001ee0:	e054      	b.n	8001f8c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	089b      	lsrs	r3, r3, #2
 8001ef0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00e      	beq.n	8001f18 <osThreadNew+0xd4>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	2b5b      	cmp	r3, #91	; 0x5b
 8001f00:	d90a      	bls.n	8001f18 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d006      	beq.n	8001f18 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d002      	beq.n	8001f18 <osThreadNew+0xd4>
        mem = 1;
 8001f12:	2301      	movs	r3, #1
 8001f14:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f16:	e010      	b.n	8001f3a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d10c      	bne.n	8001f3a <osThreadNew+0xf6>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d108      	bne.n	8001f3a <osThreadNew+0xf6>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d104      	bne.n	8001f3a <osThreadNew+0xf6>
          mem = 0;
 8001f30:	2300      	movs	r3, #0
 8001f32:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f34:	e001      	b.n	8001f3a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8001f36:	2300      	movs	r3, #0
 8001f38:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8001f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d110      	bne.n	8001f62 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001f48:	9202      	str	r2, [sp, #8]
 8001f4a:	9301      	str	r3, [sp, #4]
 8001f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f54:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001f56:	68f8      	ldr	r0, [r7, #12]
 8001f58:	f000 fe00 	bl	8002b5c <xTaskCreateStatic>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	617b      	str	r3, [r7, #20]
 8001f60:	e013      	b.n	8001f8a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8001f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d110      	bne.n	8001f8a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	f107 0314 	add.w	r3, r7, #20
 8001f70:	9301      	str	r3, [sp, #4]
 8001f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f74:	9300      	str	r3, [sp, #0]
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	f000 fe47 	bl	8002c0e <xTaskCreate>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d001      	beq.n	8001f8a <osThreadNew+0x146>
          hTask = NULL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001f8a:	697b      	ldr	r3, [r7, #20]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3738      	adds	r7, #56	; 0x38
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	20000098 	.word	0x20000098

08001f98 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fa0:	f3ef 8305 	mrs	r3, IPSR
 8001fa4:	613b      	str	r3, [r7, #16]
  return(result);
 8001fa6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d10f      	bne.n	8001fcc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fac:	f3ef 8310 	mrs	r3, PRIMASK
 8001fb0:	60fb      	str	r3, [r7, #12]
  return(result);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d109      	bne.n	8001fcc <osDelay+0x34>
 8001fb8:	4b0d      	ldr	r3, [pc, #52]	; (8001ff0 <osDelay+0x58>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d109      	bne.n	8001fd4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001fc0:	f3ef 8311 	mrs	r3, BASEPRI
 8001fc4:	60bb      	str	r3, [r7, #8]
  return(result);
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <osDelay+0x3c>
    stat = osErrorISR;
 8001fcc:	f06f 0305 	mvn.w	r3, #5
 8001fd0:	617b      	str	r3, [r7, #20]
 8001fd2:	e007      	b.n	8001fe4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d002      	beq.n	8001fe4 <osDelay+0x4c>
      vTaskDelay(ticks);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 ff50 	bl	8002e84 <vTaskDelay>
    }
  }

  return (stat);
 8001fe4:	697b      	ldr	r3, [r7, #20]
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3718      	adds	r7, #24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20000098 	.word	0x20000098

08001ff4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4a06      	ldr	r2, [pc, #24]	; (800201c <vApplicationGetIdleTaskMemory+0x28>)
 8002004:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	4a05      	ldr	r2, [pc, #20]	; (8002020 <vApplicationGetIdleTaskMemory+0x2c>)
 800200a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2240      	movs	r2, #64	; 0x40
 8002010:	601a      	str	r2, [r3, #0]
}
 8002012:	bf00      	nop
 8002014:	3714      	adds	r7, #20
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr
 800201c:	2000009c 	.word	0x2000009c
 8002020:	200000f8 	.word	0x200000f8

08002024 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	4a06      	ldr	r2, [pc, #24]	; (800204c <vApplicationGetTimerTaskMemory+0x28>)
 8002034:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	4a05      	ldr	r2, [pc, #20]	; (8002050 <vApplicationGetTimerTaskMemory+0x2c>)
 800203a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2280      	movs	r2, #128	; 0x80
 8002040:	601a      	str	r2, [r3, #0]
}
 8002042:	bf00      	nop
 8002044:	3714      	adds	r7, #20
 8002046:	46bd      	mov	sp, r7
 8002048:	bc80      	pop	{r7}
 800204a:	4770      	bx	lr
 800204c:	200001f8 	.word	0x200001f8
 8002050:	20000254 	.word	0x20000254

08002054 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f103 0208 	add.w	r2, r3, #8
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f04f 32ff 	mov.w	r2, #4294967295
 800206c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f103 0208 	add.w	r2, r3, #8
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f103 0208 	add.w	r2, r3, #8
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	bc80      	pop	{r7}
 8002090:	4770      	bx	lr

08002092 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr

080020aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80020aa:	b480      	push	{r7}
 80020ac:	b085      	sub	sp, #20
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
 80020b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	1c5a      	adds	r2, r3, #1
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	601a      	str	r2, [r3, #0]
}
 80020e6:	bf00      	nop
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr

080020f0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002106:	d103      	bne.n	8002110 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	e00c      	b.n	800212a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3308      	adds	r3, #8
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	e002      	b.n	800211e <vListInsert+0x2e>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68ba      	ldr	r2, [r7, #8]
 8002126:	429a      	cmp	r2, r3
 8002128:	d2f6      	bcs.n	8002118 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	1c5a      	adds	r2, r3, #1
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	601a      	str	r2, [r3, #0]
}
 8002156:	bf00      	nop
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr

08002160 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	6892      	ldr	r2, [r2, #8]
 8002176:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	6852      	ldr	r2, [r2, #4]
 8002180:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	429a      	cmp	r2, r3
 800218a:	d103      	bne.n	8002194 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	1e5a      	subs	r2, r3, #1
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bc80      	pop	{r7}
 80021b0:	4770      	bx	lr
	...

080021b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d109      	bne.n	80021dc <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80021c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021cc:	f383 8811 	msr	BASEPRI, r3
 80021d0:	f3bf 8f6f 	isb	sy
 80021d4:	f3bf 8f4f 	dsb	sy
 80021d8:	60bb      	str	r3, [r7, #8]
 80021da:	e7fe      	b.n	80021da <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80021dc:	f001 ffec 	bl	80041b8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e8:	68f9      	ldr	r1, [r7, #12]
 80021ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80021ec:	fb01 f303 	mul.w	r3, r1, r3
 80021f0:	441a      	add	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800220c:	3b01      	subs	r3, #1
 800220e:	68f9      	ldr	r1, [r7, #12]
 8002210:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002212:	fb01 f303 	mul.w	r3, r1, r3
 8002216:	441a      	add	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	22ff      	movs	r2, #255	; 0xff
 8002220:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	22ff      	movs	r2, #255	; 0xff
 8002228:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d114      	bne.n	800225c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d01a      	beq.n	8002270 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	3310      	adds	r3, #16
 800223e:	4618      	mov	r0, r3
 8002240:	f001 f8d8 	bl	80033f4 <xTaskRemoveFromEventList>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d012      	beq.n	8002270 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800224a:	4b0d      	ldr	r3, [pc, #52]	; (8002280 <xQueueGenericReset+0xcc>)
 800224c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	f3bf 8f4f 	dsb	sy
 8002256:	f3bf 8f6f 	isb	sy
 800225a:	e009      	b.n	8002270 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	3310      	adds	r3, #16
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff fef7 	bl	8002054 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	3324      	adds	r3, #36	; 0x24
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff fef2 	bl	8002054 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002270:	f001 ffd0 	bl	8004214 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002274:	2301      	movs	r3, #1
}
 8002276:	4618      	mov	r0, r3
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	e000ed04 	.word	0xe000ed04

08002284 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002284:	b580      	push	{r7, lr}
 8002286:	b08e      	sub	sp, #56	; 0x38
 8002288:	af02      	add	r7, sp, #8
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
 8002290:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d109      	bne.n	80022ac <xQueueGenericCreateStatic+0x28>
 8002298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800229c:	f383 8811 	msr	BASEPRI, r3
 80022a0:	f3bf 8f6f 	isb	sy
 80022a4:	f3bf 8f4f 	dsb	sy
 80022a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80022aa:	e7fe      	b.n	80022aa <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d109      	bne.n	80022c6 <xQueueGenericCreateStatic+0x42>
 80022b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022b6:	f383 8811 	msr	BASEPRI, r3
 80022ba:	f3bf 8f6f 	isb	sy
 80022be:	f3bf 8f4f 	dsb	sy
 80022c2:	627b      	str	r3, [r7, #36]	; 0x24
 80022c4:	e7fe      	b.n	80022c4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d002      	beq.n	80022d2 <xQueueGenericCreateStatic+0x4e>
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <xQueueGenericCreateStatic+0x52>
 80022d2:	2301      	movs	r3, #1
 80022d4:	e000      	b.n	80022d8 <xQueueGenericCreateStatic+0x54>
 80022d6:	2300      	movs	r3, #0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d109      	bne.n	80022f0 <xQueueGenericCreateStatic+0x6c>
 80022dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022e0:	f383 8811 	msr	BASEPRI, r3
 80022e4:	f3bf 8f6f 	isb	sy
 80022e8:	f3bf 8f4f 	dsb	sy
 80022ec:	623b      	str	r3, [r7, #32]
 80022ee:	e7fe      	b.n	80022ee <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d102      	bne.n	80022fc <xQueueGenericCreateStatic+0x78>
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <xQueueGenericCreateStatic+0x7c>
 80022fc:	2301      	movs	r3, #1
 80022fe:	e000      	b.n	8002302 <xQueueGenericCreateStatic+0x7e>
 8002300:	2300      	movs	r3, #0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d109      	bne.n	800231a <xQueueGenericCreateStatic+0x96>
 8002306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800230a:	f383 8811 	msr	BASEPRI, r3
 800230e:	f3bf 8f6f 	isb	sy
 8002312:	f3bf 8f4f 	dsb	sy
 8002316:	61fb      	str	r3, [r7, #28]
 8002318:	e7fe      	b.n	8002318 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800231a:	2350      	movs	r3, #80	; 0x50
 800231c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	2b50      	cmp	r3, #80	; 0x50
 8002322:	d009      	beq.n	8002338 <xQueueGenericCreateStatic+0xb4>
 8002324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002328:	f383 8811 	msr	BASEPRI, r3
 800232c:	f3bf 8f6f 	isb	sy
 8002330:	f3bf 8f4f 	dsb	sy
 8002334:	61bb      	str	r3, [r7, #24]
 8002336:	e7fe      	b.n	8002336 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800233c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00d      	beq.n	800235e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002344:	2201      	movs	r2, #1
 8002346:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800234a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800234e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	4613      	mov	r3, r2
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	68b9      	ldr	r1, [r7, #8]
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 f805 	bl	8002368 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800235e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002360:	4618      	mov	r0, r3
 8002362:	3730      	adds	r7, #48	; 0x30
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
 8002374:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d103      	bne.n	8002384 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	e002      	b.n	800238a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002396:	2101      	movs	r1, #1
 8002398:	69b8      	ldr	r0, [r7, #24]
 800239a:	f7ff ff0b 	bl	80021b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	78fa      	ldrb	r2, [r7, #3]
 80023a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80023a6:	bf00      	nop
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
	...

080023b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b08e      	sub	sp, #56	; 0x38
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
 80023bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80023be:	2300      	movs	r3, #0
 80023c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80023c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d109      	bne.n	80023e0 <xQueueGenericSend+0x30>
 80023cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023d0:	f383 8811 	msr	BASEPRI, r3
 80023d4:	f3bf 8f6f 	isb	sy
 80023d8:	f3bf 8f4f 	dsb	sy
 80023dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80023de:	e7fe      	b.n	80023de <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d103      	bne.n	80023ee <xQueueGenericSend+0x3e>
 80023e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <xQueueGenericSend+0x42>
 80023ee:	2301      	movs	r3, #1
 80023f0:	e000      	b.n	80023f4 <xQueueGenericSend+0x44>
 80023f2:	2300      	movs	r3, #0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d109      	bne.n	800240c <xQueueGenericSend+0x5c>
 80023f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023fc:	f383 8811 	msr	BASEPRI, r3
 8002400:	f3bf 8f6f 	isb	sy
 8002404:	f3bf 8f4f 	dsb	sy
 8002408:	627b      	str	r3, [r7, #36]	; 0x24
 800240a:	e7fe      	b.n	800240a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	2b02      	cmp	r3, #2
 8002410:	d103      	bne.n	800241a <xQueueGenericSend+0x6a>
 8002412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002416:	2b01      	cmp	r3, #1
 8002418:	d101      	bne.n	800241e <xQueueGenericSend+0x6e>
 800241a:	2301      	movs	r3, #1
 800241c:	e000      	b.n	8002420 <xQueueGenericSend+0x70>
 800241e:	2300      	movs	r3, #0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d109      	bne.n	8002438 <xQueueGenericSend+0x88>
 8002424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002428:	f383 8811 	msr	BASEPRI, r3
 800242c:	f3bf 8f6f 	isb	sy
 8002430:	f3bf 8f4f 	dsb	sy
 8002434:	623b      	str	r3, [r7, #32]
 8002436:	e7fe      	b.n	8002436 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002438:	f001 f996 	bl	8003768 <xTaskGetSchedulerState>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d102      	bne.n	8002448 <xQueueGenericSend+0x98>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d101      	bne.n	800244c <xQueueGenericSend+0x9c>
 8002448:	2301      	movs	r3, #1
 800244a:	e000      	b.n	800244e <xQueueGenericSend+0x9e>
 800244c:	2300      	movs	r3, #0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d109      	bne.n	8002466 <xQueueGenericSend+0xb6>
 8002452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002456:	f383 8811 	msr	BASEPRI, r3
 800245a:	f3bf 8f6f 	isb	sy
 800245e:	f3bf 8f4f 	dsb	sy
 8002462:	61fb      	str	r3, [r7, #28]
 8002464:	e7fe      	b.n	8002464 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002466:	f001 fea7 	bl	80041b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800246a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800246c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800246e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002472:	429a      	cmp	r2, r3
 8002474:	d302      	bcc.n	800247c <xQueueGenericSend+0xcc>
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	2b02      	cmp	r3, #2
 800247a:	d129      	bne.n	80024d0 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	68b9      	ldr	r1, [r7, #8]
 8002480:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002482:	f000 f9ff 	bl	8002884 <prvCopyDataToQueue>
 8002486:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800248a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248c:	2b00      	cmp	r3, #0
 800248e:	d010      	beq.n	80024b2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002492:	3324      	adds	r3, #36	; 0x24
 8002494:	4618      	mov	r0, r3
 8002496:	f000 ffad 	bl	80033f4 <xTaskRemoveFromEventList>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d013      	beq.n	80024c8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80024a0:	4b3f      	ldr	r3, [pc, #252]	; (80025a0 <xQueueGenericSend+0x1f0>)
 80024a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	f3bf 8f4f 	dsb	sy
 80024ac:	f3bf 8f6f 	isb	sy
 80024b0:	e00a      	b.n	80024c8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80024b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d007      	beq.n	80024c8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80024b8:	4b39      	ldr	r3, [pc, #228]	; (80025a0 <xQueueGenericSend+0x1f0>)
 80024ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	f3bf 8f4f 	dsb	sy
 80024c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80024c8:	f001 fea4 	bl	8004214 <vPortExitCritical>
				return pdPASS;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e063      	b.n	8002598 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d103      	bne.n	80024de <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80024d6:	f001 fe9d 	bl	8004214 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80024da:	2300      	movs	r3, #0
 80024dc:	e05c      	b.n	8002598 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80024de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d106      	bne.n	80024f2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80024e4:	f107 0314 	add.w	r3, r7, #20
 80024e8:	4618      	mov	r0, r3
 80024ea:	f000 ffe5 	bl	80034b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80024ee:	2301      	movs	r3, #1
 80024f0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80024f2:	f001 fe8f 	bl	8004214 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80024f6:	f000 fd5d 	bl	8002fb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80024fa:	f001 fe5d 	bl	80041b8 <vPortEnterCritical>
 80024fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002500:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002504:	b25b      	sxtb	r3, r3
 8002506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250a:	d103      	bne.n	8002514 <xQueueGenericSend+0x164>
 800250c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250e:	2200      	movs	r2, #0
 8002510:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002516:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800251a:	b25b      	sxtb	r3, r3
 800251c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002520:	d103      	bne.n	800252a <xQueueGenericSend+0x17a>
 8002522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002524:	2200      	movs	r2, #0
 8002526:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800252a:	f001 fe73 	bl	8004214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800252e:	1d3a      	adds	r2, r7, #4
 8002530:	f107 0314 	add.w	r3, r7, #20
 8002534:	4611      	mov	r1, r2
 8002536:	4618      	mov	r0, r3
 8002538:	f000 ffd4 	bl	80034e4 <xTaskCheckForTimeOut>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d124      	bne.n	800258c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002542:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002544:	f000 fa96 	bl	8002a74 <prvIsQueueFull>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d018      	beq.n	8002580 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800254e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002550:	3310      	adds	r3, #16
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	4611      	mov	r1, r2
 8002556:	4618      	mov	r0, r3
 8002558:	f000 fefe 	bl	8003358 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800255c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800255e:	f000 fa21 	bl	80029a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002562:	f000 fd35 	bl	8002fd0 <xTaskResumeAll>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	f47f af7c 	bne.w	8002466 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800256e:	4b0c      	ldr	r3, [pc, #48]	; (80025a0 <xQueueGenericSend+0x1f0>)
 8002570:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	f3bf 8f4f 	dsb	sy
 800257a:	f3bf 8f6f 	isb	sy
 800257e:	e772      	b.n	8002466 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002580:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002582:	f000 fa0f 	bl	80029a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002586:	f000 fd23 	bl	8002fd0 <xTaskResumeAll>
 800258a:	e76c      	b.n	8002466 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800258c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800258e:	f000 fa09 	bl	80029a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002592:	f000 fd1d 	bl	8002fd0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002596:	2300      	movs	r3, #0
		}
	}
}
 8002598:	4618      	mov	r0, r3
 800259a:	3738      	adds	r7, #56	; 0x38
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	e000ed04 	.word	0xe000ed04

080025a4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b08e      	sub	sp, #56	; 0x38
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
 80025b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80025b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d109      	bne.n	80025d0 <xQueueGenericSendFromISR+0x2c>
 80025bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c0:	f383 8811 	msr	BASEPRI, r3
 80025c4:	f3bf 8f6f 	isb	sy
 80025c8:	f3bf 8f4f 	dsb	sy
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24
 80025ce:	e7fe      	b.n	80025ce <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d103      	bne.n	80025de <xQueueGenericSendFromISR+0x3a>
 80025d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <xQueueGenericSendFromISR+0x3e>
 80025de:	2301      	movs	r3, #1
 80025e0:	e000      	b.n	80025e4 <xQueueGenericSendFromISR+0x40>
 80025e2:	2300      	movs	r3, #0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d109      	bne.n	80025fc <xQueueGenericSendFromISR+0x58>
 80025e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ec:	f383 8811 	msr	BASEPRI, r3
 80025f0:	f3bf 8f6f 	isb	sy
 80025f4:	f3bf 8f4f 	dsb	sy
 80025f8:	623b      	str	r3, [r7, #32]
 80025fa:	e7fe      	b.n	80025fa <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d103      	bne.n	800260a <xQueueGenericSendFromISR+0x66>
 8002602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002606:	2b01      	cmp	r3, #1
 8002608:	d101      	bne.n	800260e <xQueueGenericSendFromISR+0x6a>
 800260a:	2301      	movs	r3, #1
 800260c:	e000      	b.n	8002610 <xQueueGenericSendFromISR+0x6c>
 800260e:	2300      	movs	r3, #0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d109      	bne.n	8002628 <xQueueGenericSendFromISR+0x84>
 8002614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002618:	f383 8811 	msr	BASEPRI, r3
 800261c:	f3bf 8f6f 	isb	sy
 8002620:	f3bf 8f4f 	dsb	sy
 8002624:	61fb      	str	r3, [r7, #28]
 8002626:	e7fe      	b.n	8002626 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002628:	f001 fe80 	bl	800432c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800262c:	f3ef 8211 	mrs	r2, BASEPRI
 8002630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002634:	f383 8811 	msr	BASEPRI, r3
 8002638:	f3bf 8f6f 	isb	sy
 800263c:	f3bf 8f4f 	dsb	sy
 8002640:	61ba      	str	r2, [r7, #24]
 8002642:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002644:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002646:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800264c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002650:	429a      	cmp	r2, r3
 8002652:	d302      	bcc.n	800265a <xQueueGenericSendFromISR+0xb6>
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	2b02      	cmp	r3, #2
 8002658:	d12c      	bne.n	80026b4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800265a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800265c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002660:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	68b9      	ldr	r1, [r7, #8]
 8002668:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800266a:	f000 f90b 	bl	8002884 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800266e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002676:	d112      	bne.n	800269e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	2b00      	cmp	r3, #0
 800267e:	d016      	beq.n	80026ae <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002682:	3324      	adds	r3, #36	; 0x24
 8002684:	4618      	mov	r0, r3
 8002686:	f000 feb5 	bl	80033f4 <xTaskRemoveFromEventList>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00e      	beq.n	80026ae <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00b      	beq.n	80026ae <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2201      	movs	r2, #1
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	e007      	b.n	80026ae <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800269e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80026a2:	3301      	adds	r3, #1
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	b25a      	sxtb	r2, r3
 80026a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80026ae:	2301      	movs	r3, #1
 80026b0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80026b2:	e001      	b.n	80026b8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80026b4:	2300      	movs	r3, #0
 80026b6:	637b      	str	r3, [r7, #52]	; 0x34
 80026b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ba:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80026c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3738      	adds	r7, #56	; 0x38
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08c      	sub	sp, #48	; 0x30
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80026d8:	2300      	movs	r3, #0
 80026da:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80026e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d109      	bne.n	80026fa <xQueueReceive+0x2e>
	__asm volatile
 80026e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ea:	f383 8811 	msr	BASEPRI, r3
 80026ee:	f3bf 8f6f 	isb	sy
 80026f2:	f3bf 8f4f 	dsb	sy
 80026f6:	623b      	str	r3, [r7, #32]
 80026f8:	e7fe      	b.n	80026f8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d103      	bne.n	8002708 <xQueueReceive+0x3c>
 8002700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <xQueueReceive+0x40>
 8002708:	2301      	movs	r3, #1
 800270a:	e000      	b.n	800270e <xQueueReceive+0x42>
 800270c:	2300      	movs	r3, #0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d109      	bne.n	8002726 <xQueueReceive+0x5a>
 8002712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002716:	f383 8811 	msr	BASEPRI, r3
 800271a:	f3bf 8f6f 	isb	sy
 800271e:	f3bf 8f4f 	dsb	sy
 8002722:	61fb      	str	r3, [r7, #28]
 8002724:	e7fe      	b.n	8002724 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002726:	f001 f81f 	bl	8003768 <xTaskGetSchedulerState>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d102      	bne.n	8002736 <xQueueReceive+0x6a>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <xQueueReceive+0x6e>
 8002736:	2301      	movs	r3, #1
 8002738:	e000      	b.n	800273c <xQueueReceive+0x70>
 800273a:	2300      	movs	r3, #0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d109      	bne.n	8002754 <xQueueReceive+0x88>
 8002740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002744:	f383 8811 	msr	BASEPRI, r3
 8002748:	f3bf 8f6f 	isb	sy
 800274c:	f3bf 8f4f 	dsb	sy
 8002750:	61bb      	str	r3, [r7, #24]
 8002752:	e7fe      	b.n	8002752 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002754:	f001 fd30 	bl	80041b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800275c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	2b00      	cmp	r3, #0
 8002762:	d01f      	beq.n	80027a4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002764:	68b9      	ldr	r1, [r7, #8]
 8002766:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002768:	f000 f8f6 	bl	8002958 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	1e5a      	subs	r2, r3, #1
 8002770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002772:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00f      	beq.n	800279c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800277c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277e:	3310      	adds	r3, #16
 8002780:	4618      	mov	r0, r3
 8002782:	f000 fe37 	bl	80033f4 <xTaskRemoveFromEventList>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d007      	beq.n	800279c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800278c:	4b3c      	ldr	r3, [pc, #240]	; (8002880 <xQueueReceive+0x1b4>)
 800278e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	f3bf 8f4f 	dsb	sy
 8002798:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800279c:	f001 fd3a 	bl	8004214 <vPortExitCritical>
				return pdPASS;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e069      	b.n	8002878 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d103      	bne.n	80027b2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80027aa:	f001 fd33 	bl	8004214 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80027ae:	2300      	movs	r3, #0
 80027b0:	e062      	b.n	8002878 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80027b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d106      	bne.n	80027c6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80027b8:	f107 0310 	add.w	r3, r7, #16
 80027bc:	4618      	mov	r0, r3
 80027be:	f000 fe7b 	bl	80034b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80027c2:	2301      	movs	r3, #1
 80027c4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80027c6:	f001 fd25 	bl	8004214 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80027ca:	f000 fbf3 	bl	8002fb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80027ce:	f001 fcf3 	bl	80041b8 <vPortEnterCritical>
 80027d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027d8:	b25b      	sxtb	r3, r3
 80027da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027de:	d103      	bne.n	80027e8 <xQueueReceive+0x11c>
 80027e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027ee:	b25b      	sxtb	r3, r3
 80027f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f4:	d103      	bne.n	80027fe <xQueueReceive+0x132>
 80027f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027fe:	f001 fd09 	bl	8004214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002802:	1d3a      	adds	r2, r7, #4
 8002804:	f107 0310 	add.w	r3, r7, #16
 8002808:	4611      	mov	r1, r2
 800280a:	4618      	mov	r0, r3
 800280c:	f000 fe6a 	bl	80034e4 <xTaskCheckForTimeOut>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d123      	bne.n	800285e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002816:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002818:	f000 f916 	bl	8002a48 <prvIsQueueEmpty>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d017      	beq.n	8002852 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002824:	3324      	adds	r3, #36	; 0x24
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	4611      	mov	r1, r2
 800282a:	4618      	mov	r0, r3
 800282c:	f000 fd94 	bl	8003358 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002832:	f000 f8b7 	bl	80029a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002836:	f000 fbcb 	bl	8002fd0 <xTaskResumeAll>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d189      	bne.n	8002754 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8002840:	4b0f      	ldr	r3, [pc, #60]	; (8002880 <xQueueReceive+0x1b4>)
 8002842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	f3bf 8f4f 	dsb	sy
 800284c:	f3bf 8f6f 	isb	sy
 8002850:	e780      	b.n	8002754 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002852:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002854:	f000 f8a6 	bl	80029a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002858:	f000 fbba 	bl	8002fd0 <xTaskResumeAll>
 800285c:	e77a      	b.n	8002754 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800285e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002860:	f000 f8a0 	bl	80029a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002864:	f000 fbb4 	bl	8002fd0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002868:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800286a:	f000 f8ed 	bl	8002a48 <prvIsQueueEmpty>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	f43f af6f 	beq.w	8002754 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002876:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002878:	4618      	mov	r0, r3
 800287a:	3730      	adds	r7, #48	; 0x30
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	e000ed04 	.word	0xe000ed04

08002884 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002890:	2300      	movs	r3, #0
 8002892:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002898:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d10d      	bne.n	80028be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d14d      	bne.n	8002946 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f000 ff78 	bl	80037a4 <xTaskPriorityDisinherit>
 80028b4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	605a      	str	r2, [r3, #4]
 80028bc:	e043      	b.n	8002946 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d119      	bne.n	80028f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6898      	ldr	r0, [r3, #8]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028cc:	461a      	mov	r2, r3
 80028ce:	68b9      	ldr	r1, [r7, #8]
 80028d0:	f001 ff66 	bl	80047a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028dc:	441a      	add	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	689a      	ldr	r2, [r3, #8]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d32b      	bcc.n	8002946 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	609a      	str	r2, [r3, #8]
 80028f6:	e026      	b.n	8002946 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	68d8      	ldr	r0, [r3, #12]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002900:	461a      	mov	r2, r3
 8002902:	68b9      	ldr	r1, [r7, #8]
 8002904:	f001 ff4c 	bl	80047a0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002910:	425b      	negs	r3, r3
 8002912:	441a      	add	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	68da      	ldr	r2, [r3, #12]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	429a      	cmp	r2, r3
 8002922:	d207      	bcs.n	8002934 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292c:	425b      	negs	r3, r3
 800292e:	441a      	add	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b02      	cmp	r3, #2
 8002938:	d105      	bne.n	8002946 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d002      	beq.n	8002946 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	3b01      	subs	r3, #1
 8002944:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1c5a      	adds	r2, r3, #1
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800294e:	697b      	ldr	r3, [r7, #20]
}
 8002950:	4618      	mov	r0, r3
 8002952:	3718      	adds	r7, #24
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	2b00      	cmp	r3, #0
 8002968:	d018      	beq.n	800299c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	441a      	add	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68da      	ldr	r2, [r3, #12]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	429a      	cmp	r2, r3
 8002982:	d303      	bcc.n	800298c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68d9      	ldr	r1, [r3, #12]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002994:	461a      	mov	r2, r3
 8002996:	6838      	ldr	r0, [r7, #0]
 8002998:	f001 ff02 	bl	80047a0 <memcpy>
	}
}
 800299c:	bf00      	nop
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80029ac:	f001 fc04 	bl	80041b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80029b8:	e011      	b.n	80029de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d012      	beq.n	80029e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	3324      	adds	r3, #36	; 0x24
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 fd14 	bl	80033f4 <xTaskRemoveFromEventList>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80029d2:	f000 fde7 	bl	80035a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80029d6:	7bfb      	ldrb	r3, [r7, #15]
 80029d8:	3b01      	subs	r3, #1
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80029de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	dce9      	bgt.n	80029ba <prvUnlockQueue+0x16>
 80029e6:	e000      	b.n	80029ea <prvUnlockQueue+0x46>
					break;
 80029e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	22ff      	movs	r2, #255	; 0xff
 80029ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80029f2:	f001 fc0f 	bl	8004214 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80029f6:	f001 fbdf 	bl	80041b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a02:	e011      	b.n	8002a28 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d012      	beq.n	8002a32 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3310      	adds	r3, #16
 8002a10:	4618      	mov	r0, r3
 8002a12:	f000 fcef 	bl	80033f4 <xTaskRemoveFromEventList>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002a1c:	f000 fdc2 	bl	80035a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002a20:	7bbb      	ldrb	r3, [r7, #14]
 8002a22:	3b01      	subs	r3, #1
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	dce9      	bgt.n	8002a04 <prvUnlockQueue+0x60>
 8002a30:	e000      	b.n	8002a34 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002a32:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	22ff      	movs	r2, #255	; 0xff
 8002a38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002a3c:	f001 fbea 	bl	8004214 <vPortExitCritical>
}
 8002a40:	bf00      	nop
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002a50:	f001 fbb2 	bl	80041b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d102      	bne.n	8002a62 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	e001      	b.n	8002a66 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002a62:	2300      	movs	r3, #0
 8002a64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002a66:	f001 fbd5 	bl	8004214 <vPortExitCritical>

	return xReturn;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3710      	adds	r7, #16
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002a7c:	f001 fb9c 	bl	80041b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d102      	bne.n	8002a92 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	e001      	b.n	8002a96 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002a92:	2300      	movs	r3, #0
 8002a94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002a96:	f001 fbbd 	bl	8004214 <vPortExitCritical>

	return xReturn;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60fb      	str	r3, [r7, #12]
 8002ab2:	e014      	b.n	8002ade <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002ab4:	4a0e      	ldr	r2, [pc, #56]	; (8002af0 <vQueueAddToRegistry+0x4c>)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d10b      	bne.n	8002ad8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002ac0:	490b      	ldr	r1, [pc, #44]	; (8002af0 <vQueueAddToRegistry+0x4c>)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002aca:	4a09      	ldr	r2, [pc, #36]	; (8002af0 <vQueueAddToRegistry+0x4c>)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	4413      	add	r3, r2
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002ad6:	e005      	b.n	8002ae4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	3301      	adds	r3, #1
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2b07      	cmp	r3, #7
 8002ae2:	d9e7      	bls.n	8002ab4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002ae4:	bf00      	nop
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bc80      	pop	{r7}
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	20001bc4 	.word	0x20001bc4

08002af4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002b04:	f001 fb58 	bl	80041b8 <vPortEnterCritical>
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b0e:	b25b      	sxtb	r3, r3
 8002b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b14:	d103      	bne.n	8002b1e <vQueueWaitForMessageRestricted+0x2a>
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b24:	b25b      	sxtb	r3, r3
 8002b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b2a:	d103      	bne.n	8002b34 <vQueueWaitForMessageRestricted+0x40>
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b34:	f001 fb6e 	bl	8004214 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d106      	bne.n	8002b4e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	3324      	adds	r3, #36	; 0x24
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	68b9      	ldr	r1, [r7, #8]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f000 fc29 	bl	80033a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002b4e:	6978      	ldr	r0, [r7, #20]
 8002b50:	f7ff ff28 	bl	80029a4 <prvUnlockQueue>
	}
 8002b54:	bf00      	nop
 8002b56:	3718      	adds	r7, #24
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b08e      	sub	sp, #56	; 0x38
 8002b60:	af04      	add	r7, sp, #16
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
 8002b68:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d109      	bne.n	8002b84 <xTaskCreateStatic+0x28>
 8002b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b74:	f383 8811 	msr	BASEPRI, r3
 8002b78:	f3bf 8f6f 	isb	sy
 8002b7c:	f3bf 8f4f 	dsb	sy
 8002b80:	623b      	str	r3, [r7, #32]
 8002b82:	e7fe      	b.n	8002b82 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d109      	bne.n	8002b9e <xTaskCreateStatic+0x42>
 8002b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b8e:	f383 8811 	msr	BASEPRI, r3
 8002b92:	f3bf 8f6f 	isb	sy
 8002b96:	f3bf 8f4f 	dsb	sy
 8002b9a:	61fb      	str	r3, [r7, #28]
 8002b9c:	e7fe      	b.n	8002b9c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002b9e:	235c      	movs	r3, #92	; 0x5c
 8002ba0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	2b5c      	cmp	r3, #92	; 0x5c
 8002ba6:	d009      	beq.n	8002bbc <xTaskCreateStatic+0x60>
 8002ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bac:	f383 8811 	msr	BASEPRI, r3
 8002bb0:	f3bf 8f6f 	isb	sy
 8002bb4:	f3bf 8f4f 	dsb	sy
 8002bb8:	61bb      	str	r3, [r7, #24]
 8002bba:	e7fe      	b.n	8002bba <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d01e      	beq.n	8002c00 <xTaskCreateStatic+0xa4>
 8002bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d01b      	beq.n	8002c00 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bd0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002bda:	2300      	movs	r3, #0
 8002bdc:	9303      	str	r3, [sp, #12]
 8002bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be0:	9302      	str	r3, [sp, #8]
 8002be2:	f107 0314 	add.w	r3, r7, #20
 8002be6:	9301      	str	r3, [sp, #4]
 8002be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	68b9      	ldr	r1, [r7, #8]
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f000 f850 	bl	8002c98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002bf8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002bfa:	f000 f8d3 	bl	8002da4 <prvAddNewTaskToReadyList>
 8002bfe:	e001      	b.n	8002c04 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8002c00:	2300      	movs	r3, #0
 8002c02:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002c04:	697b      	ldr	r3, [r7, #20]
	}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3728      	adds	r7, #40	; 0x28
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b08c      	sub	sp, #48	; 0x30
 8002c12:	af04      	add	r7, sp, #16
 8002c14:	60f8      	str	r0, [r7, #12]
 8002c16:	60b9      	str	r1, [r7, #8]
 8002c18:	603b      	str	r3, [r7, #0]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c1e:	88fb      	ldrh	r3, [r7, #6]
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4618      	mov	r0, r3
 8002c24:	f001 fbbe 	bl	80043a4 <pvPortMalloc>
 8002c28:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00e      	beq.n	8002c4e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002c30:	205c      	movs	r0, #92	; 0x5c
 8002c32:	f001 fbb7 	bl	80043a4 <pvPortMalloc>
 8002c36:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	631a      	str	r2, [r3, #48]	; 0x30
 8002c44:	e005      	b.n	8002c52 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002c46:	6978      	ldr	r0, [r7, #20]
 8002c48:	f001 fc6e 	bl	8004528 <vPortFree>
 8002c4c:	e001      	b.n	8002c52 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d017      	beq.n	8002c88 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002c60:	88fa      	ldrh	r2, [r7, #6]
 8002c62:	2300      	movs	r3, #0
 8002c64:	9303      	str	r3, [sp, #12]
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	9302      	str	r3, [sp, #8]
 8002c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c6c:	9301      	str	r3, [sp, #4]
 8002c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	68b9      	ldr	r1, [r7, #8]
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 f80e 	bl	8002c98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c7c:	69f8      	ldr	r0, [r7, #28]
 8002c7e:	f000 f891 	bl	8002da4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002c82:	2301      	movs	r3, #1
 8002c84:	61bb      	str	r3, [r7, #24]
 8002c86:	e002      	b.n	8002c8e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002c88:	f04f 33ff 	mov.w	r3, #4294967295
 8002c8c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002c8e:	69bb      	ldr	r3, [r7, #24]
	}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3720      	adds	r7, #32
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b088      	sub	sp, #32
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
 8002ca4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	461a      	mov	r2, r3
 8002cb0:	21a5      	movs	r1, #165	; 0xa5
 8002cb2:	f001 fd80 	bl	80047b6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	4413      	add	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	f023 0307 	bic.w	r3, r3, #7
 8002cce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	f003 0307 	and.w	r3, r3, #7
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d009      	beq.n	8002cee <prvInitialiseNewTask+0x56>
 8002cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cde:	f383 8811 	msr	BASEPRI, r3
 8002ce2:	f3bf 8f6f 	isb	sy
 8002ce6:	f3bf 8f4f 	dsb	sy
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	e7fe      	b.n	8002cec <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61fb      	str	r3, [r7, #28]
 8002cf2:	e012      	b.n	8002d1a <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002cf4:	68ba      	ldr	r2, [r7, #8]
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	7819      	ldrb	r1, [r3, #0]
 8002cfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	4413      	add	r3, r2
 8002d02:	3334      	adds	r3, #52	; 0x34
 8002d04:	460a      	mov	r2, r1
 8002d06:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d006      	beq.n	8002d22 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	3301      	adds	r3, #1
 8002d18:	61fb      	str	r3, [r7, #28]
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	2b0f      	cmp	r3, #15
 8002d1e:	d9e9      	bls.n	8002cf4 <prvInitialiseNewTask+0x5c>
 8002d20:	e000      	b.n	8002d24 <prvInitialiseNewTask+0x8c>
		{
			break;
 8002d22:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d2e:	2b37      	cmp	r3, #55	; 0x37
 8002d30:	d901      	bls.n	8002d36 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002d32:	2337      	movs	r3, #55	; 0x37
 8002d34:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d3a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d40:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d44:	2200      	movs	r2, #0
 8002d46:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4a:	3304      	adds	r3, #4
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff f9a0 	bl	8002092 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d54:	3318      	adds	r3, #24
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff f99b 	bl	8002092 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d60:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d64:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d70:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d74:	2200      	movs	r2, #0
 8002d76:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	68f9      	ldr	r1, [r7, #12]
 8002d84:	69b8      	ldr	r0, [r7, #24]
 8002d86:	f001 f929 	bl	8003fdc <pxPortInitialiseStack>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d002      	beq.n	8002d9c <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d9a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d9c:	bf00      	nop
 8002d9e:	3720      	adds	r7, #32
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002dac:	f001 fa04 	bl	80041b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002db0:	4b2d      	ldr	r3, [pc, #180]	; (8002e68 <prvAddNewTaskToReadyList+0xc4>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	3301      	adds	r3, #1
 8002db6:	4a2c      	ldr	r2, [pc, #176]	; (8002e68 <prvAddNewTaskToReadyList+0xc4>)
 8002db8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002dba:	4b2c      	ldr	r3, [pc, #176]	; (8002e6c <prvAddNewTaskToReadyList+0xc8>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d109      	bne.n	8002dd6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002dc2:	4a2a      	ldr	r2, [pc, #168]	; (8002e6c <prvAddNewTaskToReadyList+0xc8>)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002dc8:	4b27      	ldr	r3, [pc, #156]	; (8002e68 <prvAddNewTaskToReadyList+0xc4>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d110      	bne.n	8002df2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002dd0:	f000 fc0c 	bl	80035ec <prvInitialiseTaskLists>
 8002dd4:	e00d      	b.n	8002df2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002dd6:	4b26      	ldr	r3, [pc, #152]	; (8002e70 <prvAddNewTaskToReadyList+0xcc>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d109      	bne.n	8002df2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002dde:	4b23      	ldr	r3, [pc, #140]	; (8002e6c <prvAddNewTaskToReadyList+0xc8>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d802      	bhi.n	8002df2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002dec:	4a1f      	ldr	r2, [pc, #124]	; (8002e6c <prvAddNewTaskToReadyList+0xc8>)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002df2:	4b20      	ldr	r3, [pc, #128]	; (8002e74 <prvAddNewTaskToReadyList+0xd0>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	3301      	adds	r3, #1
 8002df8:	4a1e      	ldr	r2, [pc, #120]	; (8002e74 <prvAddNewTaskToReadyList+0xd0>)
 8002dfa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002dfc:	4b1d      	ldr	r3, [pc, #116]	; (8002e74 <prvAddNewTaskToReadyList+0xd0>)
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e08:	4b1b      	ldr	r3, [pc, #108]	; (8002e78 <prvAddNewTaskToReadyList+0xd4>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d903      	bls.n	8002e18 <prvAddNewTaskToReadyList+0x74>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e14:	4a18      	ldr	r2, [pc, #96]	; (8002e78 <prvAddNewTaskToReadyList+0xd4>)
 8002e16:	6013      	str	r3, [r2, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	4a15      	ldr	r2, [pc, #84]	; (8002e7c <prvAddNewTaskToReadyList+0xd8>)
 8002e26:	441a      	add	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	3304      	adds	r3, #4
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4610      	mov	r0, r2
 8002e30:	f7ff f93b 	bl	80020aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002e34:	f001 f9ee 	bl	8004214 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002e38:	4b0d      	ldr	r3, [pc, #52]	; (8002e70 <prvAddNewTaskToReadyList+0xcc>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00e      	beq.n	8002e5e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002e40:	4b0a      	ldr	r3, [pc, #40]	; (8002e6c <prvAddNewTaskToReadyList+0xc8>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d207      	bcs.n	8002e5e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002e4e:	4b0c      	ldr	r3, [pc, #48]	; (8002e80 <prvAddNewTaskToReadyList+0xdc>)
 8002e50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e54:	601a      	str	r2, [r3, #0]
 8002e56:	f3bf 8f4f 	dsb	sy
 8002e5a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e5e:	bf00      	nop
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	20000928 	.word	0x20000928
 8002e6c:	20000454 	.word	0x20000454
 8002e70:	20000934 	.word	0x20000934
 8002e74:	20000944 	.word	0x20000944
 8002e78:	20000930 	.word	0x20000930
 8002e7c:	20000458 	.word	0x20000458
 8002e80:	e000ed04 	.word	0xe000ed04

08002e84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d016      	beq.n	8002ec4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002e96:	4b13      	ldr	r3, [pc, #76]	; (8002ee4 <vTaskDelay+0x60>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d009      	beq.n	8002eb2 <vTaskDelay+0x2e>
 8002e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea2:	f383 8811 	msr	BASEPRI, r3
 8002ea6:	f3bf 8f6f 	isb	sy
 8002eaa:	f3bf 8f4f 	dsb	sy
 8002eae:	60bb      	str	r3, [r7, #8]
 8002eb0:	e7fe      	b.n	8002eb0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002eb2:	f000 f87f 	bl	8002fb4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 fcdf 	bl	800387c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002ebe:	f000 f887 	bl	8002fd0 <xTaskResumeAll>
 8002ec2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d107      	bne.n	8002eda <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002eca:	4b07      	ldr	r3, [pc, #28]	; (8002ee8 <vTaskDelay+0x64>)
 8002ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	f3bf 8f4f 	dsb	sy
 8002ed6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002eda:	bf00      	nop
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	20000950 	.word	0x20000950
 8002ee8:	e000ed04 	.word	0xe000ed04

08002eec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b08a      	sub	sp, #40	; 0x28
 8002ef0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002efa:	463a      	mov	r2, r7
 8002efc:	1d39      	adds	r1, r7, #4
 8002efe:	f107 0308 	add.w	r3, r7, #8
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7ff f876 	bl	8001ff4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002f08:	6839      	ldr	r1, [r7, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68ba      	ldr	r2, [r7, #8]
 8002f0e:	9202      	str	r2, [sp, #8]
 8002f10:	9301      	str	r3, [sp, #4]
 8002f12:	2300      	movs	r3, #0
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	2300      	movs	r3, #0
 8002f18:	460a      	mov	r2, r1
 8002f1a:	4920      	ldr	r1, [pc, #128]	; (8002f9c <vTaskStartScheduler+0xb0>)
 8002f1c:	4820      	ldr	r0, [pc, #128]	; (8002fa0 <vTaskStartScheduler+0xb4>)
 8002f1e:	f7ff fe1d 	bl	8002b5c <xTaskCreateStatic>
 8002f22:	4602      	mov	r2, r0
 8002f24:	4b1f      	ldr	r3, [pc, #124]	; (8002fa4 <vTaskStartScheduler+0xb8>)
 8002f26:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002f28:	4b1e      	ldr	r3, [pc, #120]	; (8002fa4 <vTaskStartScheduler+0xb8>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d002      	beq.n	8002f36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002f30:	2301      	movs	r3, #1
 8002f32:	617b      	str	r3, [r7, #20]
 8002f34:	e001      	b.n	8002f3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002f36:	2300      	movs	r3, #0
 8002f38:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d102      	bne.n	8002f46 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002f40:	f000 fcf0 	bl	8003924 <xTimerCreateTimerTask>
 8002f44:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d115      	bne.n	8002f78 <vTaskStartScheduler+0x8c>
 8002f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f50:	f383 8811 	msr	BASEPRI, r3
 8002f54:	f3bf 8f6f 	isb	sy
 8002f58:	f3bf 8f4f 	dsb	sy
 8002f5c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002f5e:	4b12      	ldr	r3, [pc, #72]	; (8002fa8 <vTaskStartScheduler+0xbc>)
 8002f60:	f04f 32ff 	mov.w	r2, #4294967295
 8002f64:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002f66:	4b11      	ldr	r3, [pc, #68]	; (8002fac <vTaskStartScheduler+0xc0>)
 8002f68:	2201      	movs	r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002f6c:	4b10      	ldr	r3, [pc, #64]	; (8002fb0 <vTaskStartScheduler+0xc4>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002f72:	f001 f8b1 	bl	80040d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002f76:	e00d      	b.n	8002f94 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7e:	d109      	bne.n	8002f94 <vTaskStartScheduler+0xa8>
 8002f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f84:	f383 8811 	msr	BASEPRI, r3
 8002f88:	f3bf 8f6f 	isb	sy
 8002f8c:	f3bf 8f4f 	dsb	sy
 8002f90:	60fb      	str	r3, [r7, #12]
 8002f92:	e7fe      	b.n	8002f92 <vTaskStartScheduler+0xa6>
}
 8002f94:	bf00      	nop
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	080051f8 	.word	0x080051f8
 8002fa0:	080035bd 	.word	0x080035bd
 8002fa4:	2000094c 	.word	0x2000094c
 8002fa8:	20000948 	.word	0x20000948
 8002fac:	20000934 	.word	0x20000934
 8002fb0:	2000092c 	.word	0x2000092c

08002fb4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002fb8:	4b04      	ldr	r3, [pc, #16]	; (8002fcc <vTaskSuspendAll+0x18>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	4a03      	ldr	r2, [pc, #12]	; (8002fcc <vTaskSuspendAll+0x18>)
 8002fc0:	6013      	str	r3, [r2, #0]
}
 8002fc2:	bf00      	nop
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bc80      	pop	{r7}
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	20000950 	.word	0x20000950

08002fd0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002fde:	4b41      	ldr	r3, [pc, #260]	; (80030e4 <xTaskResumeAll+0x114>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d109      	bne.n	8002ffa <xTaskResumeAll+0x2a>
 8002fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fea:	f383 8811 	msr	BASEPRI, r3
 8002fee:	f3bf 8f6f 	isb	sy
 8002ff2:	f3bf 8f4f 	dsb	sy
 8002ff6:	603b      	str	r3, [r7, #0]
 8002ff8:	e7fe      	b.n	8002ff8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002ffa:	f001 f8dd 	bl	80041b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002ffe:	4b39      	ldr	r3, [pc, #228]	; (80030e4 <xTaskResumeAll+0x114>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	3b01      	subs	r3, #1
 8003004:	4a37      	ldr	r2, [pc, #220]	; (80030e4 <xTaskResumeAll+0x114>)
 8003006:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003008:	4b36      	ldr	r3, [pc, #216]	; (80030e4 <xTaskResumeAll+0x114>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d162      	bne.n	80030d6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003010:	4b35      	ldr	r3, [pc, #212]	; (80030e8 <xTaskResumeAll+0x118>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d05e      	beq.n	80030d6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003018:	e02f      	b.n	800307a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800301a:	4b34      	ldr	r3, [pc, #208]	; (80030ec <xTaskResumeAll+0x11c>)
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	3318      	adds	r3, #24
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff f89a 	bl	8002160 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	3304      	adds	r3, #4
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff f895 	bl	8002160 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800303a:	4b2d      	ldr	r3, [pc, #180]	; (80030f0 <xTaskResumeAll+0x120>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	429a      	cmp	r2, r3
 8003040:	d903      	bls.n	800304a <xTaskResumeAll+0x7a>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003046:	4a2a      	ldr	r2, [pc, #168]	; (80030f0 <xTaskResumeAll+0x120>)
 8003048:	6013      	str	r3, [r2, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800304e:	4613      	mov	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4413      	add	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4a27      	ldr	r2, [pc, #156]	; (80030f4 <xTaskResumeAll+0x124>)
 8003058:	441a      	add	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	3304      	adds	r3, #4
 800305e:	4619      	mov	r1, r3
 8003060:	4610      	mov	r0, r2
 8003062:	f7ff f822 	bl	80020aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800306a:	4b23      	ldr	r3, [pc, #140]	; (80030f8 <xTaskResumeAll+0x128>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003070:	429a      	cmp	r2, r3
 8003072:	d302      	bcc.n	800307a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003074:	4b21      	ldr	r3, [pc, #132]	; (80030fc <xTaskResumeAll+0x12c>)
 8003076:	2201      	movs	r2, #1
 8003078:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800307a:	4b1c      	ldr	r3, [pc, #112]	; (80030ec <xTaskResumeAll+0x11c>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1cb      	bne.n	800301a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003088:	f000 fb4a 	bl	8003720 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800308c:	4b1c      	ldr	r3, [pc, #112]	; (8003100 <xTaskResumeAll+0x130>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d010      	beq.n	80030ba <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003098:	f000 f844 	bl	8003124 <xTaskIncrementTick>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d002      	beq.n	80030a8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80030a2:	4b16      	ldr	r3, [pc, #88]	; (80030fc <xTaskResumeAll+0x12c>)
 80030a4:	2201      	movs	r2, #1
 80030a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	3b01      	subs	r3, #1
 80030ac:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1f1      	bne.n	8003098 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80030b4:	4b12      	ldr	r3, [pc, #72]	; (8003100 <xTaskResumeAll+0x130>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80030ba:	4b10      	ldr	r3, [pc, #64]	; (80030fc <xTaskResumeAll+0x12c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d009      	beq.n	80030d6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80030c2:	2301      	movs	r3, #1
 80030c4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80030c6:	4b0f      	ldr	r3, [pc, #60]	; (8003104 <xTaskResumeAll+0x134>)
 80030c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030cc:	601a      	str	r2, [r3, #0]
 80030ce:	f3bf 8f4f 	dsb	sy
 80030d2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80030d6:	f001 f89d 	bl	8004214 <vPortExitCritical>

	return xAlreadyYielded;
 80030da:	68bb      	ldr	r3, [r7, #8]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	20000950 	.word	0x20000950
 80030e8:	20000928 	.word	0x20000928
 80030ec:	200008e8 	.word	0x200008e8
 80030f0:	20000930 	.word	0x20000930
 80030f4:	20000458 	.word	0x20000458
 80030f8:	20000454 	.word	0x20000454
 80030fc:	2000093c 	.word	0x2000093c
 8003100:	20000938 	.word	0x20000938
 8003104:	e000ed04 	.word	0xe000ed04

08003108 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800310e:	4b04      	ldr	r3, [pc, #16]	; (8003120 <xTaskGetTickCount+0x18>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003114:	687b      	ldr	r3, [r7, #4]
}
 8003116:	4618      	mov	r0, r3
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	bc80      	pop	{r7}
 800311e:	4770      	bx	lr
 8003120:	2000092c 	.word	0x2000092c

08003124 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b086      	sub	sp, #24
 8003128:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800312a:	2300      	movs	r3, #0
 800312c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800312e:	4b51      	ldr	r3, [pc, #324]	; (8003274 <xTaskIncrementTick+0x150>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	f040 808d 	bne.w	8003252 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003138:	4b4f      	ldr	r3, [pc, #316]	; (8003278 <xTaskIncrementTick+0x154>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	3301      	adds	r3, #1
 800313e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003140:	4a4d      	ldr	r2, [pc, #308]	; (8003278 <xTaskIncrementTick+0x154>)
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d11f      	bne.n	800318c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800314c:	4b4b      	ldr	r3, [pc, #300]	; (800327c <xTaskIncrementTick+0x158>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d009      	beq.n	800316a <xTaskIncrementTick+0x46>
 8003156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800315a:	f383 8811 	msr	BASEPRI, r3
 800315e:	f3bf 8f6f 	isb	sy
 8003162:	f3bf 8f4f 	dsb	sy
 8003166:	603b      	str	r3, [r7, #0]
 8003168:	e7fe      	b.n	8003168 <xTaskIncrementTick+0x44>
 800316a:	4b44      	ldr	r3, [pc, #272]	; (800327c <xTaskIncrementTick+0x158>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	60fb      	str	r3, [r7, #12]
 8003170:	4b43      	ldr	r3, [pc, #268]	; (8003280 <xTaskIncrementTick+0x15c>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a41      	ldr	r2, [pc, #260]	; (800327c <xTaskIncrementTick+0x158>)
 8003176:	6013      	str	r3, [r2, #0]
 8003178:	4a41      	ldr	r2, [pc, #260]	; (8003280 <xTaskIncrementTick+0x15c>)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6013      	str	r3, [r2, #0]
 800317e:	4b41      	ldr	r3, [pc, #260]	; (8003284 <xTaskIncrementTick+0x160>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	3301      	adds	r3, #1
 8003184:	4a3f      	ldr	r2, [pc, #252]	; (8003284 <xTaskIncrementTick+0x160>)
 8003186:	6013      	str	r3, [r2, #0]
 8003188:	f000 faca 	bl	8003720 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800318c:	4b3e      	ldr	r3, [pc, #248]	; (8003288 <xTaskIncrementTick+0x164>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	429a      	cmp	r2, r3
 8003194:	d34e      	bcc.n	8003234 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003196:	4b39      	ldr	r3, [pc, #228]	; (800327c <xTaskIncrementTick+0x158>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <xTaskIncrementTick+0x80>
 80031a0:	2301      	movs	r3, #1
 80031a2:	e000      	b.n	80031a6 <xTaskIncrementTick+0x82>
 80031a4:	2300      	movs	r3, #0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d004      	beq.n	80031b4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031aa:	4b37      	ldr	r3, [pc, #220]	; (8003288 <xTaskIncrementTick+0x164>)
 80031ac:	f04f 32ff 	mov.w	r2, #4294967295
 80031b0:	601a      	str	r2, [r3, #0]
					break;
 80031b2:	e03f      	b.n	8003234 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80031b4:	4b31      	ldr	r3, [pc, #196]	; (800327c <xTaskIncrementTick+0x158>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d203      	bcs.n	80031d4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80031cc:	4a2e      	ldr	r2, [pc, #184]	; (8003288 <xTaskIncrementTick+0x164>)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6013      	str	r3, [r2, #0]
						break;
 80031d2:	e02f      	b.n	8003234 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	3304      	adds	r3, #4
 80031d8:	4618      	mov	r0, r3
 80031da:	f7fe ffc1 	bl	8002160 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d004      	beq.n	80031f0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	3318      	adds	r3, #24
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7fe ffb8 	bl	8002160 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f4:	4b25      	ldr	r3, [pc, #148]	; (800328c <xTaskIncrementTick+0x168>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d903      	bls.n	8003204 <xTaskIncrementTick+0xe0>
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003200:	4a22      	ldr	r2, [pc, #136]	; (800328c <xTaskIncrementTick+0x168>)
 8003202:	6013      	str	r3, [r2, #0]
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003208:	4613      	mov	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4a1f      	ldr	r2, [pc, #124]	; (8003290 <xTaskIncrementTick+0x16c>)
 8003212:	441a      	add	r2, r3
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	3304      	adds	r3, #4
 8003218:	4619      	mov	r1, r3
 800321a:	4610      	mov	r0, r2
 800321c:	f7fe ff45 	bl	80020aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003224:	4b1b      	ldr	r3, [pc, #108]	; (8003294 <xTaskIncrementTick+0x170>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322a:	429a      	cmp	r2, r3
 800322c:	d3b3      	bcc.n	8003196 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800322e:	2301      	movs	r3, #1
 8003230:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003232:	e7b0      	b.n	8003196 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003234:	4b17      	ldr	r3, [pc, #92]	; (8003294 <xTaskIncrementTick+0x170>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800323a:	4915      	ldr	r1, [pc, #84]	; (8003290 <xTaskIncrementTick+0x16c>)
 800323c:	4613      	mov	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	4413      	add	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d907      	bls.n	800325c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800324c:	2301      	movs	r3, #1
 800324e:	617b      	str	r3, [r7, #20]
 8003250:	e004      	b.n	800325c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003252:	4b11      	ldr	r3, [pc, #68]	; (8003298 <xTaskIncrementTick+0x174>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	3301      	adds	r3, #1
 8003258:	4a0f      	ldr	r2, [pc, #60]	; (8003298 <xTaskIncrementTick+0x174>)
 800325a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800325c:	4b0f      	ldr	r3, [pc, #60]	; (800329c <xTaskIncrementTick+0x178>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003264:	2301      	movs	r3, #1
 8003266:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003268:	697b      	ldr	r3, [r7, #20]
}
 800326a:	4618      	mov	r0, r3
 800326c:	3718      	adds	r7, #24
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	20000950 	.word	0x20000950
 8003278:	2000092c 	.word	0x2000092c
 800327c:	200008e0 	.word	0x200008e0
 8003280:	200008e4 	.word	0x200008e4
 8003284:	20000940 	.word	0x20000940
 8003288:	20000948 	.word	0x20000948
 800328c:	20000930 	.word	0x20000930
 8003290:	20000458 	.word	0x20000458
 8003294:	20000454 	.word	0x20000454
 8003298:	20000938 	.word	0x20000938
 800329c:	2000093c 	.word	0x2000093c

080032a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80032a6:	4b27      	ldr	r3, [pc, #156]	; (8003344 <vTaskSwitchContext+0xa4>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80032ae:	4b26      	ldr	r3, [pc, #152]	; (8003348 <vTaskSwitchContext+0xa8>)
 80032b0:	2201      	movs	r2, #1
 80032b2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80032b4:	e040      	b.n	8003338 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80032b6:	4b24      	ldr	r3, [pc, #144]	; (8003348 <vTaskSwitchContext+0xa8>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80032bc:	4b23      	ldr	r3, [pc, #140]	; (800334c <vTaskSwitchContext+0xac>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	60fb      	str	r3, [r7, #12]
 80032c2:	e00f      	b.n	80032e4 <vTaskSwitchContext+0x44>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d109      	bne.n	80032de <vTaskSwitchContext+0x3e>
 80032ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ce:	f383 8811 	msr	BASEPRI, r3
 80032d2:	f3bf 8f6f 	isb	sy
 80032d6:	f3bf 8f4f 	dsb	sy
 80032da:	607b      	str	r3, [r7, #4]
 80032dc:	e7fe      	b.n	80032dc <vTaskSwitchContext+0x3c>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	3b01      	subs	r3, #1
 80032e2:	60fb      	str	r3, [r7, #12]
 80032e4:	491a      	ldr	r1, [pc, #104]	; (8003350 <vTaskSwitchContext+0xb0>)
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	4613      	mov	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	4413      	add	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	440b      	add	r3, r1
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d0e5      	beq.n	80032c4 <vTaskSwitchContext+0x24>
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	4613      	mov	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4413      	add	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4a13      	ldr	r2, [pc, #76]	; (8003350 <vTaskSwitchContext+0xb0>)
 8003304:	4413      	add	r3, r2
 8003306:	60bb      	str	r3, [r7, #8]
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	605a      	str	r2, [r3, #4]
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	3308      	adds	r3, #8
 800331a:	429a      	cmp	r2, r3
 800331c:	d104      	bne.n	8003328 <vTaskSwitchContext+0x88>
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	605a      	str	r2, [r3, #4]
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	4a09      	ldr	r2, [pc, #36]	; (8003354 <vTaskSwitchContext+0xb4>)
 8003330:	6013      	str	r3, [r2, #0]
 8003332:	4a06      	ldr	r2, [pc, #24]	; (800334c <vTaskSwitchContext+0xac>)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6013      	str	r3, [r2, #0]
}
 8003338:	bf00      	nop
 800333a:	3714      	adds	r7, #20
 800333c:	46bd      	mov	sp, r7
 800333e:	bc80      	pop	{r7}
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	20000950 	.word	0x20000950
 8003348:	2000093c 	.word	0x2000093c
 800334c:	20000930 	.word	0x20000930
 8003350:	20000458 	.word	0x20000458
 8003354:	20000454 	.word	0x20000454

08003358 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d109      	bne.n	800337c <vTaskPlaceOnEventList+0x24>
 8003368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800336c:	f383 8811 	msr	BASEPRI, r3
 8003370:	f3bf 8f6f 	isb	sy
 8003374:	f3bf 8f4f 	dsb	sy
 8003378:	60fb      	str	r3, [r7, #12]
 800337a:	e7fe      	b.n	800337a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800337c:	4b07      	ldr	r3, [pc, #28]	; (800339c <vTaskPlaceOnEventList+0x44>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	3318      	adds	r3, #24
 8003382:	4619      	mov	r1, r3
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f7fe feb3 	bl	80020f0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800338a:	2101      	movs	r1, #1
 800338c:	6838      	ldr	r0, [r7, #0]
 800338e:	f000 fa75 	bl	800387c <prvAddCurrentTaskToDelayedList>
}
 8003392:	bf00      	nop
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	20000454 	.word	0x20000454

080033a0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d109      	bne.n	80033c6 <vTaskPlaceOnEventListRestricted+0x26>
 80033b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b6:	f383 8811 	msr	BASEPRI, r3
 80033ba:	f3bf 8f6f 	isb	sy
 80033be:	f3bf 8f4f 	dsb	sy
 80033c2:	617b      	str	r3, [r7, #20]
 80033c4:	e7fe      	b.n	80033c4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80033c6:	4b0a      	ldr	r3, [pc, #40]	; (80033f0 <vTaskPlaceOnEventListRestricted+0x50>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	3318      	adds	r3, #24
 80033cc:	4619      	mov	r1, r3
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f7fe fe6b 	bl	80020aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d002      	beq.n	80033e0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80033da:	f04f 33ff 	mov.w	r3, #4294967295
 80033de:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80033e0:	6879      	ldr	r1, [r7, #4]
 80033e2:	68b8      	ldr	r0, [r7, #8]
 80033e4:	f000 fa4a 	bl	800387c <prvAddCurrentTaskToDelayedList>
	}
 80033e8:	bf00      	nop
 80033ea:	3718      	adds	r7, #24
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	20000454 	.word	0x20000454

080033f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d109      	bne.n	800341e <xTaskRemoveFromEventList+0x2a>
 800340a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800340e:	f383 8811 	msr	BASEPRI, r3
 8003412:	f3bf 8f6f 	isb	sy
 8003416:	f3bf 8f4f 	dsb	sy
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	e7fe      	b.n	800341c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	3318      	adds	r3, #24
 8003422:	4618      	mov	r0, r3
 8003424:	f7fe fe9c 	bl	8002160 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003428:	4b1d      	ldr	r3, [pc, #116]	; (80034a0 <xTaskRemoveFromEventList+0xac>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d11d      	bne.n	800346c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	3304      	adds	r3, #4
 8003434:	4618      	mov	r0, r3
 8003436:	f7fe fe93 	bl	8002160 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800343e:	4b19      	ldr	r3, [pc, #100]	; (80034a4 <xTaskRemoveFromEventList+0xb0>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	429a      	cmp	r2, r3
 8003444:	d903      	bls.n	800344e <xTaskRemoveFromEventList+0x5a>
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344a:	4a16      	ldr	r2, [pc, #88]	; (80034a4 <xTaskRemoveFromEventList+0xb0>)
 800344c:	6013      	str	r3, [r2, #0]
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003452:	4613      	mov	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4413      	add	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4a13      	ldr	r2, [pc, #76]	; (80034a8 <xTaskRemoveFromEventList+0xb4>)
 800345c:	441a      	add	r2, r3
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	3304      	adds	r3, #4
 8003462:	4619      	mov	r1, r3
 8003464:	4610      	mov	r0, r2
 8003466:	f7fe fe20 	bl	80020aa <vListInsertEnd>
 800346a:	e005      	b.n	8003478 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	3318      	adds	r3, #24
 8003470:	4619      	mov	r1, r3
 8003472:	480e      	ldr	r0, [pc, #56]	; (80034ac <xTaskRemoveFromEventList+0xb8>)
 8003474:	f7fe fe19 	bl	80020aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800347c:	4b0c      	ldr	r3, [pc, #48]	; (80034b0 <xTaskRemoveFromEventList+0xbc>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003482:	429a      	cmp	r2, r3
 8003484:	d905      	bls.n	8003492 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003486:	2301      	movs	r3, #1
 8003488:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800348a:	4b0a      	ldr	r3, [pc, #40]	; (80034b4 <xTaskRemoveFromEventList+0xc0>)
 800348c:	2201      	movs	r2, #1
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	e001      	b.n	8003496 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003492:	2300      	movs	r3, #0
 8003494:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003496:	697b      	ldr	r3, [r7, #20]
}
 8003498:	4618      	mov	r0, r3
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	20000950 	.word	0x20000950
 80034a4:	20000930 	.word	0x20000930
 80034a8:	20000458 	.word	0x20000458
 80034ac:	200008e8 	.word	0x200008e8
 80034b0:	20000454 	.word	0x20000454
 80034b4:	2000093c 	.word	0x2000093c

080034b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80034c0:	4b06      	ldr	r3, [pc, #24]	; (80034dc <vTaskInternalSetTimeOutState+0x24>)
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80034c8:	4b05      	ldr	r3, [pc, #20]	; (80034e0 <vTaskInternalSetTimeOutState+0x28>)
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	605a      	str	r2, [r3, #4]
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bc80      	pop	{r7}
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	20000940 	.word	0x20000940
 80034e0:	2000092c 	.word	0x2000092c

080034e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b088      	sub	sp, #32
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d109      	bne.n	8003508 <xTaskCheckForTimeOut+0x24>
 80034f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f8:	f383 8811 	msr	BASEPRI, r3
 80034fc:	f3bf 8f6f 	isb	sy
 8003500:	f3bf 8f4f 	dsb	sy
 8003504:	613b      	str	r3, [r7, #16]
 8003506:	e7fe      	b.n	8003506 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d109      	bne.n	8003522 <xTaskCheckForTimeOut+0x3e>
 800350e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003512:	f383 8811 	msr	BASEPRI, r3
 8003516:	f3bf 8f6f 	isb	sy
 800351a:	f3bf 8f4f 	dsb	sy
 800351e:	60fb      	str	r3, [r7, #12]
 8003520:	e7fe      	b.n	8003520 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003522:	f000 fe49 	bl	80041b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003526:	4b1d      	ldr	r3, [pc, #116]	; (800359c <xTaskCheckForTimeOut+0xb8>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353e:	d102      	bne.n	8003546 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003540:	2300      	movs	r3, #0
 8003542:	61fb      	str	r3, [r7, #28]
 8003544:	e023      	b.n	800358e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	4b15      	ldr	r3, [pc, #84]	; (80035a0 <xTaskCheckForTimeOut+0xbc>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	429a      	cmp	r2, r3
 8003550:	d007      	beq.n	8003562 <xTaskCheckForTimeOut+0x7e>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	429a      	cmp	r2, r3
 800355a:	d302      	bcc.n	8003562 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800355c:	2301      	movs	r3, #1
 800355e:	61fb      	str	r3, [r7, #28]
 8003560:	e015      	b.n	800358e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	429a      	cmp	r2, r3
 800356a:	d20b      	bcs.n	8003584 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	1ad2      	subs	r2, r2, r3
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f7ff ff9d 	bl	80034b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800357e:	2300      	movs	r3, #0
 8003580:	61fb      	str	r3, [r7, #28]
 8003582:	e004      	b.n	800358e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	2200      	movs	r2, #0
 8003588:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800358a:	2301      	movs	r3, #1
 800358c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800358e:	f000 fe41 	bl	8004214 <vPortExitCritical>

	return xReturn;
 8003592:	69fb      	ldr	r3, [r7, #28]
}
 8003594:	4618      	mov	r0, r3
 8003596:	3720      	adds	r7, #32
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	2000092c 	.word	0x2000092c
 80035a0:	20000940 	.word	0x20000940

080035a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80035a8:	4b03      	ldr	r3, [pc, #12]	; (80035b8 <vTaskMissedYield+0x14>)
 80035aa:	2201      	movs	r2, #1
 80035ac:	601a      	str	r2, [r3, #0]
}
 80035ae:	bf00      	nop
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bc80      	pop	{r7}
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	2000093c 	.word	0x2000093c

080035bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80035c4:	f000 f852 	bl	800366c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80035c8:	4b06      	ldr	r3, [pc, #24]	; (80035e4 <prvIdleTask+0x28>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d9f9      	bls.n	80035c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80035d0:	4b05      	ldr	r3, [pc, #20]	; (80035e8 <prvIdleTask+0x2c>)
 80035d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035d6:	601a      	str	r2, [r3, #0]
 80035d8:	f3bf 8f4f 	dsb	sy
 80035dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80035e0:	e7f0      	b.n	80035c4 <prvIdleTask+0x8>
 80035e2:	bf00      	nop
 80035e4:	20000458 	.word	0x20000458
 80035e8:	e000ed04 	.word	0xe000ed04

080035ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035f2:	2300      	movs	r3, #0
 80035f4:	607b      	str	r3, [r7, #4]
 80035f6:	e00c      	b.n	8003612 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	4613      	mov	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4a12      	ldr	r2, [pc, #72]	; (800364c <prvInitialiseTaskLists+0x60>)
 8003604:	4413      	add	r3, r2
 8003606:	4618      	mov	r0, r3
 8003608:	f7fe fd24 	bl	8002054 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3301      	adds	r3, #1
 8003610:	607b      	str	r3, [r7, #4]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2b37      	cmp	r3, #55	; 0x37
 8003616:	d9ef      	bls.n	80035f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003618:	480d      	ldr	r0, [pc, #52]	; (8003650 <prvInitialiseTaskLists+0x64>)
 800361a:	f7fe fd1b 	bl	8002054 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800361e:	480d      	ldr	r0, [pc, #52]	; (8003654 <prvInitialiseTaskLists+0x68>)
 8003620:	f7fe fd18 	bl	8002054 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003624:	480c      	ldr	r0, [pc, #48]	; (8003658 <prvInitialiseTaskLists+0x6c>)
 8003626:	f7fe fd15 	bl	8002054 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800362a:	480c      	ldr	r0, [pc, #48]	; (800365c <prvInitialiseTaskLists+0x70>)
 800362c:	f7fe fd12 	bl	8002054 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003630:	480b      	ldr	r0, [pc, #44]	; (8003660 <prvInitialiseTaskLists+0x74>)
 8003632:	f7fe fd0f 	bl	8002054 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003636:	4b0b      	ldr	r3, [pc, #44]	; (8003664 <prvInitialiseTaskLists+0x78>)
 8003638:	4a05      	ldr	r2, [pc, #20]	; (8003650 <prvInitialiseTaskLists+0x64>)
 800363a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800363c:	4b0a      	ldr	r3, [pc, #40]	; (8003668 <prvInitialiseTaskLists+0x7c>)
 800363e:	4a05      	ldr	r2, [pc, #20]	; (8003654 <prvInitialiseTaskLists+0x68>)
 8003640:	601a      	str	r2, [r3, #0]
}
 8003642:	bf00      	nop
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	20000458 	.word	0x20000458
 8003650:	200008b8 	.word	0x200008b8
 8003654:	200008cc 	.word	0x200008cc
 8003658:	200008e8 	.word	0x200008e8
 800365c:	200008fc 	.word	0x200008fc
 8003660:	20000914 	.word	0x20000914
 8003664:	200008e0 	.word	0x200008e0
 8003668:	200008e4 	.word	0x200008e4

0800366c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003672:	e019      	b.n	80036a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003674:	f000 fda0 	bl	80041b8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003678:	4b0f      	ldr	r3, [pc, #60]	; (80036b8 <prvCheckTasksWaitingTermination+0x4c>)
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	3304      	adds	r3, #4
 8003684:	4618      	mov	r0, r3
 8003686:	f7fe fd6b 	bl	8002160 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800368a:	4b0c      	ldr	r3, [pc, #48]	; (80036bc <prvCheckTasksWaitingTermination+0x50>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	3b01      	subs	r3, #1
 8003690:	4a0a      	ldr	r2, [pc, #40]	; (80036bc <prvCheckTasksWaitingTermination+0x50>)
 8003692:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003694:	4b0a      	ldr	r3, [pc, #40]	; (80036c0 <prvCheckTasksWaitingTermination+0x54>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	3b01      	subs	r3, #1
 800369a:	4a09      	ldr	r2, [pc, #36]	; (80036c0 <prvCheckTasksWaitingTermination+0x54>)
 800369c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800369e:	f000 fdb9 	bl	8004214 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 f80e 	bl	80036c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036a8:	4b05      	ldr	r3, [pc, #20]	; (80036c0 <prvCheckTasksWaitingTermination+0x54>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1e1      	bne.n	8003674 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80036b0:	bf00      	nop
 80036b2:	3708      	adds	r7, #8
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	200008fc 	.word	0x200008fc
 80036bc:	20000928 	.word	0x20000928
 80036c0:	20000910 	.word	0x20000910

080036c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d108      	bne.n	80036e8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 ff24 	bl	8004528 <vPortFree>
				vPortFree( pxTCB );
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 ff21 	bl	8004528 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80036e6:	e017      	b.n	8003718 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d103      	bne.n	80036fa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 ff18 	bl	8004528 <vPortFree>
	}
 80036f8:	e00e      	b.n	8003718 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003700:	2b02      	cmp	r3, #2
 8003702:	d009      	beq.n	8003718 <prvDeleteTCB+0x54>
 8003704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003708:	f383 8811 	msr	BASEPRI, r3
 800370c:	f3bf 8f6f 	isb	sy
 8003710:	f3bf 8f4f 	dsb	sy
 8003714:	60fb      	str	r3, [r7, #12]
 8003716:	e7fe      	b.n	8003716 <prvDeleteTCB+0x52>
	}
 8003718:	bf00      	nop
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003726:	4b0e      	ldr	r3, [pc, #56]	; (8003760 <prvResetNextTaskUnblockTime+0x40>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <prvResetNextTaskUnblockTime+0x14>
 8003730:	2301      	movs	r3, #1
 8003732:	e000      	b.n	8003736 <prvResetNextTaskUnblockTime+0x16>
 8003734:	2300      	movs	r3, #0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d004      	beq.n	8003744 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800373a:	4b0a      	ldr	r3, [pc, #40]	; (8003764 <prvResetNextTaskUnblockTime+0x44>)
 800373c:	f04f 32ff 	mov.w	r2, #4294967295
 8003740:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003742:	e008      	b.n	8003756 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003744:	4b06      	ldr	r3, [pc, #24]	; (8003760 <prvResetNextTaskUnblockTime+0x40>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	4a04      	ldr	r2, [pc, #16]	; (8003764 <prvResetNextTaskUnblockTime+0x44>)
 8003754:	6013      	str	r3, [r2, #0]
}
 8003756:	bf00      	nop
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	bc80      	pop	{r7}
 800375e:	4770      	bx	lr
 8003760:	200008e0 	.word	0x200008e0
 8003764:	20000948 	.word	0x20000948

08003768 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800376e:	4b0b      	ldr	r3, [pc, #44]	; (800379c <xTaskGetSchedulerState+0x34>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d102      	bne.n	800377c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003776:	2301      	movs	r3, #1
 8003778:	607b      	str	r3, [r7, #4]
 800377a:	e008      	b.n	800378e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800377c:	4b08      	ldr	r3, [pc, #32]	; (80037a0 <xTaskGetSchedulerState+0x38>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d102      	bne.n	800378a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003784:	2302      	movs	r3, #2
 8003786:	607b      	str	r3, [r7, #4]
 8003788:	e001      	b.n	800378e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800378a:	2300      	movs	r3, #0
 800378c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800378e:	687b      	ldr	r3, [r7, #4]
	}
 8003790:	4618      	mov	r0, r3
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	bc80      	pop	{r7}
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	20000934 	.word	0x20000934
 80037a0:	20000950 	.word	0x20000950

080037a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80037b0:	2300      	movs	r3, #0
 80037b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d054      	beq.n	8003864 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80037ba:	4b2d      	ldr	r3, [pc, #180]	; (8003870 <xTaskPriorityDisinherit+0xcc>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d009      	beq.n	80037d8 <xTaskPriorityDisinherit+0x34>
 80037c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c8:	f383 8811 	msr	BASEPRI, r3
 80037cc:	f3bf 8f6f 	isb	sy
 80037d0:	f3bf 8f4f 	dsb	sy
 80037d4:	60fb      	str	r3, [r7, #12]
 80037d6:	e7fe      	b.n	80037d6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d109      	bne.n	80037f4 <xTaskPriorityDisinherit+0x50>
 80037e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e4:	f383 8811 	msr	BASEPRI, r3
 80037e8:	f3bf 8f6f 	isb	sy
 80037ec:	f3bf 8f4f 	dsb	sy
 80037f0:	60bb      	str	r3, [r7, #8]
 80037f2:	e7fe      	b.n	80037f2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037f8:	1e5a      	subs	r2, r3, #1
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003806:	429a      	cmp	r2, r3
 8003808:	d02c      	beq.n	8003864 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800380e:	2b00      	cmp	r3, #0
 8003810:	d128      	bne.n	8003864 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	3304      	adds	r3, #4
 8003816:	4618      	mov	r0, r3
 8003818:	f7fe fca2 	bl	8002160 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003828:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003834:	4b0f      	ldr	r3, [pc, #60]	; (8003874 <xTaskPriorityDisinherit+0xd0>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	429a      	cmp	r2, r3
 800383a:	d903      	bls.n	8003844 <xTaskPriorityDisinherit+0xa0>
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003840:	4a0c      	ldr	r2, [pc, #48]	; (8003874 <xTaskPriorityDisinherit+0xd0>)
 8003842:	6013      	str	r3, [r2, #0]
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003848:	4613      	mov	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4413      	add	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	4a09      	ldr	r2, [pc, #36]	; (8003878 <xTaskPriorityDisinherit+0xd4>)
 8003852:	441a      	add	r2, r3
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	3304      	adds	r3, #4
 8003858:	4619      	mov	r1, r3
 800385a:	4610      	mov	r0, r2
 800385c:	f7fe fc25 	bl	80020aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003860:	2301      	movs	r3, #1
 8003862:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003864:	697b      	ldr	r3, [r7, #20]
	}
 8003866:	4618      	mov	r0, r3
 8003868:	3718      	adds	r7, #24
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	20000454 	.word	0x20000454
 8003874:	20000930 	.word	0x20000930
 8003878:	20000458 	.word	0x20000458

0800387c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003886:	4b21      	ldr	r3, [pc, #132]	; (800390c <prvAddCurrentTaskToDelayedList+0x90>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800388c:	4b20      	ldr	r3, [pc, #128]	; (8003910 <prvAddCurrentTaskToDelayedList+0x94>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	3304      	adds	r3, #4
 8003892:	4618      	mov	r0, r3
 8003894:	f7fe fc64 	bl	8002160 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389e:	d10a      	bne.n	80038b6 <prvAddCurrentTaskToDelayedList+0x3a>
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d007      	beq.n	80038b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038a6:	4b1a      	ldr	r3, [pc, #104]	; (8003910 <prvAddCurrentTaskToDelayedList+0x94>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	3304      	adds	r3, #4
 80038ac:	4619      	mov	r1, r3
 80038ae:	4819      	ldr	r0, [pc, #100]	; (8003914 <prvAddCurrentTaskToDelayedList+0x98>)
 80038b0:	f7fe fbfb 	bl	80020aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80038b4:	e026      	b.n	8003904 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4413      	add	r3, r2
 80038bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80038be:	4b14      	ldr	r3, [pc, #80]	; (8003910 <prvAddCurrentTaskToDelayedList+0x94>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d209      	bcs.n	80038e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038ce:	4b12      	ldr	r3, [pc, #72]	; (8003918 <prvAddCurrentTaskToDelayedList+0x9c>)
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	4b0f      	ldr	r3, [pc, #60]	; (8003910 <prvAddCurrentTaskToDelayedList+0x94>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	3304      	adds	r3, #4
 80038d8:	4619      	mov	r1, r3
 80038da:	4610      	mov	r0, r2
 80038dc:	f7fe fc08 	bl	80020f0 <vListInsert>
}
 80038e0:	e010      	b.n	8003904 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038e2:	4b0e      	ldr	r3, [pc, #56]	; (800391c <prvAddCurrentTaskToDelayedList+0xa0>)
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	4b0a      	ldr	r3, [pc, #40]	; (8003910 <prvAddCurrentTaskToDelayedList+0x94>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	3304      	adds	r3, #4
 80038ec:	4619      	mov	r1, r3
 80038ee:	4610      	mov	r0, r2
 80038f0:	f7fe fbfe 	bl	80020f0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80038f4:	4b0a      	ldr	r3, [pc, #40]	; (8003920 <prvAddCurrentTaskToDelayedList+0xa4>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d202      	bcs.n	8003904 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80038fe:	4a08      	ldr	r2, [pc, #32]	; (8003920 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	6013      	str	r3, [r2, #0]
}
 8003904:	bf00      	nop
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	2000092c 	.word	0x2000092c
 8003910:	20000454 	.word	0x20000454
 8003914:	20000914 	.word	0x20000914
 8003918:	200008e4 	.word	0x200008e4
 800391c:	200008e0 	.word	0x200008e0
 8003920:	20000948 	.word	0x20000948

08003924 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b08a      	sub	sp, #40	; 0x28
 8003928:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800392a:	2300      	movs	r3, #0
 800392c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800392e:	f000 fb15 	bl	8003f5c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003932:	4b1c      	ldr	r3, [pc, #112]	; (80039a4 <xTimerCreateTimerTask+0x80>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d021      	beq.n	800397e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800393a:	2300      	movs	r3, #0
 800393c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800393e:	2300      	movs	r3, #0
 8003940:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003942:	1d3a      	adds	r2, r7, #4
 8003944:	f107 0108 	add.w	r1, r7, #8
 8003948:	f107 030c 	add.w	r3, r7, #12
 800394c:	4618      	mov	r0, r3
 800394e:	f7fe fb69 	bl	8002024 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003952:	6879      	ldr	r1, [r7, #4]
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	9202      	str	r2, [sp, #8]
 800395a:	9301      	str	r3, [sp, #4]
 800395c:	2302      	movs	r3, #2
 800395e:	9300      	str	r3, [sp, #0]
 8003960:	2300      	movs	r3, #0
 8003962:	460a      	mov	r2, r1
 8003964:	4910      	ldr	r1, [pc, #64]	; (80039a8 <xTimerCreateTimerTask+0x84>)
 8003966:	4811      	ldr	r0, [pc, #68]	; (80039ac <xTimerCreateTimerTask+0x88>)
 8003968:	f7ff f8f8 	bl	8002b5c <xTaskCreateStatic>
 800396c:	4602      	mov	r2, r0
 800396e:	4b10      	ldr	r3, [pc, #64]	; (80039b0 <xTimerCreateTimerTask+0x8c>)
 8003970:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003972:	4b0f      	ldr	r3, [pc, #60]	; (80039b0 <xTimerCreateTimerTask+0x8c>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800397a:	2301      	movs	r3, #1
 800397c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d109      	bne.n	8003998 <xTimerCreateTimerTask+0x74>
 8003984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003988:	f383 8811 	msr	BASEPRI, r3
 800398c:	f3bf 8f6f 	isb	sy
 8003990:	f3bf 8f4f 	dsb	sy
 8003994:	613b      	str	r3, [r7, #16]
 8003996:	e7fe      	b.n	8003996 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8003998:	697b      	ldr	r3, [r7, #20]
}
 800399a:	4618      	mov	r0, r3
 800399c:	3718      	adds	r7, #24
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	20000984 	.word	0x20000984
 80039a8:	08005200 	.word	0x08005200
 80039ac:	08003b71 	.word	0x08003b71
 80039b0:	20000988 	.word	0x20000988

080039b4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b088      	sub	sp, #32
 80039b8:	af02      	add	r7, sp, #8
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
 80039c0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 80039c2:	2030      	movs	r0, #48	; 0x30
 80039c4:	f000 fcee 	bl	80043a4 <pvPortMalloc>
 80039c8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00d      	beq.n	80039ec <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	9301      	str	r3, [sp, #4]
 80039d4:	6a3b      	ldr	r3, [r7, #32]
 80039d6:	9300      	str	r3, [sp, #0]
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	68b9      	ldr	r1, [r7, #8]
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f000 f809 	bl	80039f6 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 80039ec:	697b      	ldr	r3, [r7, #20]
	}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3718      	adds	r7, #24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b086      	sub	sp, #24
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	60f8      	str	r0, [r7, #12]
 80039fe:	60b9      	str	r1, [r7, #8]
 8003a00:	607a      	str	r2, [r7, #4]
 8003a02:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d109      	bne.n	8003a1e <prvInitialiseNewTimer+0x28>
 8003a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0e:	f383 8811 	msr	BASEPRI, r3
 8003a12:	f3bf 8f6f 	isb	sy
 8003a16:	f3bf 8f4f 	dsb	sy
 8003a1a:	617b      	str	r3, [r7, #20]
 8003a1c:	e7fe      	b.n	8003a1c <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d015      	beq.n	8003a50 <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8003a24:	f000 fa9a 	bl	8003f5c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8003a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a30:	68ba      	ldr	r2, [r7, #8]
 8003a32:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8003a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8003a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a42:	6a3a      	ldr	r2, [r7, #32]
 8003a44:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8003a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a48:	3304      	adds	r3, #4
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7fe fb21 	bl	8002092 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8003a50:	bf00      	nop
 8003a52:	3718      	adds	r7, #24
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b08a      	sub	sp, #40	; 0x28
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
 8003a64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003a66:	2300      	movs	r3, #0
 8003a68:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d109      	bne.n	8003a84 <xTimerGenericCommand+0x2c>
 8003a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a74:	f383 8811 	msr	BASEPRI, r3
 8003a78:	f3bf 8f6f 	isb	sy
 8003a7c:	f3bf 8f4f 	dsb	sy
 8003a80:	623b      	str	r3, [r7, #32]
 8003a82:	e7fe      	b.n	8003a82 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003a84:	4b19      	ldr	r3, [pc, #100]	; (8003aec <xTimerGenericCommand+0x94>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d02a      	beq.n	8003ae2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	2b05      	cmp	r3, #5
 8003a9c:	dc18      	bgt.n	8003ad0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003a9e:	f7ff fe63 	bl	8003768 <xTaskGetSchedulerState>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d109      	bne.n	8003abc <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003aa8:	4b10      	ldr	r3, [pc, #64]	; (8003aec <xTimerGenericCommand+0x94>)
 8003aaa:	6818      	ldr	r0, [r3, #0]
 8003aac:	f107 0110 	add.w	r1, r7, #16
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ab4:	f7fe fc7c 	bl	80023b0 <xQueueGenericSend>
 8003ab8:	6278      	str	r0, [r7, #36]	; 0x24
 8003aba:	e012      	b.n	8003ae2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003abc:	4b0b      	ldr	r3, [pc, #44]	; (8003aec <xTimerGenericCommand+0x94>)
 8003abe:	6818      	ldr	r0, [r3, #0]
 8003ac0:	f107 0110 	add.w	r1, r7, #16
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f7fe fc72 	bl	80023b0 <xQueueGenericSend>
 8003acc:	6278      	str	r0, [r7, #36]	; 0x24
 8003ace:	e008      	b.n	8003ae2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003ad0:	4b06      	ldr	r3, [pc, #24]	; (8003aec <xTimerGenericCommand+0x94>)
 8003ad2:	6818      	ldr	r0, [r3, #0]
 8003ad4:	f107 0110 	add.w	r1, r7, #16
 8003ad8:	2300      	movs	r3, #0
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	f7fe fd62 	bl	80025a4 <xQueueGenericSendFromISR>
 8003ae0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3728      	adds	r7, #40	; 0x28
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	20000984 	.word	0x20000984

08003af0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t tick_now )
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b088      	sub	sp, #32
 8003af4:	af02      	add	r7, sp, #8
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003afa:	4b1c      	ldr	r3, [pc, #112]	; (8003b6c <prvProcessExpiredTimer+0x7c>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	3304      	adds	r3, #4
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7fe fb29 	bl	8002160 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d121      	bne.n	8003b5a <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), tick_now, xNextExpireTime ) != pdFALSE )
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	699a      	ldr	r2, [r3, #24]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	18d1      	adds	r1, r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	6978      	ldr	r0, [r7, #20]
 8003b24:	f000 f8c8 	bl	8003cb8 <prvInsertTimerInActiveList>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d015      	beq.n	8003b5a <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003b2e:	2300      	movs	r3, #0
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	2300      	movs	r3, #0
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	2100      	movs	r1, #0
 8003b38:	6978      	ldr	r0, [r7, #20]
 8003b3a:	f7ff ff8d 	bl	8003a58 <xTimerGenericCommand>
 8003b3e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d109      	bne.n	8003b5a <prvProcessExpiredTimer+0x6a>
 8003b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4a:	f383 8811 	msr	BASEPRI, r3
 8003b4e:	f3bf 8f6f 	isb	sy
 8003b52:	f3bf 8f4f 	dsb	sy
 8003b56:	60fb      	str	r3, [r7, #12]
 8003b58:	e7fe      	b.n	8003b58 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5e:	6978      	ldr	r0, [r7, #20]
 8003b60:	4798      	blx	r3
}
 8003b62:	bf00      	nop
 8003b64:	3718      	adds	r7, #24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	2000097c 	.word	0x2000097c

08003b70 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b78:	f107 0308 	add.w	r3, r7, #8
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f000 f857 	bl	8003c30 <prvGetNextExpireTime>
 8003b82:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	4619      	mov	r1, r3
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f000 f803 	bl	8003b94 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003b8e:	f000 f8d5 	bl	8003d3c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b92:	e7f1      	b.n	8003b78 <prvTimerTask+0x8>

08003b94 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
TickType_t tick_now;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003b9e:	f7ff fa09 	bl	8002fb4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		tick_now = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ba2:	f107 0308 	add.w	r3, r7, #8
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 f866 	bl	8003c78 <prvSampleTimeNow>
 8003bac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d130      	bne.n	8003c16 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= tick_now ) )
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10a      	bne.n	8003bd0 <prvProcessTimerOrBlockTask+0x3c>
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d806      	bhi.n	8003bd0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003bc2:	f7ff fa05 	bl	8002fd0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, tick_now );
 8003bc6:	68f9      	ldr	r1, [r7, #12]
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f7ff ff91 	bl	8003af0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003bce:	e024      	b.n	8003c1a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d008      	beq.n	8003be8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003bd6:	4b13      	ldr	r3, [pc, #76]	; (8003c24 <prvProcessTimerOrBlockTask+0x90>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	bf0c      	ite	eq
 8003be0:	2301      	moveq	r3, #1
 8003be2:	2300      	movne	r3, #0
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - tick_now ), xListWasEmpty );
 8003be8:	4b0f      	ldr	r3, [pc, #60]	; (8003c28 <prvProcessTimerOrBlockTask+0x94>)
 8003bea:	6818      	ldr	r0, [r3, #0]
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	683a      	ldr	r2, [r7, #0]
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	f7fe ff7d 	bl	8002af4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003bfa:	f7ff f9e9 	bl	8002fd0 <xTaskResumeAll>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10a      	bne.n	8003c1a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003c04:	4b09      	ldr	r3, [pc, #36]	; (8003c2c <prvProcessTimerOrBlockTask+0x98>)
 8003c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	f3bf 8f4f 	dsb	sy
 8003c10:	f3bf 8f6f 	isb	sy
}
 8003c14:	e001      	b.n	8003c1a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003c16:	f7ff f9db 	bl	8002fd0 <xTaskResumeAll>
}
 8003c1a:	bf00      	nop
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	20000980 	.word	0x20000980
 8003c28:	20000984 	.word	0x20000984
 8003c2c:	e000ed04 	.word	0xe000ed04

08003c30 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003c38:	4b0e      	ldr	r3, [pc, #56]	; (8003c74 <prvGetNextExpireTime+0x44>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	bf0c      	ite	eq
 8003c42:	2301      	moveq	r3, #1
 8003c44:	2300      	movne	r3, #0
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	461a      	mov	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d105      	bne.n	8003c62 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c56:	4b07      	ldr	r3, [pc, #28]	; (8003c74 <prvGetNextExpireTime+0x44>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	60fb      	str	r3, [r7, #12]
 8003c60:	e001      	b.n	8003c66 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003c62:	2300      	movs	r3, #0
 8003c64:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003c66:	68fb      	ldr	r3, [r7, #12]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3714      	adds	r7, #20
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bc80      	pop	{r7}
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	2000097c 	.word	0x2000097c

08003c78 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
TickType_t tick_now;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	tick_now = xTaskGetTickCount();
 8003c80:	f7ff fa42 	bl	8003108 <xTaskGetTickCount>
 8003c84:	60f8      	str	r0, [r7, #12]

	if( tick_now < xLastTime )
 8003c86:	4b0b      	ldr	r3, [pc, #44]	; (8003cb4 <prvSampleTimeNow+0x3c>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d205      	bcs.n	8003c9c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003c90:	f000 f904 	bl	8003e9c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	601a      	str	r2, [r3, #0]
 8003c9a:	e002      	b.n	8003ca2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = tick_now;
 8003ca2:	4a04      	ldr	r2, [pc, #16]	; (8003cb4 <prvSampleTimeNow+0x3c>)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6013      	str	r3, [r2, #0]

	return tick_now;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	2000098c 	.word	0x2000098c

08003cb8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t tick_now, const TickType_t xCommandTime )
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
 8003cc4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= tick_now )
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d812      	bhi.n	8003d04 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( tick_now - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	1ad2      	subs	r2, r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d302      	bcc.n	8003cf2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003cec:	2301      	movs	r3, #1
 8003cee:	617b      	str	r3, [r7, #20]
 8003cf0:	e01b      	b.n	8003d2a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003cf2:	4b10      	ldr	r3, [pc, #64]	; (8003d34 <prvInsertTimerInActiveList+0x7c>)
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	3304      	adds	r3, #4
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	4610      	mov	r0, r2
 8003cfe:	f7fe f9f7 	bl	80020f0 <vListInsert>
 8003d02:	e012      	b.n	8003d2a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( tick_now < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d206      	bcs.n	8003d1a <prvInsertTimerInActiveList+0x62>
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d302      	bcc.n	8003d1a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003d14:	2301      	movs	r3, #1
 8003d16:	617b      	str	r3, [r7, #20]
 8003d18:	e007      	b.n	8003d2a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003d1a:	4b07      	ldr	r3, [pc, #28]	; (8003d38 <prvInsertTimerInActiveList+0x80>)
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	3304      	adds	r3, #4
 8003d22:	4619      	mov	r1, r3
 8003d24:	4610      	mov	r0, r2
 8003d26:	f7fe f9e3 	bl	80020f0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003d2a:	697b      	ldr	r3, [r7, #20]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3718      	adds	r7, #24
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	20000980 	.word	0x20000980
 8003d38:	2000097c 	.word	0x2000097c

08003d3c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b08e      	sub	sp, #56	; 0x38
 8003d40:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t tick_now;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003d42:	e099      	b.n	8003e78 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	da17      	bge.n	8003d7a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003d4a:	1d3b      	adds	r3, r7, #4
 8003d4c:	3304      	adds	r3, #4
 8003d4e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d109      	bne.n	8003d6a <prvProcessReceivedCommands+0x2e>
 8003d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5a:	f383 8811 	msr	BASEPRI, r3
 8003d5e:	f3bf 8f6f 	isb	sy
 8003d62:	f3bf 8f4f 	dsb	sy
 8003d66:	61fb      	str	r3, [r7, #28]
 8003d68:	e7fe      	b.n	8003d68 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d70:	6850      	ldr	r0, [r2, #4]
 8003d72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d74:	6892      	ldr	r2, [r2, #8]
 8003d76:	4611      	mov	r1, r2
 8003d78:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	db7a      	blt.n	8003e76 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d004      	beq.n	8003d96 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8e:	3304      	adds	r3, #4
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7fe f9e5 	bl	8002160 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the tick_now value was set). */
			tick_now = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d96:	463b      	mov	r3, r7
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7ff ff6d 	bl	8003c78 <prvSampleTimeNow>
 8003d9e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b09      	cmp	r3, #9
 8003da4:	d868      	bhi.n	8003e78 <prvProcessReceivedCommands+0x13c>
 8003da6:	a201      	add	r2, pc, #4	; (adr r2, 8003dac <prvProcessReceivedCommands+0x70>)
 8003da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dac:	08003dd5 	.word	0x08003dd5
 8003db0:	08003dd5 	.word	0x08003dd5
 8003db4:	08003dd5 	.word	0x08003dd5
 8003db8:	08003e79 	.word	0x08003e79
 8003dbc:	08003e2f 	.word	0x08003e2f
 8003dc0:	08003e65 	.word	0x08003e65
 8003dc4:	08003dd5 	.word	0x08003dd5
 8003dc8:	08003dd5 	.word	0x08003dd5
 8003dcc:	08003e79 	.word	0x08003e79
 8003dd0:	08003e2f 	.word	0x08003e2f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, tick_now, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003dd4:	68ba      	ldr	r2, [r7, #8]
 8003dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	18d1      	adds	r1, r2, r3
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003de0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003de2:	f7ff ff69 	bl	8003cb8 <prvInsertTimerInActiveList>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d045      	beq.n	8003e78 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003df2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df6:	69db      	ldr	r3, [r3, #28]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d13d      	bne.n	8003e78 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003dfc:	68ba      	ldr	r2, [r7, #8]
 8003dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	441a      	add	r2, r3
 8003e04:	2300      	movs	r3, #0
 8003e06:	9300      	str	r3, [sp, #0]
 8003e08:	2300      	movs	r3, #0
 8003e0a:	2100      	movs	r1, #0
 8003e0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e0e:	f7ff fe23 	bl	8003a58 <xTimerGenericCommand>
 8003e12:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003e14:	6a3b      	ldr	r3, [r7, #32]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d12e      	bne.n	8003e78 <prvProcessReceivedCommands+0x13c>
 8003e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1e:	f383 8811 	msr	BASEPRI, r3
 8003e22:	f3bf 8f6f 	isb	sy
 8003e26:	f3bf 8f4f 	dsb	sy
 8003e2a:	61bb      	str	r3, [r7, #24]
 8003e2c:	e7fe      	b.n	8003e2c <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003e2e:	68ba      	ldr	r2, [r7, #8]
 8003e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e32:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d109      	bne.n	8003e50 <prvProcessReceivedCommands+0x114>
 8003e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e40:	f383 8811 	msr	BASEPRI, r3
 8003e44:	f3bf 8f6f 	isb	sy
 8003e48:	f3bf 8f4f 	dsb	sy
 8003e4c:	617b      	str	r3, [r7, #20]
 8003e4e:	e7fe      	b.n	8003e4e <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( tick_now + pxTimer->xTimerPeriodInTicks ), tick_now, tick_now );
 8003e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e52:	699a      	ldr	r2, [r3, #24]
 8003e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e56:	18d1      	adds	r1, r2, r3
 8003e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e5e:	f7ff ff2b 	bl	8003cb8 <prvInsertTimerInActiveList>
					break;
 8003e62:	e009      	b.n	8003e78 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e66:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d104      	bne.n	8003e78 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8003e6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e70:	f000 fb5a 	bl	8004528 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003e74:	e000      	b.n	8003e78 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003e76:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e78:	4b07      	ldr	r3, [pc, #28]	; (8003e98 <prvProcessReceivedCommands+0x15c>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	1d39      	adds	r1, r7, #4
 8003e7e:	2200      	movs	r2, #0
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7fe fc23 	bl	80026cc <xQueueReceive>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f47f af5b 	bne.w	8003d44 <prvProcessReceivedCommands+0x8>
	}
}
 8003e8e:	bf00      	nop
 8003e90:	3730      	adds	r7, #48	; 0x30
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	20000984 	.word	0x20000984

08003e9c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b088      	sub	sp, #32
 8003ea0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ea2:	e044      	b.n	8003f2e <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ea4:	4b2b      	ldr	r3, [pc, #172]	; (8003f54 <prvSwitchTimerLists+0xb8>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003eae:	4b29      	ldr	r3, [pc, #164]	; (8003f54 <prvSwitchTimerLists+0xb8>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	3304      	adds	r3, #4
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7fe f94f 	bl	8002160 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d12d      	bne.n	8003f2e <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	4413      	add	r3, r2
 8003eda:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d90e      	bls.n	8003f02 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	68ba      	ldr	r2, [r7, #8]
 8003ee8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003ef0:	4b18      	ldr	r3, [pc, #96]	; (8003f54 <prvSwitchTimerLists+0xb8>)
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	3304      	adds	r3, #4
 8003ef8:	4619      	mov	r1, r3
 8003efa:	4610      	mov	r0, r2
 8003efc:	f7fe f8f8 	bl	80020f0 <vListInsert>
 8003f00:	e015      	b.n	8003f2e <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f02:	2300      	movs	r3, #0
 8003f04:	9300      	str	r3, [sp, #0]
 8003f06:	2300      	movs	r3, #0
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f7ff fda3 	bl	8003a58 <xTimerGenericCommand>
 8003f12:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d109      	bne.n	8003f2e <prvSwitchTimerLists+0x92>
 8003f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1e:	f383 8811 	msr	BASEPRI, r3
 8003f22:	f3bf 8f6f 	isb	sy
 8003f26:	f3bf 8f4f 	dsb	sy
 8003f2a:	603b      	str	r3, [r7, #0]
 8003f2c:	e7fe      	b.n	8003f2c <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f2e:	4b09      	ldr	r3, [pc, #36]	; (8003f54 <prvSwitchTimerLists+0xb8>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1b5      	bne.n	8003ea4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003f38:	4b06      	ldr	r3, [pc, #24]	; (8003f54 <prvSwitchTimerLists+0xb8>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003f3e:	4b06      	ldr	r3, [pc, #24]	; (8003f58 <prvSwitchTimerLists+0xbc>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a04      	ldr	r2, [pc, #16]	; (8003f54 <prvSwitchTimerLists+0xb8>)
 8003f44:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003f46:	4a04      	ldr	r2, [pc, #16]	; (8003f58 <prvSwitchTimerLists+0xbc>)
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	6013      	str	r3, [r2, #0]
}
 8003f4c:	bf00      	nop
 8003f4e:	3718      	adds	r7, #24
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	2000097c 	.word	0x2000097c
 8003f58:	20000980 	.word	0x20000980

08003f5c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003f62:	f000 f929 	bl	80041b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003f66:	4b15      	ldr	r3, [pc, #84]	; (8003fbc <prvCheckForValidListAndQueue+0x60>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d120      	bne.n	8003fb0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003f6e:	4814      	ldr	r0, [pc, #80]	; (8003fc0 <prvCheckForValidListAndQueue+0x64>)
 8003f70:	f7fe f870 	bl	8002054 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003f74:	4813      	ldr	r0, [pc, #76]	; (8003fc4 <prvCheckForValidListAndQueue+0x68>)
 8003f76:	f7fe f86d 	bl	8002054 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003f7a:	4b13      	ldr	r3, [pc, #76]	; (8003fc8 <prvCheckForValidListAndQueue+0x6c>)
 8003f7c:	4a10      	ldr	r2, [pc, #64]	; (8003fc0 <prvCheckForValidListAndQueue+0x64>)
 8003f7e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003f80:	4b12      	ldr	r3, [pc, #72]	; (8003fcc <prvCheckForValidListAndQueue+0x70>)
 8003f82:	4a10      	ldr	r2, [pc, #64]	; (8003fc4 <prvCheckForValidListAndQueue+0x68>)
 8003f84:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003f86:	2300      	movs	r3, #0
 8003f88:	9300      	str	r3, [sp, #0]
 8003f8a:	4b11      	ldr	r3, [pc, #68]	; (8003fd0 <prvCheckForValidListAndQueue+0x74>)
 8003f8c:	4a11      	ldr	r2, [pc, #68]	; (8003fd4 <prvCheckForValidListAndQueue+0x78>)
 8003f8e:	2110      	movs	r1, #16
 8003f90:	200a      	movs	r0, #10
 8003f92:	f7fe f977 	bl	8002284 <xQueueGenericCreateStatic>
 8003f96:	4602      	mov	r2, r0
 8003f98:	4b08      	ldr	r3, [pc, #32]	; (8003fbc <prvCheckForValidListAndQueue+0x60>)
 8003f9a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003f9c:	4b07      	ldr	r3, [pc, #28]	; (8003fbc <prvCheckForValidListAndQueue+0x60>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d005      	beq.n	8003fb0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003fa4:	4b05      	ldr	r3, [pc, #20]	; (8003fbc <prvCheckForValidListAndQueue+0x60>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	490b      	ldr	r1, [pc, #44]	; (8003fd8 <prvCheckForValidListAndQueue+0x7c>)
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7fe fd7a 	bl	8002aa4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003fb0:	f000 f930 	bl	8004214 <vPortExitCritical>
}
 8003fb4:	bf00      	nop
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	20000984 	.word	0x20000984
 8003fc0:	20000954 	.word	0x20000954
 8003fc4:	20000968 	.word	0x20000968
 8003fc8:	2000097c 	.word	0x2000097c
 8003fcc:	20000980 	.word	0x20000980
 8003fd0:	20000a30 	.word	0x20000a30
 8003fd4:	20000990 	.word	0x20000990
 8003fd8:	08005208 	.word	0x08005208

08003fdc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	3b04      	subs	r3, #4
 8003fec:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ff4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	3b04      	subs	r3, #4
 8003ffa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	f023 0201 	bic.w	r2, r3, #1
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	3b04      	subs	r3, #4
 800400a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800400c:	4a08      	ldr	r2, [pc, #32]	; (8004030 <pxPortInitialiseStack+0x54>)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	3b14      	subs	r3, #20
 8004016:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	3b20      	subs	r3, #32
 8004022:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004024:	68fb      	ldr	r3, [r7, #12]
}
 8004026:	4618      	mov	r0, r3
 8004028:	3714      	adds	r7, #20
 800402a:	46bd      	mov	sp, r7
 800402c:	bc80      	pop	{r7}
 800402e:	4770      	bx	lr
 8004030:	08004035 	.word	0x08004035

08004034 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800403a:	2300      	movs	r3, #0
 800403c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800403e:	4b10      	ldr	r3, [pc, #64]	; (8004080 <prvTaskExitError+0x4c>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004046:	d009      	beq.n	800405c <prvTaskExitError+0x28>
 8004048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404c:	f383 8811 	msr	BASEPRI, r3
 8004050:	f3bf 8f6f 	isb	sy
 8004054:	f3bf 8f4f 	dsb	sy
 8004058:	60fb      	str	r3, [r7, #12]
 800405a:	e7fe      	b.n	800405a <prvTaskExitError+0x26>
 800405c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004060:	f383 8811 	msr	BASEPRI, r3
 8004064:	f3bf 8f6f 	isb	sy
 8004068:	f3bf 8f4f 	dsb	sy
 800406c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800406e:	bf00      	nop
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d0fc      	beq.n	8004070 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004076:	bf00      	nop
 8004078:	3714      	adds	r7, #20
 800407a:	46bd      	mov	sp, r7
 800407c:	bc80      	pop	{r7}
 800407e:	4770      	bx	lr
 8004080:	2000000c 	.word	0x2000000c
	...

08004090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004090:	4b07      	ldr	r3, [pc, #28]	; (80040b0 <pxCurrentTCBConst2>)
 8004092:	6819      	ldr	r1, [r3, #0]
 8004094:	6808      	ldr	r0, [r1, #0]
 8004096:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800409a:	f380 8809 	msr	PSP, r0
 800409e:	f3bf 8f6f 	isb	sy
 80040a2:	f04f 0000 	mov.w	r0, #0
 80040a6:	f380 8811 	msr	BASEPRI, r0
 80040aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80040ae:	4770      	bx	lr

080040b0 <pxCurrentTCBConst2>:
 80040b0:	20000454 	.word	0x20000454
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80040b4:	bf00      	nop
 80040b6:	bf00      	nop

080040b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80040b8:	4806      	ldr	r0, [pc, #24]	; (80040d4 <prvPortStartFirstTask+0x1c>)
 80040ba:	6800      	ldr	r0, [r0, #0]
 80040bc:	6800      	ldr	r0, [r0, #0]
 80040be:	f380 8808 	msr	MSP, r0
 80040c2:	b662      	cpsie	i
 80040c4:	b661      	cpsie	f
 80040c6:	f3bf 8f4f 	dsb	sy
 80040ca:	f3bf 8f6f 	isb	sy
 80040ce:	df00      	svc	0
 80040d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80040d2:	bf00      	nop
 80040d4:	e000ed08 	.word	0xe000ed08

080040d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80040de:	4b31      	ldr	r3, [pc, #196]	; (80041a4 <xPortStartScheduler+0xcc>)
 80040e0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	22ff      	movs	r2, #255	; 0xff
 80040ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80040f8:	78fb      	ldrb	r3, [r7, #3]
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004100:	b2da      	uxtb	r2, r3
 8004102:	4b29      	ldr	r3, [pc, #164]	; (80041a8 <xPortStartScheduler+0xd0>)
 8004104:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004106:	4b29      	ldr	r3, [pc, #164]	; (80041ac <xPortStartScheduler+0xd4>)
 8004108:	2207      	movs	r2, #7
 800410a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800410c:	e009      	b.n	8004122 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800410e:	4b27      	ldr	r3, [pc, #156]	; (80041ac <xPortStartScheduler+0xd4>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	3b01      	subs	r3, #1
 8004114:	4a25      	ldr	r2, [pc, #148]	; (80041ac <xPortStartScheduler+0xd4>)
 8004116:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004118:	78fb      	ldrb	r3, [r7, #3]
 800411a:	b2db      	uxtb	r3, r3
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	b2db      	uxtb	r3, r3
 8004120:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004122:	78fb      	ldrb	r3, [r7, #3]
 8004124:	b2db      	uxtb	r3, r3
 8004126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800412a:	2b80      	cmp	r3, #128	; 0x80
 800412c:	d0ef      	beq.n	800410e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800412e:	4b1f      	ldr	r3, [pc, #124]	; (80041ac <xPortStartScheduler+0xd4>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f1c3 0307 	rsb	r3, r3, #7
 8004136:	2b04      	cmp	r3, #4
 8004138:	d009      	beq.n	800414e <xPortStartScheduler+0x76>
 800413a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413e:	f383 8811 	msr	BASEPRI, r3
 8004142:	f3bf 8f6f 	isb	sy
 8004146:	f3bf 8f4f 	dsb	sy
 800414a:	60bb      	str	r3, [r7, #8]
 800414c:	e7fe      	b.n	800414c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800414e:	4b17      	ldr	r3, [pc, #92]	; (80041ac <xPortStartScheduler+0xd4>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	021b      	lsls	r3, r3, #8
 8004154:	4a15      	ldr	r2, [pc, #84]	; (80041ac <xPortStartScheduler+0xd4>)
 8004156:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004158:	4b14      	ldr	r3, [pc, #80]	; (80041ac <xPortStartScheduler+0xd4>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004160:	4a12      	ldr	r2, [pc, #72]	; (80041ac <xPortStartScheduler+0xd4>)
 8004162:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	b2da      	uxtb	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800416c:	4b10      	ldr	r3, [pc, #64]	; (80041b0 <xPortStartScheduler+0xd8>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a0f      	ldr	r2, [pc, #60]	; (80041b0 <xPortStartScheduler+0xd8>)
 8004172:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004176:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004178:	4b0d      	ldr	r3, [pc, #52]	; (80041b0 <xPortStartScheduler+0xd8>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a0c      	ldr	r2, [pc, #48]	; (80041b0 <xPortStartScheduler+0xd8>)
 800417e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004182:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004184:	f000 f8b0 	bl	80042e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004188:	4b0a      	ldr	r3, [pc, #40]	; (80041b4 <xPortStartScheduler+0xdc>)
 800418a:	2200      	movs	r2, #0
 800418c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800418e:	f7ff ff93 	bl	80040b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004192:	f7ff f885 	bl	80032a0 <vTaskSwitchContext>
	prvTaskExitError();
 8004196:	f7ff ff4d 	bl	8004034 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	e000e400 	.word	0xe000e400
 80041a8:	20000a80 	.word	0x20000a80
 80041ac:	20000a84 	.word	0x20000a84
 80041b0:	e000ed20 	.word	0xe000ed20
 80041b4:	2000000c 	.word	0x2000000c

080041b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c2:	f383 8811 	msr	BASEPRI, r3
 80041c6:	f3bf 8f6f 	isb	sy
 80041ca:	f3bf 8f4f 	dsb	sy
 80041ce:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80041d0:	4b0e      	ldr	r3, [pc, #56]	; (800420c <vPortEnterCritical+0x54>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	3301      	adds	r3, #1
 80041d6:	4a0d      	ldr	r2, [pc, #52]	; (800420c <vPortEnterCritical+0x54>)
 80041d8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80041da:	4b0c      	ldr	r3, [pc, #48]	; (800420c <vPortEnterCritical+0x54>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d10e      	bne.n	8004200 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80041e2:	4b0b      	ldr	r3, [pc, #44]	; (8004210 <vPortEnterCritical+0x58>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d009      	beq.n	8004200 <vPortEnterCritical+0x48>
 80041ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f0:	f383 8811 	msr	BASEPRI, r3
 80041f4:	f3bf 8f6f 	isb	sy
 80041f8:	f3bf 8f4f 	dsb	sy
 80041fc:	603b      	str	r3, [r7, #0]
 80041fe:	e7fe      	b.n	80041fe <vPortEnterCritical+0x46>
	}
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	bc80      	pop	{r7}
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	2000000c 	.word	0x2000000c
 8004210:	e000ed04 	.word	0xe000ed04

08004214 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800421a:	4b10      	ldr	r3, [pc, #64]	; (800425c <vPortExitCritical+0x48>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d109      	bne.n	8004236 <vPortExitCritical+0x22>
 8004222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004226:	f383 8811 	msr	BASEPRI, r3
 800422a:	f3bf 8f6f 	isb	sy
 800422e:	f3bf 8f4f 	dsb	sy
 8004232:	607b      	str	r3, [r7, #4]
 8004234:	e7fe      	b.n	8004234 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004236:	4b09      	ldr	r3, [pc, #36]	; (800425c <vPortExitCritical+0x48>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	3b01      	subs	r3, #1
 800423c:	4a07      	ldr	r2, [pc, #28]	; (800425c <vPortExitCritical+0x48>)
 800423e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004240:	4b06      	ldr	r3, [pc, #24]	; (800425c <vPortExitCritical+0x48>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d104      	bne.n	8004252 <vPortExitCritical+0x3e>
 8004248:	2300      	movs	r3, #0
 800424a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004252:	bf00      	nop
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	bc80      	pop	{r7}
 800425a:	4770      	bx	lr
 800425c:	2000000c 	.word	0x2000000c

08004260 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004260:	f3ef 8009 	mrs	r0, PSP
 8004264:	f3bf 8f6f 	isb	sy
 8004268:	4b0d      	ldr	r3, [pc, #52]	; (80042a0 <pxCurrentTCBConst>)
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004270:	6010      	str	r0, [r2, #0]
 8004272:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004276:	f04f 0050 	mov.w	r0, #80	; 0x50
 800427a:	f380 8811 	msr	BASEPRI, r0
 800427e:	f7ff f80f 	bl	80032a0 <vTaskSwitchContext>
 8004282:	f04f 0000 	mov.w	r0, #0
 8004286:	f380 8811 	msr	BASEPRI, r0
 800428a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800428e:	6819      	ldr	r1, [r3, #0]
 8004290:	6808      	ldr	r0, [r1, #0]
 8004292:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004296:	f380 8809 	msr	PSP, r0
 800429a:	f3bf 8f6f 	isb	sy
 800429e:	4770      	bx	lr

080042a0 <pxCurrentTCBConst>:
 80042a0:	20000454 	.word	0x20000454
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80042a4:	bf00      	nop
 80042a6:	bf00      	nop

080042a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
	__asm volatile
 80042ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b2:	f383 8811 	msr	BASEPRI, r3
 80042b6:	f3bf 8f6f 	isb	sy
 80042ba:	f3bf 8f4f 	dsb	sy
 80042be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80042c0:	f7fe ff30 	bl	8003124 <xTaskIncrementTick>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d003      	beq.n	80042d2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80042ca:	4b06      	ldr	r3, [pc, #24]	; (80042e4 <xPortSysTickHandler+0x3c>)
 80042cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	2300      	movs	r3, #0
 80042d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80042dc:	bf00      	nop
 80042de:	3708      	adds	r7, #8
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	e000ed04 	.word	0xe000ed04

080042e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80042e8:	b480      	push	{r7}
 80042ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80042ec:	4b0a      	ldr	r3, [pc, #40]	; (8004318 <vPortSetupTimerInterrupt+0x30>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80042f2:	4b0a      	ldr	r3, [pc, #40]	; (800431c <vPortSetupTimerInterrupt+0x34>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80042f8:	4b09      	ldr	r3, [pc, #36]	; (8004320 <vPortSetupTimerInterrupt+0x38>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a09      	ldr	r2, [pc, #36]	; (8004324 <vPortSetupTimerInterrupt+0x3c>)
 80042fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004302:	099b      	lsrs	r3, r3, #6
 8004304:	4a08      	ldr	r2, [pc, #32]	; (8004328 <vPortSetupTimerInterrupt+0x40>)
 8004306:	3b01      	subs	r3, #1
 8004308:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800430a:	4b03      	ldr	r3, [pc, #12]	; (8004318 <vPortSetupTimerInterrupt+0x30>)
 800430c:	2207      	movs	r2, #7
 800430e:	601a      	str	r2, [r3, #0]
}
 8004310:	bf00      	nop
 8004312:	46bd      	mov	sp, r7
 8004314:	bc80      	pop	{r7}
 8004316:	4770      	bx	lr
 8004318:	e000e010 	.word	0xe000e010
 800431c:	e000e018 	.word	0xe000e018
 8004320:	20000000 	.word	0x20000000
 8004324:	10624dd3 	.word	0x10624dd3
 8004328:	e000e014 	.word	0xe000e014

0800432c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004332:	f3ef 8305 	mrs	r3, IPSR
 8004336:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2b0f      	cmp	r3, #15
 800433c:	d913      	bls.n	8004366 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800433e:	4a15      	ldr	r2, [pc, #84]	; (8004394 <vPortValidateInterruptPriority+0x68>)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	4413      	add	r3, r2
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004348:	4b13      	ldr	r3, [pc, #76]	; (8004398 <vPortValidateInterruptPriority+0x6c>)
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	7afa      	ldrb	r2, [r7, #11]
 800434e:	429a      	cmp	r2, r3
 8004350:	d209      	bcs.n	8004366 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8004352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004356:	f383 8811 	msr	BASEPRI, r3
 800435a:	f3bf 8f6f 	isb	sy
 800435e:	f3bf 8f4f 	dsb	sy
 8004362:	607b      	str	r3, [r7, #4]
 8004364:	e7fe      	b.n	8004364 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004366:	4b0d      	ldr	r3, [pc, #52]	; (800439c <vPortValidateInterruptPriority+0x70>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800436e:	4b0c      	ldr	r3, [pc, #48]	; (80043a0 <vPortValidateInterruptPriority+0x74>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	429a      	cmp	r2, r3
 8004374:	d909      	bls.n	800438a <vPortValidateInterruptPriority+0x5e>
 8004376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437a:	f383 8811 	msr	BASEPRI, r3
 800437e:	f3bf 8f6f 	isb	sy
 8004382:	f3bf 8f4f 	dsb	sy
 8004386:	603b      	str	r3, [r7, #0]
 8004388:	e7fe      	b.n	8004388 <vPortValidateInterruptPriority+0x5c>
	}
 800438a:	bf00      	nop
 800438c:	3714      	adds	r7, #20
 800438e:	46bd      	mov	sp, r7
 8004390:	bc80      	pop	{r7}
 8004392:	4770      	bx	lr
 8004394:	e000e3f0 	.word	0xe000e3f0
 8004398:	20000a80 	.word	0x20000a80
 800439c:	e000ed0c 	.word	0xe000ed0c
 80043a0:	20000a84 	.word	0x20000a84

080043a4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b08a      	sub	sp, #40	; 0x28
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80043ac:	2300      	movs	r3, #0
 80043ae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80043b0:	f7fe fe00 	bl	8002fb4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80043b4:	4b57      	ldr	r3, [pc, #348]	; (8004514 <pvPortMalloc+0x170>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d101      	bne.n	80043c0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80043bc:	f000 f90c 	bl	80045d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80043c0:	4b55      	ldr	r3, [pc, #340]	; (8004518 <pvPortMalloc+0x174>)
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4013      	ands	r3, r2
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f040 808c 	bne.w	80044e6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d01c      	beq.n	800440e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80043d4:	2208      	movs	r2, #8
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4413      	add	r3, r2
 80043da:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f003 0307 	and.w	r3, r3, #7
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d013      	beq.n	800440e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f023 0307 	bic.w	r3, r3, #7
 80043ec:	3308      	adds	r3, #8
 80043ee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f003 0307 	and.w	r3, r3, #7
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d009      	beq.n	800440e <pvPortMalloc+0x6a>
 80043fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fe:	f383 8811 	msr	BASEPRI, r3
 8004402:	f3bf 8f6f 	isb	sy
 8004406:	f3bf 8f4f 	dsb	sy
 800440a:	617b      	str	r3, [r7, #20]
 800440c:	e7fe      	b.n	800440c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d068      	beq.n	80044e6 <pvPortMalloc+0x142>
 8004414:	4b41      	ldr	r3, [pc, #260]	; (800451c <pvPortMalloc+0x178>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	429a      	cmp	r2, r3
 800441c:	d863      	bhi.n	80044e6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800441e:	4b40      	ldr	r3, [pc, #256]	; (8004520 <pvPortMalloc+0x17c>)
 8004420:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004422:	4b3f      	ldr	r3, [pc, #252]	; (8004520 <pvPortMalloc+0x17c>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004428:	e004      	b.n	8004434 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800442a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800442e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	429a      	cmp	r2, r3
 800443c:	d903      	bls.n	8004446 <pvPortMalloc+0xa2>
 800443e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1f1      	bne.n	800442a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004446:	4b33      	ldr	r3, [pc, #204]	; (8004514 <pvPortMalloc+0x170>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800444c:	429a      	cmp	r2, r3
 800444e:	d04a      	beq.n	80044e6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004450:	6a3b      	ldr	r3, [r7, #32]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2208      	movs	r2, #8
 8004456:	4413      	add	r3, r2
 8004458:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800445a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	6a3b      	ldr	r3, [r7, #32]
 8004460:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004464:	685a      	ldr	r2, [r3, #4]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	1ad2      	subs	r2, r2, r3
 800446a:	2308      	movs	r3, #8
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	429a      	cmp	r2, r3
 8004470:	d91e      	bls.n	80044b0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4413      	add	r3, r2
 8004478:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	f003 0307 	and.w	r3, r3, #7
 8004480:	2b00      	cmp	r3, #0
 8004482:	d009      	beq.n	8004498 <pvPortMalloc+0xf4>
 8004484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004488:	f383 8811 	msr	BASEPRI, r3
 800448c:	f3bf 8f6f 	isb	sy
 8004490:	f3bf 8f4f 	dsb	sy
 8004494:	613b      	str	r3, [r7, #16]
 8004496:	e7fe      	b.n	8004496 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	1ad2      	subs	r2, r2, r3
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80044a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80044aa:	69b8      	ldr	r0, [r7, #24]
 80044ac:	f000 f8f6 	bl	800469c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80044b0:	4b1a      	ldr	r3, [pc, #104]	; (800451c <pvPortMalloc+0x178>)
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	4a18      	ldr	r2, [pc, #96]	; (800451c <pvPortMalloc+0x178>)
 80044bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80044be:	4b17      	ldr	r3, [pc, #92]	; (800451c <pvPortMalloc+0x178>)
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	4b18      	ldr	r3, [pc, #96]	; (8004524 <pvPortMalloc+0x180>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d203      	bcs.n	80044d2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80044ca:	4b14      	ldr	r3, [pc, #80]	; (800451c <pvPortMalloc+0x178>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a15      	ldr	r2, [pc, #84]	; (8004524 <pvPortMalloc+0x180>)
 80044d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80044d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	4b10      	ldr	r3, [pc, #64]	; (8004518 <pvPortMalloc+0x174>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	431a      	orrs	r2, r3
 80044dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	2200      	movs	r2, #0
 80044e4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80044e6:	f7fe fd73 	bl	8002fd0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	f003 0307 	and.w	r3, r3, #7
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d009      	beq.n	8004508 <pvPortMalloc+0x164>
 80044f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f8:	f383 8811 	msr	BASEPRI, r3
 80044fc:	f3bf 8f6f 	isb	sy
 8004500:	f3bf 8f4f 	dsb	sy
 8004504:	60fb      	str	r3, [r7, #12]
 8004506:	e7fe      	b.n	8004506 <pvPortMalloc+0x162>
	return pvReturn;
 8004508:	69fb      	ldr	r3, [r7, #28]
}
 800450a:	4618      	mov	r0, r3
 800450c:	3728      	adds	r7, #40	; 0x28
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	20001a90 	.word	0x20001a90
 8004518:	20001a9c 	.word	0x20001a9c
 800451c:	20001a94 	.word	0x20001a94
 8004520:	20001a88 	.word	0x20001a88
 8004524:	20001a98 	.word	0x20001a98

08004528 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d046      	beq.n	80045c8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800453a:	2308      	movs	r3, #8
 800453c:	425b      	negs	r3, r3
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	4413      	add	r3, r2
 8004542:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	4b20      	ldr	r3, [pc, #128]	; (80045d0 <vPortFree+0xa8>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4013      	ands	r3, r2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d109      	bne.n	800456a <vPortFree+0x42>
 8004556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800455a:	f383 8811 	msr	BASEPRI, r3
 800455e:	f3bf 8f6f 	isb	sy
 8004562:	f3bf 8f4f 	dsb	sy
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	e7fe      	b.n	8004568 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d009      	beq.n	8004586 <vPortFree+0x5e>
 8004572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004576:	f383 8811 	msr	BASEPRI, r3
 800457a:	f3bf 8f6f 	isb	sy
 800457e:	f3bf 8f4f 	dsb	sy
 8004582:	60bb      	str	r3, [r7, #8]
 8004584:	e7fe      	b.n	8004584 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	685a      	ldr	r2, [r3, #4]
 800458a:	4b11      	ldr	r3, [pc, #68]	; (80045d0 <vPortFree+0xa8>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4013      	ands	r3, r2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d019      	beq.n	80045c8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d115      	bne.n	80045c8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	4b0b      	ldr	r3, [pc, #44]	; (80045d0 <vPortFree+0xa8>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	43db      	mvns	r3, r3
 80045a6:	401a      	ands	r2, r3
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80045ac:	f7fe fd02 	bl	8002fb4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	685a      	ldr	r2, [r3, #4]
 80045b4:	4b07      	ldr	r3, [pc, #28]	; (80045d4 <vPortFree+0xac>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4413      	add	r3, r2
 80045ba:	4a06      	ldr	r2, [pc, #24]	; (80045d4 <vPortFree+0xac>)
 80045bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80045be:	6938      	ldr	r0, [r7, #16]
 80045c0:	f000 f86c 	bl	800469c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80045c4:	f7fe fd04 	bl	8002fd0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80045c8:	bf00      	nop
 80045ca:	3718      	adds	r7, #24
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	20001a9c 	.word	0x20001a9c
 80045d4:	20001a94 	.word	0x20001a94

080045d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80045de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80045e4:	4b27      	ldr	r3, [pc, #156]	; (8004684 <prvHeapInit+0xac>)
 80045e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f003 0307 	and.w	r3, r3, #7
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00c      	beq.n	800460c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	3307      	adds	r3, #7
 80045f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f023 0307 	bic.w	r3, r3, #7
 80045fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	4a1f      	ldr	r2, [pc, #124]	; (8004684 <prvHeapInit+0xac>)
 8004608:	4413      	add	r3, r2
 800460a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004610:	4a1d      	ldr	r2, [pc, #116]	; (8004688 <prvHeapInit+0xb0>)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004616:	4b1c      	ldr	r3, [pc, #112]	; (8004688 <prvHeapInit+0xb0>)
 8004618:	2200      	movs	r2, #0
 800461a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	68ba      	ldr	r2, [r7, #8]
 8004620:	4413      	add	r3, r2
 8004622:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004624:	2208      	movs	r2, #8
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	1a9b      	subs	r3, r3, r2
 800462a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f023 0307 	bic.w	r3, r3, #7
 8004632:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	4a15      	ldr	r2, [pc, #84]	; (800468c <prvHeapInit+0xb4>)
 8004638:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800463a:	4b14      	ldr	r3, [pc, #80]	; (800468c <prvHeapInit+0xb4>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2200      	movs	r2, #0
 8004640:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004642:	4b12      	ldr	r3, [pc, #72]	; (800468c <prvHeapInit+0xb4>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2200      	movs	r2, #0
 8004648:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	1ad2      	subs	r2, r2, r3
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004658:	4b0c      	ldr	r3, [pc, #48]	; (800468c <prvHeapInit+0xb4>)
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	4a0a      	ldr	r2, [pc, #40]	; (8004690 <prvHeapInit+0xb8>)
 8004666:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	4a09      	ldr	r2, [pc, #36]	; (8004694 <prvHeapInit+0xbc>)
 800466e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004670:	4b09      	ldr	r3, [pc, #36]	; (8004698 <prvHeapInit+0xc0>)
 8004672:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004676:	601a      	str	r2, [r3, #0]
}
 8004678:	bf00      	nop
 800467a:	3714      	adds	r7, #20
 800467c:	46bd      	mov	sp, r7
 800467e:	bc80      	pop	{r7}
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	20000a88 	.word	0x20000a88
 8004688:	20001a88 	.word	0x20001a88
 800468c:	20001a90 	.word	0x20001a90
 8004690:	20001a98 	.word	0x20001a98
 8004694:	20001a94 	.word	0x20001a94
 8004698:	20001a9c 	.word	0x20001a9c

0800469c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80046a4:	4b27      	ldr	r3, [pc, #156]	; (8004744 <prvInsertBlockIntoFreeList+0xa8>)
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	e002      	b.n	80046b0 <prvInsertBlockIntoFreeList+0x14>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	60fb      	str	r3, [r7, #12]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d8f7      	bhi.n	80046aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	4413      	add	r3, r2
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d108      	bne.n	80046de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	685a      	ldr	r2, [r3, #4]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	441a      	add	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	68ba      	ldr	r2, [r7, #8]
 80046e8:	441a      	add	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d118      	bne.n	8004724 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	4b14      	ldr	r3, [pc, #80]	; (8004748 <prvInsertBlockIntoFreeList+0xac>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d00d      	beq.n	800471a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	441a      	add	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	601a      	str	r2, [r3, #0]
 8004718:	e008      	b.n	800472c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800471a:	4b0b      	ldr	r3, [pc, #44]	; (8004748 <prvInsertBlockIntoFreeList+0xac>)
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	601a      	str	r2, [r3, #0]
 8004722:	e003      	b.n	800472c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	429a      	cmp	r2, r3
 8004732:	d002      	beq.n	800473a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800473a:	bf00      	nop
 800473c:	3714      	adds	r7, #20
 800473e:	46bd      	mov	sp, r7
 8004740:	bc80      	pop	{r7}
 8004742:	4770      	bx	lr
 8004744:	20001a88 	.word	0x20001a88
 8004748:	20001a90 	.word	0x20001a90

0800474c <__errno>:
 800474c:	4b01      	ldr	r3, [pc, #4]	; (8004754 <__errno+0x8>)
 800474e:	6818      	ldr	r0, [r3, #0]
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	20000010 	.word	0x20000010

08004758 <__libc_init_array>:
 8004758:	b570      	push	{r4, r5, r6, lr}
 800475a:	2500      	movs	r5, #0
 800475c:	4e0c      	ldr	r6, [pc, #48]	; (8004790 <__libc_init_array+0x38>)
 800475e:	4c0d      	ldr	r4, [pc, #52]	; (8004794 <__libc_init_array+0x3c>)
 8004760:	1ba4      	subs	r4, r4, r6
 8004762:	10a4      	asrs	r4, r4, #2
 8004764:	42a5      	cmp	r5, r4
 8004766:	d109      	bne.n	800477c <__libc_init_array+0x24>
 8004768:	f000 fc36 	bl	8004fd8 <_init>
 800476c:	2500      	movs	r5, #0
 800476e:	4e0a      	ldr	r6, [pc, #40]	; (8004798 <__libc_init_array+0x40>)
 8004770:	4c0a      	ldr	r4, [pc, #40]	; (800479c <__libc_init_array+0x44>)
 8004772:	1ba4      	subs	r4, r4, r6
 8004774:	10a4      	asrs	r4, r4, #2
 8004776:	42a5      	cmp	r5, r4
 8004778:	d105      	bne.n	8004786 <__libc_init_array+0x2e>
 800477a:	bd70      	pop	{r4, r5, r6, pc}
 800477c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004780:	4798      	blx	r3
 8004782:	3501      	adds	r5, #1
 8004784:	e7ee      	b.n	8004764 <__libc_init_array+0xc>
 8004786:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800478a:	4798      	blx	r3
 800478c:	3501      	adds	r5, #1
 800478e:	e7f2      	b.n	8004776 <__libc_init_array+0x1e>
 8004790:	08005280 	.word	0x08005280
 8004794:	08005280 	.word	0x08005280
 8004798:	08005280 	.word	0x08005280
 800479c:	08005284 	.word	0x08005284

080047a0 <memcpy>:
 80047a0:	b510      	push	{r4, lr}
 80047a2:	1e43      	subs	r3, r0, #1
 80047a4:	440a      	add	r2, r1
 80047a6:	4291      	cmp	r1, r2
 80047a8:	d100      	bne.n	80047ac <memcpy+0xc>
 80047aa:	bd10      	pop	{r4, pc}
 80047ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047b4:	e7f7      	b.n	80047a6 <memcpy+0x6>

080047b6 <memset>:
 80047b6:	4603      	mov	r3, r0
 80047b8:	4402      	add	r2, r0
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d100      	bne.n	80047c0 <memset+0xa>
 80047be:	4770      	bx	lr
 80047c0:	f803 1b01 	strb.w	r1, [r3], #1
 80047c4:	e7f9      	b.n	80047ba <memset+0x4>
	...

080047c8 <siprintf>:
 80047c8:	b40e      	push	{r1, r2, r3}
 80047ca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80047ce:	b500      	push	{lr}
 80047d0:	b09c      	sub	sp, #112	; 0x70
 80047d2:	ab1d      	add	r3, sp, #116	; 0x74
 80047d4:	9002      	str	r0, [sp, #8]
 80047d6:	9006      	str	r0, [sp, #24]
 80047d8:	9107      	str	r1, [sp, #28]
 80047da:	9104      	str	r1, [sp, #16]
 80047dc:	4808      	ldr	r0, [pc, #32]	; (8004800 <siprintf+0x38>)
 80047de:	4909      	ldr	r1, [pc, #36]	; (8004804 <siprintf+0x3c>)
 80047e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80047e4:	9105      	str	r1, [sp, #20]
 80047e6:	6800      	ldr	r0, [r0, #0]
 80047e8:	a902      	add	r1, sp, #8
 80047ea:	9301      	str	r3, [sp, #4]
 80047ec:	f000 f90c 	bl	8004a08 <_svfiprintf_r>
 80047f0:	2200      	movs	r2, #0
 80047f2:	9b02      	ldr	r3, [sp, #8]
 80047f4:	701a      	strb	r2, [r3, #0]
 80047f6:	b01c      	add	sp, #112	; 0x70
 80047f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80047fc:	b003      	add	sp, #12
 80047fe:	4770      	bx	lr
 8004800:	20000010 	.word	0x20000010
 8004804:	ffff0208 	.word	0xffff0208

08004808 <_free_r>:
 8004808:	b538      	push	{r3, r4, r5, lr}
 800480a:	4605      	mov	r5, r0
 800480c:	2900      	cmp	r1, #0
 800480e:	d043      	beq.n	8004898 <_free_r+0x90>
 8004810:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004814:	1f0c      	subs	r4, r1, #4
 8004816:	2b00      	cmp	r3, #0
 8004818:	bfb8      	it	lt
 800481a:	18e4      	addlt	r4, r4, r3
 800481c:	f000 fbab 	bl	8004f76 <__malloc_lock>
 8004820:	4a1e      	ldr	r2, [pc, #120]	; (800489c <_free_r+0x94>)
 8004822:	6813      	ldr	r3, [r2, #0]
 8004824:	4610      	mov	r0, r2
 8004826:	b933      	cbnz	r3, 8004836 <_free_r+0x2e>
 8004828:	6063      	str	r3, [r4, #4]
 800482a:	6014      	str	r4, [r2, #0]
 800482c:	4628      	mov	r0, r5
 800482e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004832:	f000 bba1 	b.w	8004f78 <__malloc_unlock>
 8004836:	42a3      	cmp	r3, r4
 8004838:	d90b      	bls.n	8004852 <_free_r+0x4a>
 800483a:	6821      	ldr	r1, [r4, #0]
 800483c:	1862      	adds	r2, r4, r1
 800483e:	4293      	cmp	r3, r2
 8004840:	bf01      	itttt	eq
 8004842:	681a      	ldreq	r2, [r3, #0]
 8004844:	685b      	ldreq	r3, [r3, #4]
 8004846:	1852      	addeq	r2, r2, r1
 8004848:	6022      	streq	r2, [r4, #0]
 800484a:	6063      	str	r3, [r4, #4]
 800484c:	6004      	str	r4, [r0, #0]
 800484e:	e7ed      	b.n	800482c <_free_r+0x24>
 8004850:	4613      	mov	r3, r2
 8004852:	685a      	ldr	r2, [r3, #4]
 8004854:	b10a      	cbz	r2, 800485a <_free_r+0x52>
 8004856:	42a2      	cmp	r2, r4
 8004858:	d9fa      	bls.n	8004850 <_free_r+0x48>
 800485a:	6819      	ldr	r1, [r3, #0]
 800485c:	1858      	adds	r0, r3, r1
 800485e:	42a0      	cmp	r0, r4
 8004860:	d10b      	bne.n	800487a <_free_r+0x72>
 8004862:	6820      	ldr	r0, [r4, #0]
 8004864:	4401      	add	r1, r0
 8004866:	1858      	adds	r0, r3, r1
 8004868:	4282      	cmp	r2, r0
 800486a:	6019      	str	r1, [r3, #0]
 800486c:	d1de      	bne.n	800482c <_free_r+0x24>
 800486e:	6810      	ldr	r0, [r2, #0]
 8004870:	6852      	ldr	r2, [r2, #4]
 8004872:	4401      	add	r1, r0
 8004874:	6019      	str	r1, [r3, #0]
 8004876:	605a      	str	r2, [r3, #4]
 8004878:	e7d8      	b.n	800482c <_free_r+0x24>
 800487a:	d902      	bls.n	8004882 <_free_r+0x7a>
 800487c:	230c      	movs	r3, #12
 800487e:	602b      	str	r3, [r5, #0]
 8004880:	e7d4      	b.n	800482c <_free_r+0x24>
 8004882:	6820      	ldr	r0, [r4, #0]
 8004884:	1821      	adds	r1, r4, r0
 8004886:	428a      	cmp	r2, r1
 8004888:	bf01      	itttt	eq
 800488a:	6811      	ldreq	r1, [r2, #0]
 800488c:	6852      	ldreq	r2, [r2, #4]
 800488e:	1809      	addeq	r1, r1, r0
 8004890:	6021      	streq	r1, [r4, #0]
 8004892:	6062      	str	r2, [r4, #4]
 8004894:	605c      	str	r4, [r3, #4]
 8004896:	e7c9      	b.n	800482c <_free_r+0x24>
 8004898:	bd38      	pop	{r3, r4, r5, pc}
 800489a:	bf00      	nop
 800489c:	20001aa0 	.word	0x20001aa0

080048a0 <_malloc_r>:
 80048a0:	b570      	push	{r4, r5, r6, lr}
 80048a2:	1ccd      	adds	r5, r1, #3
 80048a4:	f025 0503 	bic.w	r5, r5, #3
 80048a8:	3508      	adds	r5, #8
 80048aa:	2d0c      	cmp	r5, #12
 80048ac:	bf38      	it	cc
 80048ae:	250c      	movcc	r5, #12
 80048b0:	2d00      	cmp	r5, #0
 80048b2:	4606      	mov	r6, r0
 80048b4:	db01      	blt.n	80048ba <_malloc_r+0x1a>
 80048b6:	42a9      	cmp	r1, r5
 80048b8:	d903      	bls.n	80048c2 <_malloc_r+0x22>
 80048ba:	230c      	movs	r3, #12
 80048bc:	6033      	str	r3, [r6, #0]
 80048be:	2000      	movs	r0, #0
 80048c0:	bd70      	pop	{r4, r5, r6, pc}
 80048c2:	f000 fb58 	bl	8004f76 <__malloc_lock>
 80048c6:	4a21      	ldr	r2, [pc, #132]	; (800494c <_malloc_r+0xac>)
 80048c8:	6814      	ldr	r4, [r2, #0]
 80048ca:	4621      	mov	r1, r4
 80048cc:	b991      	cbnz	r1, 80048f4 <_malloc_r+0x54>
 80048ce:	4c20      	ldr	r4, [pc, #128]	; (8004950 <_malloc_r+0xb0>)
 80048d0:	6823      	ldr	r3, [r4, #0]
 80048d2:	b91b      	cbnz	r3, 80048dc <_malloc_r+0x3c>
 80048d4:	4630      	mov	r0, r6
 80048d6:	f000 fb17 	bl	8004f08 <_sbrk_r>
 80048da:	6020      	str	r0, [r4, #0]
 80048dc:	4629      	mov	r1, r5
 80048de:	4630      	mov	r0, r6
 80048e0:	f000 fb12 	bl	8004f08 <_sbrk_r>
 80048e4:	1c43      	adds	r3, r0, #1
 80048e6:	d124      	bne.n	8004932 <_malloc_r+0x92>
 80048e8:	230c      	movs	r3, #12
 80048ea:	4630      	mov	r0, r6
 80048ec:	6033      	str	r3, [r6, #0]
 80048ee:	f000 fb43 	bl	8004f78 <__malloc_unlock>
 80048f2:	e7e4      	b.n	80048be <_malloc_r+0x1e>
 80048f4:	680b      	ldr	r3, [r1, #0]
 80048f6:	1b5b      	subs	r3, r3, r5
 80048f8:	d418      	bmi.n	800492c <_malloc_r+0x8c>
 80048fa:	2b0b      	cmp	r3, #11
 80048fc:	d90f      	bls.n	800491e <_malloc_r+0x7e>
 80048fe:	600b      	str	r3, [r1, #0]
 8004900:	18cc      	adds	r4, r1, r3
 8004902:	50cd      	str	r5, [r1, r3]
 8004904:	4630      	mov	r0, r6
 8004906:	f000 fb37 	bl	8004f78 <__malloc_unlock>
 800490a:	f104 000b 	add.w	r0, r4, #11
 800490e:	1d23      	adds	r3, r4, #4
 8004910:	f020 0007 	bic.w	r0, r0, #7
 8004914:	1ac3      	subs	r3, r0, r3
 8004916:	d0d3      	beq.n	80048c0 <_malloc_r+0x20>
 8004918:	425a      	negs	r2, r3
 800491a:	50e2      	str	r2, [r4, r3]
 800491c:	e7d0      	b.n	80048c0 <_malloc_r+0x20>
 800491e:	684b      	ldr	r3, [r1, #4]
 8004920:	428c      	cmp	r4, r1
 8004922:	bf16      	itet	ne
 8004924:	6063      	strne	r3, [r4, #4]
 8004926:	6013      	streq	r3, [r2, #0]
 8004928:	460c      	movne	r4, r1
 800492a:	e7eb      	b.n	8004904 <_malloc_r+0x64>
 800492c:	460c      	mov	r4, r1
 800492e:	6849      	ldr	r1, [r1, #4]
 8004930:	e7cc      	b.n	80048cc <_malloc_r+0x2c>
 8004932:	1cc4      	adds	r4, r0, #3
 8004934:	f024 0403 	bic.w	r4, r4, #3
 8004938:	42a0      	cmp	r0, r4
 800493a:	d005      	beq.n	8004948 <_malloc_r+0xa8>
 800493c:	1a21      	subs	r1, r4, r0
 800493e:	4630      	mov	r0, r6
 8004940:	f000 fae2 	bl	8004f08 <_sbrk_r>
 8004944:	3001      	adds	r0, #1
 8004946:	d0cf      	beq.n	80048e8 <_malloc_r+0x48>
 8004948:	6025      	str	r5, [r4, #0]
 800494a:	e7db      	b.n	8004904 <_malloc_r+0x64>
 800494c:	20001aa0 	.word	0x20001aa0
 8004950:	20001aa4 	.word	0x20001aa4

08004954 <__ssputs_r>:
 8004954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004958:	688e      	ldr	r6, [r1, #8]
 800495a:	4682      	mov	sl, r0
 800495c:	429e      	cmp	r6, r3
 800495e:	460c      	mov	r4, r1
 8004960:	4690      	mov	r8, r2
 8004962:	4699      	mov	r9, r3
 8004964:	d837      	bhi.n	80049d6 <__ssputs_r+0x82>
 8004966:	898a      	ldrh	r2, [r1, #12]
 8004968:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800496c:	d031      	beq.n	80049d2 <__ssputs_r+0x7e>
 800496e:	2302      	movs	r3, #2
 8004970:	6825      	ldr	r5, [r4, #0]
 8004972:	6909      	ldr	r1, [r1, #16]
 8004974:	1a6f      	subs	r7, r5, r1
 8004976:	6965      	ldr	r5, [r4, #20]
 8004978:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800497c:	fb95 f5f3 	sdiv	r5, r5, r3
 8004980:	f109 0301 	add.w	r3, r9, #1
 8004984:	443b      	add	r3, r7
 8004986:	429d      	cmp	r5, r3
 8004988:	bf38      	it	cc
 800498a:	461d      	movcc	r5, r3
 800498c:	0553      	lsls	r3, r2, #21
 800498e:	d530      	bpl.n	80049f2 <__ssputs_r+0x9e>
 8004990:	4629      	mov	r1, r5
 8004992:	f7ff ff85 	bl	80048a0 <_malloc_r>
 8004996:	4606      	mov	r6, r0
 8004998:	b950      	cbnz	r0, 80049b0 <__ssputs_r+0x5c>
 800499a:	230c      	movs	r3, #12
 800499c:	f04f 30ff 	mov.w	r0, #4294967295
 80049a0:	f8ca 3000 	str.w	r3, [sl]
 80049a4:	89a3      	ldrh	r3, [r4, #12]
 80049a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049aa:	81a3      	strh	r3, [r4, #12]
 80049ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049b0:	463a      	mov	r2, r7
 80049b2:	6921      	ldr	r1, [r4, #16]
 80049b4:	f7ff fef4 	bl	80047a0 <memcpy>
 80049b8:	89a3      	ldrh	r3, [r4, #12]
 80049ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80049be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049c2:	81a3      	strh	r3, [r4, #12]
 80049c4:	6126      	str	r6, [r4, #16]
 80049c6:	443e      	add	r6, r7
 80049c8:	6026      	str	r6, [r4, #0]
 80049ca:	464e      	mov	r6, r9
 80049cc:	6165      	str	r5, [r4, #20]
 80049ce:	1bed      	subs	r5, r5, r7
 80049d0:	60a5      	str	r5, [r4, #8]
 80049d2:	454e      	cmp	r6, r9
 80049d4:	d900      	bls.n	80049d8 <__ssputs_r+0x84>
 80049d6:	464e      	mov	r6, r9
 80049d8:	4632      	mov	r2, r6
 80049da:	4641      	mov	r1, r8
 80049dc:	6820      	ldr	r0, [r4, #0]
 80049de:	f000 fab1 	bl	8004f44 <memmove>
 80049e2:	68a3      	ldr	r3, [r4, #8]
 80049e4:	2000      	movs	r0, #0
 80049e6:	1b9b      	subs	r3, r3, r6
 80049e8:	60a3      	str	r3, [r4, #8]
 80049ea:	6823      	ldr	r3, [r4, #0]
 80049ec:	441e      	add	r6, r3
 80049ee:	6026      	str	r6, [r4, #0]
 80049f0:	e7dc      	b.n	80049ac <__ssputs_r+0x58>
 80049f2:	462a      	mov	r2, r5
 80049f4:	f000 fac1 	bl	8004f7a <_realloc_r>
 80049f8:	4606      	mov	r6, r0
 80049fa:	2800      	cmp	r0, #0
 80049fc:	d1e2      	bne.n	80049c4 <__ssputs_r+0x70>
 80049fe:	6921      	ldr	r1, [r4, #16]
 8004a00:	4650      	mov	r0, sl
 8004a02:	f7ff ff01 	bl	8004808 <_free_r>
 8004a06:	e7c8      	b.n	800499a <__ssputs_r+0x46>

08004a08 <_svfiprintf_r>:
 8004a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a0c:	461d      	mov	r5, r3
 8004a0e:	898b      	ldrh	r3, [r1, #12]
 8004a10:	b09d      	sub	sp, #116	; 0x74
 8004a12:	061f      	lsls	r7, r3, #24
 8004a14:	4680      	mov	r8, r0
 8004a16:	460c      	mov	r4, r1
 8004a18:	4616      	mov	r6, r2
 8004a1a:	d50f      	bpl.n	8004a3c <_svfiprintf_r+0x34>
 8004a1c:	690b      	ldr	r3, [r1, #16]
 8004a1e:	b96b      	cbnz	r3, 8004a3c <_svfiprintf_r+0x34>
 8004a20:	2140      	movs	r1, #64	; 0x40
 8004a22:	f7ff ff3d 	bl	80048a0 <_malloc_r>
 8004a26:	6020      	str	r0, [r4, #0]
 8004a28:	6120      	str	r0, [r4, #16]
 8004a2a:	b928      	cbnz	r0, 8004a38 <_svfiprintf_r+0x30>
 8004a2c:	230c      	movs	r3, #12
 8004a2e:	f8c8 3000 	str.w	r3, [r8]
 8004a32:	f04f 30ff 	mov.w	r0, #4294967295
 8004a36:	e0c8      	b.n	8004bca <_svfiprintf_r+0x1c2>
 8004a38:	2340      	movs	r3, #64	; 0x40
 8004a3a:	6163      	str	r3, [r4, #20]
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	9309      	str	r3, [sp, #36]	; 0x24
 8004a40:	2320      	movs	r3, #32
 8004a42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a46:	2330      	movs	r3, #48	; 0x30
 8004a48:	f04f 0b01 	mov.w	fp, #1
 8004a4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a50:	9503      	str	r5, [sp, #12]
 8004a52:	4637      	mov	r7, r6
 8004a54:	463d      	mov	r5, r7
 8004a56:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004a5a:	b10b      	cbz	r3, 8004a60 <_svfiprintf_r+0x58>
 8004a5c:	2b25      	cmp	r3, #37	; 0x25
 8004a5e:	d13e      	bne.n	8004ade <_svfiprintf_r+0xd6>
 8004a60:	ebb7 0a06 	subs.w	sl, r7, r6
 8004a64:	d00b      	beq.n	8004a7e <_svfiprintf_r+0x76>
 8004a66:	4653      	mov	r3, sl
 8004a68:	4632      	mov	r2, r6
 8004a6a:	4621      	mov	r1, r4
 8004a6c:	4640      	mov	r0, r8
 8004a6e:	f7ff ff71 	bl	8004954 <__ssputs_r>
 8004a72:	3001      	adds	r0, #1
 8004a74:	f000 80a4 	beq.w	8004bc0 <_svfiprintf_r+0x1b8>
 8004a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a7a:	4453      	add	r3, sl
 8004a7c:	9309      	str	r3, [sp, #36]	; 0x24
 8004a7e:	783b      	ldrb	r3, [r7, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f000 809d 	beq.w	8004bc0 <_svfiprintf_r+0x1b8>
 8004a86:	2300      	movs	r3, #0
 8004a88:	f04f 32ff 	mov.w	r2, #4294967295
 8004a8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a90:	9304      	str	r3, [sp, #16]
 8004a92:	9307      	str	r3, [sp, #28]
 8004a94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a98:	931a      	str	r3, [sp, #104]	; 0x68
 8004a9a:	462f      	mov	r7, r5
 8004a9c:	2205      	movs	r2, #5
 8004a9e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004aa2:	4850      	ldr	r0, [pc, #320]	; (8004be4 <_svfiprintf_r+0x1dc>)
 8004aa4:	f000 fa40 	bl	8004f28 <memchr>
 8004aa8:	9b04      	ldr	r3, [sp, #16]
 8004aaa:	b9d0      	cbnz	r0, 8004ae2 <_svfiprintf_r+0xda>
 8004aac:	06d9      	lsls	r1, r3, #27
 8004aae:	bf44      	itt	mi
 8004ab0:	2220      	movmi	r2, #32
 8004ab2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004ab6:	071a      	lsls	r2, r3, #28
 8004ab8:	bf44      	itt	mi
 8004aba:	222b      	movmi	r2, #43	; 0x2b
 8004abc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004ac0:	782a      	ldrb	r2, [r5, #0]
 8004ac2:	2a2a      	cmp	r2, #42	; 0x2a
 8004ac4:	d015      	beq.n	8004af2 <_svfiprintf_r+0xea>
 8004ac6:	462f      	mov	r7, r5
 8004ac8:	2000      	movs	r0, #0
 8004aca:	250a      	movs	r5, #10
 8004acc:	9a07      	ldr	r2, [sp, #28]
 8004ace:	4639      	mov	r1, r7
 8004ad0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ad4:	3b30      	subs	r3, #48	; 0x30
 8004ad6:	2b09      	cmp	r3, #9
 8004ad8:	d94d      	bls.n	8004b76 <_svfiprintf_r+0x16e>
 8004ada:	b1b8      	cbz	r0, 8004b0c <_svfiprintf_r+0x104>
 8004adc:	e00f      	b.n	8004afe <_svfiprintf_r+0xf6>
 8004ade:	462f      	mov	r7, r5
 8004ae0:	e7b8      	b.n	8004a54 <_svfiprintf_r+0x4c>
 8004ae2:	4a40      	ldr	r2, [pc, #256]	; (8004be4 <_svfiprintf_r+0x1dc>)
 8004ae4:	463d      	mov	r5, r7
 8004ae6:	1a80      	subs	r0, r0, r2
 8004ae8:	fa0b f000 	lsl.w	r0, fp, r0
 8004aec:	4318      	orrs	r0, r3
 8004aee:	9004      	str	r0, [sp, #16]
 8004af0:	e7d3      	b.n	8004a9a <_svfiprintf_r+0x92>
 8004af2:	9a03      	ldr	r2, [sp, #12]
 8004af4:	1d11      	adds	r1, r2, #4
 8004af6:	6812      	ldr	r2, [r2, #0]
 8004af8:	9103      	str	r1, [sp, #12]
 8004afa:	2a00      	cmp	r2, #0
 8004afc:	db01      	blt.n	8004b02 <_svfiprintf_r+0xfa>
 8004afe:	9207      	str	r2, [sp, #28]
 8004b00:	e004      	b.n	8004b0c <_svfiprintf_r+0x104>
 8004b02:	4252      	negs	r2, r2
 8004b04:	f043 0302 	orr.w	r3, r3, #2
 8004b08:	9207      	str	r2, [sp, #28]
 8004b0a:	9304      	str	r3, [sp, #16]
 8004b0c:	783b      	ldrb	r3, [r7, #0]
 8004b0e:	2b2e      	cmp	r3, #46	; 0x2e
 8004b10:	d10c      	bne.n	8004b2c <_svfiprintf_r+0x124>
 8004b12:	787b      	ldrb	r3, [r7, #1]
 8004b14:	2b2a      	cmp	r3, #42	; 0x2a
 8004b16:	d133      	bne.n	8004b80 <_svfiprintf_r+0x178>
 8004b18:	9b03      	ldr	r3, [sp, #12]
 8004b1a:	3702      	adds	r7, #2
 8004b1c:	1d1a      	adds	r2, r3, #4
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	9203      	str	r2, [sp, #12]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	bfb8      	it	lt
 8004b26:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b2a:	9305      	str	r3, [sp, #20]
 8004b2c:	4d2e      	ldr	r5, [pc, #184]	; (8004be8 <_svfiprintf_r+0x1e0>)
 8004b2e:	2203      	movs	r2, #3
 8004b30:	7839      	ldrb	r1, [r7, #0]
 8004b32:	4628      	mov	r0, r5
 8004b34:	f000 f9f8 	bl	8004f28 <memchr>
 8004b38:	b138      	cbz	r0, 8004b4a <_svfiprintf_r+0x142>
 8004b3a:	2340      	movs	r3, #64	; 0x40
 8004b3c:	1b40      	subs	r0, r0, r5
 8004b3e:	fa03 f000 	lsl.w	r0, r3, r0
 8004b42:	9b04      	ldr	r3, [sp, #16]
 8004b44:	3701      	adds	r7, #1
 8004b46:	4303      	orrs	r3, r0
 8004b48:	9304      	str	r3, [sp, #16]
 8004b4a:	7839      	ldrb	r1, [r7, #0]
 8004b4c:	2206      	movs	r2, #6
 8004b4e:	4827      	ldr	r0, [pc, #156]	; (8004bec <_svfiprintf_r+0x1e4>)
 8004b50:	1c7e      	adds	r6, r7, #1
 8004b52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b56:	f000 f9e7 	bl	8004f28 <memchr>
 8004b5a:	2800      	cmp	r0, #0
 8004b5c:	d038      	beq.n	8004bd0 <_svfiprintf_r+0x1c8>
 8004b5e:	4b24      	ldr	r3, [pc, #144]	; (8004bf0 <_svfiprintf_r+0x1e8>)
 8004b60:	bb13      	cbnz	r3, 8004ba8 <_svfiprintf_r+0x1a0>
 8004b62:	9b03      	ldr	r3, [sp, #12]
 8004b64:	3307      	adds	r3, #7
 8004b66:	f023 0307 	bic.w	r3, r3, #7
 8004b6a:	3308      	adds	r3, #8
 8004b6c:	9303      	str	r3, [sp, #12]
 8004b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b70:	444b      	add	r3, r9
 8004b72:	9309      	str	r3, [sp, #36]	; 0x24
 8004b74:	e76d      	b.n	8004a52 <_svfiprintf_r+0x4a>
 8004b76:	fb05 3202 	mla	r2, r5, r2, r3
 8004b7a:	2001      	movs	r0, #1
 8004b7c:	460f      	mov	r7, r1
 8004b7e:	e7a6      	b.n	8004ace <_svfiprintf_r+0xc6>
 8004b80:	2300      	movs	r3, #0
 8004b82:	250a      	movs	r5, #10
 8004b84:	4619      	mov	r1, r3
 8004b86:	3701      	adds	r7, #1
 8004b88:	9305      	str	r3, [sp, #20]
 8004b8a:	4638      	mov	r0, r7
 8004b8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b90:	3a30      	subs	r2, #48	; 0x30
 8004b92:	2a09      	cmp	r2, #9
 8004b94:	d903      	bls.n	8004b9e <_svfiprintf_r+0x196>
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d0c8      	beq.n	8004b2c <_svfiprintf_r+0x124>
 8004b9a:	9105      	str	r1, [sp, #20]
 8004b9c:	e7c6      	b.n	8004b2c <_svfiprintf_r+0x124>
 8004b9e:	fb05 2101 	mla	r1, r5, r1, r2
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	4607      	mov	r7, r0
 8004ba6:	e7f0      	b.n	8004b8a <_svfiprintf_r+0x182>
 8004ba8:	ab03      	add	r3, sp, #12
 8004baa:	9300      	str	r3, [sp, #0]
 8004bac:	4622      	mov	r2, r4
 8004bae:	4b11      	ldr	r3, [pc, #68]	; (8004bf4 <_svfiprintf_r+0x1ec>)
 8004bb0:	a904      	add	r1, sp, #16
 8004bb2:	4640      	mov	r0, r8
 8004bb4:	f3af 8000 	nop.w
 8004bb8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004bbc:	4681      	mov	r9, r0
 8004bbe:	d1d6      	bne.n	8004b6e <_svfiprintf_r+0x166>
 8004bc0:	89a3      	ldrh	r3, [r4, #12]
 8004bc2:	065b      	lsls	r3, r3, #25
 8004bc4:	f53f af35 	bmi.w	8004a32 <_svfiprintf_r+0x2a>
 8004bc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004bca:	b01d      	add	sp, #116	; 0x74
 8004bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bd0:	ab03      	add	r3, sp, #12
 8004bd2:	9300      	str	r3, [sp, #0]
 8004bd4:	4622      	mov	r2, r4
 8004bd6:	4b07      	ldr	r3, [pc, #28]	; (8004bf4 <_svfiprintf_r+0x1ec>)
 8004bd8:	a904      	add	r1, sp, #16
 8004bda:	4640      	mov	r0, r8
 8004bdc:	f000 f882 	bl	8004ce4 <_printf_i>
 8004be0:	e7ea      	b.n	8004bb8 <_svfiprintf_r+0x1b0>
 8004be2:	bf00      	nop
 8004be4:	0800524c 	.word	0x0800524c
 8004be8:	08005252 	.word	0x08005252
 8004bec:	08005256 	.word	0x08005256
 8004bf0:	00000000 	.word	0x00000000
 8004bf4:	08004955 	.word	0x08004955

08004bf8 <_printf_common>:
 8004bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bfc:	4691      	mov	r9, r2
 8004bfe:	461f      	mov	r7, r3
 8004c00:	688a      	ldr	r2, [r1, #8]
 8004c02:	690b      	ldr	r3, [r1, #16]
 8004c04:	4606      	mov	r6, r0
 8004c06:	4293      	cmp	r3, r2
 8004c08:	bfb8      	it	lt
 8004c0a:	4613      	movlt	r3, r2
 8004c0c:	f8c9 3000 	str.w	r3, [r9]
 8004c10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c14:	460c      	mov	r4, r1
 8004c16:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c1a:	b112      	cbz	r2, 8004c22 <_printf_common+0x2a>
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	f8c9 3000 	str.w	r3, [r9]
 8004c22:	6823      	ldr	r3, [r4, #0]
 8004c24:	0699      	lsls	r1, r3, #26
 8004c26:	bf42      	ittt	mi
 8004c28:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004c2c:	3302      	addmi	r3, #2
 8004c2e:	f8c9 3000 	strmi.w	r3, [r9]
 8004c32:	6825      	ldr	r5, [r4, #0]
 8004c34:	f015 0506 	ands.w	r5, r5, #6
 8004c38:	d107      	bne.n	8004c4a <_printf_common+0x52>
 8004c3a:	f104 0a19 	add.w	sl, r4, #25
 8004c3e:	68e3      	ldr	r3, [r4, #12]
 8004c40:	f8d9 2000 	ldr.w	r2, [r9]
 8004c44:	1a9b      	subs	r3, r3, r2
 8004c46:	42ab      	cmp	r3, r5
 8004c48:	dc29      	bgt.n	8004c9e <_printf_common+0xa6>
 8004c4a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004c4e:	6822      	ldr	r2, [r4, #0]
 8004c50:	3300      	adds	r3, #0
 8004c52:	bf18      	it	ne
 8004c54:	2301      	movne	r3, #1
 8004c56:	0692      	lsls	r2, r2, #26
 8004c58:	d42e      	bmi.n	8004cb8 <_printf_common+0xc0>
 8004c5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c5e:	4639      	mov	r1, r7
 8004c60:	4630      	mov	r0, r6
 8004c62:	47c0      	blx	r8
 8004c64:	3001      	adds	r0, #1
 8004c66:	d021      	beq.n	8004cac <_printf_common+0xb4>
 8004c68:	6823      	ldr	r3, [r4, #0]
 8004c6a:	68e5      	ldr	r5, [r4, #12]
 8004c6c:	f003 0306 	and.w	r3, r3, #6
 8004c70:	2b04      	cmp	r3, #4
 8004c72:	bf18      	it	ne
 8004c74:	2500      	movne	r5, #0
 8004c76:	f8d9 2000 	ldr.w	r2, [r9]
 8004c7a:	f04f 0900 	mov.w	r9, #0
 8004c7e:	bf08      	it	eq
 8004c80:	1aad      	subeq	r5, r5, r2
 8004c82:	68a3      	ldr	r3, [r4, #8]
 8004c84:	6922      	ldr	r2, [r4, #16]
 8004c86:	bf08      	it	eq
 8004c88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	bfc4      	itt	gt
 8004c90:	1a9b      	subgt	r3, r3, r2
 8004c92:	18ed      	addgt	r5, r5, r3
 8004c94:	341a      	adds	r4, #26
 8004c96:	454d      	cmp	r5, r9
 8004c98:	d11a      	bne.n	8004cd0 <_printf_common+0xd8>
 8004c9a:	2000      	movs	r0, #0
 8004c9c:	e008      	b.n	8004cb0 <_printf_common+0xb8>
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	4652      	mov	r2, sl
 8004ca2:	4639      	mov	r1, r7
 8004ca4:	4630      	mov	r0, r6
 8004ca6:	47c0      	blx	r8
 8004ca8:	3001      	adds	r0, #1
 8004caa:	d103      	bne.n	8004cb4 <_printf_common+0xbc>
 8004cac:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cb4:	3501      	adds	r5, #1
 8004cb6:	e7c2      	b.n	8004c3e <_printf_common+0x46>
 8004cb8:	2030      	movs	r0, #48	; 0x30
 8004cba:	18e1      	adds	r1, r4, r3
 8004cbc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004cc0:	1c5a      	adds	r2, r3, #1
 8004cc2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004cc6:	4422      	add	r2, r4
 8004cc8:	3302      	adds	r3, #2
 8004cca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004cce:	e7c4      	b.n	8004c5a <_printf_common+0x62>
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	4622      	mov	r2, r4
 8004cd4:	4639      	mov	r1, r7
 8004cd6:	4630      	mov	r0, r6
 8004cd8:	47c0      	blx	r8
 8004cda:	3001      	adds	r0, #1
 8004cdc:	d0e6      	beq.n	8004cac <_printf_common+0xb4>
 8004cde:	f109 0901 	add.w	r9, r9, #1
 8004ce2:	e7d8      	b.n	8004c96 <_printf_common+0x9e>

08004ce4 <_printf_i>:
 8004ce4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ce8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004cec:	460c      	mov	r4, r1
 8004cee:	7e09      	ldrb	r1, [r1, #24]
 8004cf0:	b085      	sub	sp, #20
 8004cf2:	296e      	cmp	r1, #110	; 0x6e
 8004cf4:	4617      	mov	r7, r2
 8004cf6:	4606      	mov	r6, r0
 8004cf8:	4698      	mov	r8, r3
 8004cfa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004cfc:	f000 80b3 	beq.w	8004e66 <_printf_i+0x182>
 8004d00:	d822      	bhi.n	8004d48 <_printf_i+0x64>
 8004d02:	2963      	cmp	r1, #99	; 0x63
 8004d04:	d036      	beq.n	8004d74 <_printf_i+0x90>
 8004d06:	d80a      	bhi.n	8004d1e <_printf_i+0x3a>
 8004d08:	2900      	cmp	r1, #0
 8004d0a:	f000 80b9 	beq.w	8004e80 <_printf_i+0x19c>
 8004d0e:	2958      	cmp	r1, #88	; 0x58
 8004d10:	f000 8083 	beq.w	8004e1a <_printf_i+0x136>
 8004d14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d18:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004d1c:	e032      	b.n	8004d84 <_printf_i+0xa0>
 8004d1e:	2964      	cmp	r1, #100	; 0x64
 8004d20:	d001      	beq.n	8004d26 <_printf_i+0x42>
 8004d22:	2969      	cmp	r1, #105	; 0x69
 8004d24:	d1f6      	bne.n	8004d14 <_printf_i+0x30>
 8004d26:	6820      	ldr	r0, [r4, #0]
 8004d28:	6813      	ldr	r3, [r2, #0]
 8004d2a:	0605      	lsls	r5, r0, #24
 8004d2c:	f103 0104 	add.w	r1, r3, #4
 8004d30:	d52a      	bpl.n	8004d88 <_printf_i+0xa4>
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6011      	str	r1, [r2, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	da03      	bge.n	8004d42 <_printf_i+0x5e>
 8004d3a:	222d      	movs	r2, #45	; 0x2d
 8004d3c:	425b      	negs	r3, r3
 8004d3e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004d42:	486f      	ldr	r0, [pc, #444]	; (8004f00 <_printf_i+0x21c>)
 8004d44:	220a      	movs	r2, #10
 8004d46:	e039      	b.n	8004dbc <_printf_i+0xd8>
 8004d48:	2973      	cmp	r1, #115	; 0x73
 8004d4a:	f000 809d 	beq.w	8004e88 <_printf_i+0x1a4>
 8004d4e:	d808      	bhi.n	8004d62 <_printf_i+0x7e>
 8004d50:	296f      	cmp	r1, #111	; 0x6f
 8004d52:	d020      	beq.n	8004d96 <_printf_i+0xb2>
 8004d54:	2970      	cmp	r1, #112	; 0x70
 8004d56:	d1dd      	bne.n	8004d14 <_printf_i+0x30>
 8004d58:	6823      	ldr	r3, [r4, #0]
 8004d5a:	f043 0320 	orr.w	r3, r3, #32
 8004d5e:	6023      	str	r3, [r4, #0]
 8004d60:	e003      	b.n	8004d6a <_printf_i+0x86>
 8004d62:	2975      	cmp	r1, #117	; 0x75
 8004d64:	d017      	beq.n	8004d96 <_printf_i+0xb2>
 8004d66:	2978      	cmp	r1, #120	; 0x78
 8004d68:	d1d4      	bne.n	8004d14 <_printf_i+0x30>
 8004d6a:	2378      	movs	r3, #120	; 0x78
 8004d6c:	4865      	ldr	r0, [pc, #404]	; (8004f04 <_printf_i+0x220>)
 8004d6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d72:	e055      	b.n	8004e20 <_printf_i+0x13c>
 8004d74:	6813      	ldr	r3, [r2, #0]
 8004d76:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d7a:	1d19      	adds	r1, r3, #4
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	6011      	str	r1, [r2, #0]
 8004d80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d84:	2301      	movs	r3, #1
 8004d86:	e08c      	b.n	8004ea2 <_printf_i+0x1be>
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004d8e:	6011      	str	r1, [r2, #0]
 8004d90:	bf18      	it	ne
 8004d92:	b21b      	sxthne	r3, r3
 8004d94:	e7cf      	b.n	8004d36 <_printf_i+0x52>
 8004d96:	6813      	ldr	r3, [r2, #0]
 8004d98:	6825      	ldr	r5, [r4, #0]
 8004d9a:	1d18      	adds	r0, r3, #4
 8004d9c:	6010      	str	r0, [r2, #0]
 8004d9e:	0628      	lsls	r0, r5, #24
 8004da0:	d501      	bpl.n	8004da6 <_printf_i+0xc2>
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	e002      	b.n	8004dac <_printf_i+0xc8>
 8004da6:	0668      	lsls	r0, r5, #25
 8004da8:	d5fb      	bpl.n	8004da2 <_printf_i+0xbe>
 8004daa:	881b      	ldrh	r3, [r3, #0]
 8004dac:	296f      	cmp	r1, #111	; 0x6f
 8004dae:	bf14      	ite	ne
 8004db0:	220a      	movne	r2, #10
 8004db2:	2208      	moveq	r2, #8
 8004db4:	4852      	ldr	r0, [pc, #328]	; (8004f00 <_printf_i+0x21c>)
 8004db6:	2100      	movs	r1, #0
 8004db8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004dbc:	6865      	ldr	r5, [r4, #4]
 8004dbe:	2d00      	cmp	r5, #0
 8004dc0:	60a5      	str	r5, [r4, #8]
 8004dc2:	f2c0 8095 	blt.w	8004ef0 <_printf_i+0x20c>
 8004dc6:	6821      	ldr	r1, [r4, #0]
 8004dc8:	f021 0104 	bic.w	r1, r1, #4
 8004dcc:	6021      	str	r1, [r4, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d13d      	bne.n	8004e4e <_printf_i+0x16a>
 8004dd2:	2d00      	cmp	r5, #0
 8004dd4:	f040 808e 	bne.w	8004ef4 <_printf_i+0x210>
 8004dd8:	4665      	mov	r5, ip
 8004dda:	2a08      	cmp	r2, #8
 8004ddc:	d10b      	bne.n	8004df6 <_printf_i+0x112>
 8004dde:	6823      	ldr	r3, [r4, #0]
 8004de0:	07db      	lsls	r3, r3, #31
 8004de2:	d508      	bpl.n	8004df6 <_printf_i+0x112>
 8004de4:	6923      	ldr	r3, [r4, #16]
 8004de6:	6862      	ldr	r2, [r4, #4]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	bfde      	ittt	le
 8004dec:	2330      	movle	r3, #48	; 0x30
 8004dee:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004df2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004df6:	ebac 0305 	sub.w	r3, ip, r5
 8004dfa:	6123      	str	r3, [r4, #16]
 8004dfc:	f8cd 8000 	str.w	r8, [sp]
 8004e00:	463b      	mov	r3, r7
 8004e02:	aa03      	add	r2, sp, #12
 8004e04:	4621      	mov	r1, r4
 8004e06:	4630      	mov	r0, r6
 8004e08:	f7ff fef6 	bl	8004bf8 <_printf_common>
 8004e0c:	3001      	adds	r0, #1
 8004e0e:	d14d      	bne.n	8004eac <_printf_i+0x1c8>
 8004e10:	f04f 30ff 	mov.w	r0, #4294967295
 8004e14:	b005      	add	sp, #20
 8004e16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e1a:	4839      	ldr	r0, [pc, #228]	; (8004f00 <_printf_i+0x21c>)
 8004e1c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004e20:	6813      	ldr	r3, [r2, #0]
 8004e22:	6821      	ldr	r1, [r4, #0]
 8004e24:	1d1d      	adds	r5, r3, #4
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6015      	str	r5, [r2, #0]
 8004e2a:	060a      	lsls	r2, r1, #24
 8004e2c:	d50b      	bpl.n	8004e46 <_printf_i+0x162>
 8004e2e:	07ca      	lsls	r2, r1, #31
 8004e30:	bf44      	itt	mi
 8004e32:	f041 0120 	orrmi.w	r1, r1, #32
 8004e36:	6021      	strmi	r1, [r4, #0]
 8004e38:	b91b      	cbnz	r3, 8004e42 <_printf_i+0x15e>
 8004e3a:	6822      	ldr	r2, [r4, #0]
 8004e3c:	f022 0220 	bic.w	r2, r2, #32
 8004e40:	6022      	str	r2, [r4, #0]
 8004e42:	2210      	movs	r2, #16
 8004e44:	e7b7      	b.n	8004db6 <_printf_i+0xd2>
 8004e46:	064d      	lsls	r5, r1, #25
 8004e48:	bf48      	it	mi
 8004e4a:	b29b      	uxthmi	r3, r3
 8004e4c:	e7ef      	b.n	8004e2e <_printf_i+0x14a>
 8004e4e:	4665      	mov	r5, ip
 8004e50:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e54:	fb02 3311 	mls	r3, r2, r1, r3
 8004e58:	5cc3      	ldrb	r3, [r0, r3]
 8004e5a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004e5e:	460b      	mov	r3, r1
 8004e60:	2900      	cmp	r1, #0
 8004e62:	d1f5      	bne.n	8004e50 <_printf_i+0x16c>
 8004e64:	e7b9      	b.n	8004dda <_printf_i+0xf6>
 8004e66:	6813      	ldr	r3, [r2, #0]
 8004e68:	6825      	ldr	r5, [r4, #0]
 8004e6a:	1d18      	adds	r0, r3, #4
 8004e6c:	6961      	ldr	r1, [r4, #20]
 8004e6e:	6010      	str	r0, [r2, #0]
 8004e70:	0628      	lsls	r0, r5, #24
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	d501      	bpl.n	8004e7a <_printf_i+0x196>
 8004e76:	6019      	str	r1, [r3, #0]
 8004e78:	e002      	b.n	8004e80 <_printf_i+0x19c>
 8004e7a:	066a      	lsls	r2, r5, #25
 8004e7c:	d5fb      	bpl.n	8004e76 <_printf_i+0x192>
 8004e7e:	8019      	strh	r1, [r3, #0]
 8004e80:	2300      	movs	r3, #0
 8004e82:	4665      	mov	r5, ip
 8004e84:	6123      	str	r3, [r4, #16]
 8004e86:	e7b9      	b.n	8004dfc <_printf_i+0x118>
 8004e88:	6813      	ldr	r3, [r2, #0]
 8004e8a:	1d19      	adds	r1, r3, #4
 8004e8c:	6011      	str	r1, [r2, #0]
 8004e8e:	681d      	ldr	r5, [r3, #0]
 8004e90:	6862      	ldr	r2, [r4, #4]
 8004e92:	2100      	movs	r1, #0
 8004e94:	4628      	mov	r0, r5
 8004e96:	f000 f847 	bl	8004f28 <memchr>
 8004e9a:	b108      	cbz	r0, 8004ea0 <_printf_i+0x1bc>
 8004e9c:	1b40      	subs	r0, r0, r5
 8004e9e:	6060      	str	r0, [r4, #4]
 8004ea0:	6863      	ldr	r3, [r4, #4]
 8004ea2:	6123      	str	r3, [r4, #16]
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004eaa:	e7a7      	b.n	8004dfc <_printf_i+0x118>
 8004eac:	6923      	ldr	r3, [r4, #16]
 8004eae:	462a      	mov	r2, r5
 8004eb0:	4639      	mov	r1, r7
 8004eb2:	4630      	mov	r0, r6
 8004eb4:	47c0      	blx	r8
 8004eb6:	3001      	adds	r0, #1
 8004eb8:	d0aa      	beq.n	8004e10 <_printf_i+0x12c>
 8004eba:	6823      	ldr	r3, [r4, #0]
 8004ebc:	079b      	lsls	r3, r3, #30
 8004ebe:	d413      	bmi.n	8004ee8 <_printf_i+0x204>
 8004ec0:	68e0      	ldr	r0, [r4, #12]
 8004ec2:	9b03      	ldr	r3, [sp, #12]
 8004ec4:	4298      	cmp	r0, r3
 8004ec6:	bfb8      	it	lt
 8004ec8:	4618      	movlt	r0, r3
 8004eca:	e7a3      	b.n	8004e14 <_printf_i+0x130>
 8004ecc:	2301      	movs	r3, #1
 8004ece:	464a      	mov	r2, r9
 8004ed0:	4639      	mov	r1, r7
 8004ed2:	4630      	mov	r0, r6
 8004ed4:	47c0      	blx	r8
 8004ed6:	3001      	adds	r0, #1
 8004ed8:	d09a      	beq.n	8004e10 <_printf_i+0x12c>
 8004eda:	3501      	adds	r5, #1
 8004edc:	68e3      	ldr	r3, [r4, #12]
 8004ede:	9a03      	ldr	r2, [sp, #12]
 8004ee0:	1a9b      	subs	r3, r3, r2
 8004ee2:	42ab      	cmp	r3, r5
 8004ee4:	dcf2      	bgt.n	8004ecc <_printf_i+0x1e8>
 8004ee6:	e7eb      	b.n	8004ec0 <_printf_i+0x1dc>
 8004ee8:	2500      	movs	r5, #0
 8004eea:	f104 0919 	add.w	r9, r4, #25
 8004eee:	e7f5      	b.n	8004edc <_printf_i+0x1f8>
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1ac      	bne.n	8004e4e <_printf_i+0x16a>
 8004ef4:	7803      	ldrb	r3, [r0, #0]
 8004ef6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004efa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004efe:	e76c      	b.n	8004dda <_printf_i+0xf6>
 8004f00:	0800525d 	.word	0x0800525d
 8004f04:	0800526e 	.word	0x0800526e

08004f08 <_sbrk_r>:
 8004f08:	b538      	push	{r3, r4, r5, lr}
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	4c05      	ldr	r4, [pc, #20]	; (8004f24 <_sbrk_r+0x1c>)
 8004f0e:	4605      	mov	r5, r0
 8004f10:	4608      	mov	r0, r1
 8004f12:	6023      	str	r3, [r4, #0]
 8004f14:	f7fb fdaa 	bl	8000a6c <_sbrk>
 8004f18:	1c43      	adds	r3, r0, #1
 8004f1a:	d102      	bne.n	8004f22 <_sbrk_r+0x1a>
 8004f1c:	6823      	ldr	r3, [r4, #0]
 8004f1e:	b103      	cbz	r3, 8004f22 <_sbrk_r+0x1a>
 8004f20:	602b      	str	r3, [r5, #0]
 8004f22:	bd38      	pop	{r3, r4, r5, pc}
 8004f24:	20001c04 	.word	0x20001c04

08004f28 <memchr>:
 8004f28:	b510      	push	{r4, lr}
 8004f2a:	b2c9      	uxtb	r1, r1
 8004f2c:	4402      	add	r2, r0
 8004f2e:	4290      	cmp	r0, r2
 8004f30:	4603      	mov	r3, r0
 8004f32:	d101      	bne.n	8004f38 <memchr+0x10>
 8004f34:	2300      	movs	r3, #0
 8004f36:	e003      	b.n	8004f40 <memchr+0x18>
 8004f38:	781c      	ldrb	r4, [r3, #0]
 8004f3a:	3001      	adds	r0, #1
 8004f3c:	428c      	cmp	r4, r1
 8004f3e:	d1f6      	bne.n	8004f2e <memchr+0x6>
 8004f40:	4618      	mov	r0, r3
 8004f42:	bd10      	pop	{r4, pc}

08004f44 <memmove>:
 8004f44:	4288      	cmp	r0, r1
 8004f46:	b510      	push	{r4, lr}
 8004f48:	eb01 0302 	add.w	r3, r1, r2
 8004f4c:	d807      	bhi.n	8004f5e <memmove+0x1a>
 8004f4e:	1e42      	subs	r2, r0, #1
 8004f50:	4299      	cmp	r1, r3
 8004f52:	d00a      	beq.n	8004f6a <memmove+0x26>
 8004f54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f58:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004f5c:	e7f8      	b.n	8004f50 <memmove+0xc>
 8004f5e:	4283      	cmp	r3, r0
 8004f60:	d9f5      	bls.n	8004f4e <memmove+0xa>
 8004f62:	1881      	adds	r1, r0, r2
 8004f64:	1ad2      	subs	r2, r2, r3
 8004f66:	42d3      	cmn	r3, r2
 8004f68:	d100      	bne.n	8004f6c <memmove+0x28>
 8004f6a:	bd10      	pop	{r4, pc}
 8004f6c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f70:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004f74:	e7f7      	b.n	8004f66 <memmove+0x22>

08004f76 <__malloc_lock>:
 8004f76:	4770      	bx	lr

08004f78 <__malloc_unlock>:
 8004f78:	4770      	bx	lr

08004f7a <_realloc_r>:
 8004f7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f7c:	4607      	mov	r7, r0
 8004f7e:	4614      	mov	r4, r2
 8004f80:	460e      	mov	r6, r1
 8004f82:	b921      	cbnz	r1, 8004f8e <_realloc_r+0x14>
 8004f84:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004f88:	4611      	mov	r1, r2
 8004f8a:	f7ff bc89 	b.w	80048a0 <_malloc_r>
 8004f8e:	b922      	cbnz	r2, 8004f9a <_realloc_r+0x20>
 8004f90:	f7ff fc3a 	bl	8004808 <_free_r>
 8004f94:	4625      	mov	r5, r4
 8004f96:	4628      	mov	r0, r5
 8004f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f9a:	f000 f814 	bl	8004fc6 <_malloc_usable_size_r>
 8004f9e:	42a0      	cmp	r0, r4
 8004fa0:	d20f      	bcs.n	8004fc2 <_realloc_r+0x48>
 8004fa2:	4621      	mov	r1, r4
 8004fa4:	4638      	mov	r0, r7
 8004fa6:	f7ff fc7b 	bl	80048a0 <_malloc_r>
 8004faa:	4605      	mov	r5, r0
 8004fac:	2800      	cmp	r0, #0
 8004fae:	d0f2      	beq.n	8004f96 <_realloc_r+0x1c>
 8004fb0:	4631      	mov	r1, r6
 8004fb2:	4622      	mov	r2, r4
 8004fb4:	f7ff fbf4 	bl	80047a0 <memcpy>
 8004fb8:	4631      	mov	r1, r6
 8004fba:	4638      	mov	r0, r7
 8004fbc:	f7ff fc24 	bl	8004808 <_free_r>
 8004fc0:	e7e9      	b.n	8004f96 <_realloc_r+0x1c>
 8004fc2:	4635      	mov	r5, r6
 8004fc4:	e7e7      	b.n	8004f96 <_realloc_r+0x1c>

08004fc6 <_malloc_usable_size_r>:
 8004fc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fca:	1f18      	subs	r0, r3, #4
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	bfbc      	itt	lt
 8004fd0:	580b      	ldrlt	r3, [r1, r0]
 8004fd2:	18c0      	addlt	r0, r0, r3
 8004fd4:	4770      	bx	lr
	...

08004fd8 <_init>:
 8004fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fda:	bf00      	nop
 8004fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fde:	bc08      	pop	{r3}
 8004fe0:	469e      	mov	lr, r3
 8004fe2:	4770      	bx	lr

08004fe4 <_fini>:
 8004fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fe6:	bf00      	nop
 8004fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fea:	bc08      	pop	{r3}
 8004fec:	469e      	mov	lr, r3
 8004fee:	4770      	bx	lr
