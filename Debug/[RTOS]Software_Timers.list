
[RTOS]Software_Timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049c4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  08004ad4  08004ad4  00014ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cf8  08004cf8  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08004cf8  08004cf8  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004cf8  08004cf8  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cf8  08004cf8  00014cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cfc  08004cfc  00014cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08004d00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001acc  20000018  08004d18  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ae4  08004d18  00021ae4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013296  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000278b  00000000  00000000  000332d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d50  00000000  00000000  00035a68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c38  00000000  00000000  000367b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003af9  00000000  00000000  000373f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d745  00000000  00000000  0003aee9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00074843  00000000  00000000  0004862e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bce71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003694  00000000  00000000  000bceec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000018 	.word	0x20000018
 800012c:	00000000 	.word	0x00000000
 8000130:	08004abc 	.word	0x08004abc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000001c 	.word	0x2000001c
 800014c:	08004abc 	.word	0x08004abc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000162:	b08f      	sub	sp, #60	; 0x3c
 8000164:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000166:	f000 fe1f 	bl	8000da8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800016a:	f000 f96b 	bl	8000444 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016e:	f000 f9d9 	bl	8000524 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000172:	f000 f9ad 	bl	80004d0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  offAllLed;
 8000176:	2201      	movs	r2, #1
 8000178:	2120      	movs	r1, #32
 800017a:	489a      	ldr	r0, [pc, #616]	; (80003e4 <main+0x284>)
 800017c:	f001 f8b4 	bl	80012e8 <HAL_GPIO_WritePin>
 8000180:	2201      	movs	r2, #1
 8000182:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000186:	4898      	ldr	r0, [pc, #608]	; (80003e8 <main+0x288>)
 8000188:	f001 f8ae 	bl	80012e8 <HAL_GPIO_WritePin>
 800018c:	2201      	movs	r2, #1
 800018e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000192:	4895      	ldr	r0, [pc, #596]	; (80003e8 <main+0x288>)
 8000194:	f001 f8a8 	bl	80012e8 <HAL_GPIO_WritePin>
 8000198:	2201      	movs	r2, #1
 800019a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800019e:	4891      	ldr	r0, [pc, #580]	; (80003e4 <main+0x284>)
 80001a0:	f001 f8a2 	bl	80012e8 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001a4:	f001 fef6 	bl	8001f94 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of PeriodicTimer1 */
  PeriodicTimer1Handle = xTimerCreate("PeriodicTimer1", TIMER_1_FREQ,
 80001a8:	4b90      	ldr	r3, [pc, #576]	; (80003ec <main+0x28c>)
 80001aa:	9300      	str	r3, [sp, #0]
 80001ac:	2300      	movs	r3, #0
 80001ae:	2201      	movs	r2, #1
 80001b0:	2132      	movs	r1, #50	; 0x32
 80001b2:	488f      	ldr	r0, [pc, #572]	; (80003f0 <main+0x290>)
 80001b4:	f003 fd0c 	bl	8003bd0 <xTimerCreate>
 80001b8:	4602      	mov	r2, r0
 80001ba:	4b8e      	ldr	r3, [pc, #568]	; (80003f4 <main+0x294>)
 80001bc:	601a      	str	r2, [r3, #0]
                                      pdTRUE, 0, timer1Callback);
  PeriodicTimer2Handle = xTimerCreate("PeriodicTimer2", TIMER_2_FREQ,
 80001be:	4b8e      	ldr	r3, [pc, #568]	; (80003f8 <main+0x298>)
 80001c0:	9300      	str	r3, [sp, #0]
 80001c2:	2300      	movs	r3, #0
 80001c4:	2201      	movs	r2, #1
 80001c6:	f240 114d 	movw	r1, #333	; 0x14d
 80001ca:	488c      	ldr	r0, [pc, #560]	; (80003fc <main+0x29c>)
 80001cc:	f003 fd00 	bl	8003bd0 <xTimerCreate>
 80001d0:	4602      	mov	r2, r0
 80001d2:	4b8b      	ldr	r3, [pc, #556]	; (8000400 <main+0x2a0>)
 80001d4:	601a      	str	r2, [r3, #0]
                                      pdTRUE, 0, timer2Callback);
  OneShotTimer3Handle = xTimerCreate("OneShotTimer3", ONESHOT_TIMER_3,
 80001d6:	4b8b      	ldr	r3, [pc, #556]	; (8000404 <main+0x2a4>)
 80001d8:	9300      	str	r3, [sp, #0]
 80001da:	2300      	movs	r3, #0
 80001dc:	2200      	movs	r2, #0
 80001de:	f640 5105 	movw	r1, #3333	; 0xd05
 80001e2:	4889      	ldr	r0, [pc, #548]	; (8000408 <main+0x2a8>)
 80001e4:	f003 fcf4 	bl	8003bd0 <xTimerCreate>
 80001e8:	4602      	mov	r2, r0
 80001ea:	4b88      	ldr	r3, [pc, #544]	; (800040c <main+0x2ac>)
 80001ec:	601a      	str	r2, [r3, #0]
                                     pdFALSE, 0, timer3Callback);
  vTimerSetTimerID(PeriodicTimer1Handle, (void *)TIMER_1_ID);
 80001ee:	4b81      	ldr	r3, [pc, #516]	; (80003f4 <main+0x294>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	2201      	movs	r2, #1
 80001f4:	4611      	mov	r1, r2
 80001f6:	4618      	mov	r0, r3
 80001f8:	f003 fffe 	bl	80041f8 <vTimerSetTimerID>
  vTimerSetTimerID(PeriodicTimer2Handle, (void *)TIMER_2_ID);
 80001fc:	4b80      	ldr	r3, [pc, #512]	; (8000400 <main+0x2a0>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	2202      	movs	r2, #2
 8000202:	4611      	mov	r1, r2
 8000204:	4618      	mov	r0, r3
 8000206:	f003 fff7 	bl	80041f8 <vTimerSetTimerID>
  vTimerSetTimerID(OneShotTimer3Handle, (void *)TIMER_3_ID);
 800020a:	4b80      	ldr	r3, [pc, #512]	; (800040c <main+0x2ac>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	2203      	movs	r2, #3
 8000210:	4611      	mov	r1, r2
 8000212:	4618      	mov	r0, r3
 8000214:	f003 fff0 	bl	80041f8 <vTimerSetTimerID>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  if ((PeriodicTimer1Handle == NULL) || (PeriodicTimer2Handle == NULL) || (OneShotTimer3Handle == NULL))
 8000218:	4b76      	ldr	r3, [pc, #472]	; (80003f4 <main+0x294>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d007      	beq.n	8000230 <main+0xd0>
 8000220:	4b77      	ldr	r3, [pc, #476]	; (8000400 <main+0x2a0>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	2b00      	cmp	r3, #0
 8000226:	d003      	beq.n	8000230 <main+0xd0>
 8000228:	4b78      	ldr	r3, [pc, #480]	; (800040c <main+0x2ac>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d117      	bne.n	8000260 <main+0x100>
  {
    error_count++;
 8000230:	4b77      	ldr	r3, [pc, #476]	; (8000410 <main+0x2b0>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	3301      	adds	r3, #1
 8000236:	4a76      	ldr	r2, [pc, #472]	; (8000410 <main+0x2b0>)
 8000238:	6013      	str	r3, [r2, #0]
    PRINTF("Failed to initialize software timers\r\n");
 800023a:	4e76      	ldr	r6, [pc, #472]	; (8000414 <main+0x2b4>)
 800023c:	4b76      	ldr	r3, [pc, #472]	; (8000418 <main+0x2b8>)
 800023e:	930c      	str	r3, [sp, #48]	; 0x30
 8000240:	466d      	mov	r5, sp
 8000242:	f106 0410 	add.w	r4, r6, #16
 8000246:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000248:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800024a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800024c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800024e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000252:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000256:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800025a:	f000 fc7b 	bl	8000b54 <vUARTSend>
 800025e:	e023      	b.n	80002a8 <main+0x148>
  }
  else
  {
    /* Start software timers */
    xTimerStart(PeriodicTimer1Handle, 0);
 8000260:	4b64      	ldr	r3, [pc, #400]	; (80003f4 <main+0x294>)
 8000262:	681c      	ldr	r4, [r3, #0]
 8000264:	f003 f85e 	bl	8003324 <xTaskGetTickCount>
 8000268:	4602      	mov	r2, r0
 800026a:	2300      	movs	r3, #0
 800026c:	9300      	str	r3, [sp, #0]
 800026e:	2300      	movs	r3, #0
 8000270:	2101      	movs	r1, #1
 8000272:	4620      	mov	r0, r4
 8000274:	f003 fcfe 	bl	8003c74 <xTimerGenericCommand>
    xTimerStart(PeriodicTimer2Handle, 0);
 8000278:	4b61      	ldr	r3, [pc, #388]	; (8000400 <main+0x2a0>)
 800027a:	681c      	ldr	r4, [r3, #0]
 800027c:	f003 f852 	bl	8003324 <xTaskGetTickCount>
 8000280:	4602      	mov	r2, r0
 8000282:	2300      	movs	r3, #0
 8000284:	9300      	str	r3, [sp, #0]
 8000286:	2300      	movs	r3, #0
 8000288:	2101      	movs	r1, #1
 800028a:	4620      	mov	r0, r4
 800028c:	f003 fcf2 	bl	8003c74 <xTimerGenericCommand>
    xTimerStart(OneShotTimer3Handle, 0);
 8000290:	4b5e      	ldr	r3, [pc, #376]	; (800040c <main+0x2ac>)
 8000292:	681c      	ldr	r4, [r3, #0]
 8000294:	f003 f846 	bl	8003324 <xTaskGetTickCount>
 8000298:	4602      	mov	r2, r0
 800029a:	2300      	movs	r3, #0
 800029c:	9300      	str	r3, [sp, #0]
 800029e:	2300      	movs	r3, #0
 80002a0:	2101      	movs	r1, #1
 80002a2:	4620      	mov	r0, r4
 80002a4:	f003 fce6 	bl	8003c74 <xTimerGenericCommand>
  }
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_THREADS */
  blinkLed1Handle = osThreadNew(blinkTask, NULL, &blinkLed1_attributes);
 80002a8:	4a5c      	ldr	r2, [pc, #368]	; (800041c <main+0x2bc>)
 80002aa:	2100      	movs	r1, #0
 80002ac:	485c      	ldr	r0, [pc, #368]	; (8000420 <main+0x2c0>)
 80002ae:	f001 fed7 	bl	8002060 <osThreadNew>
 80002b2:	4602      	mov	r2, r0
 80002b4:	4b5b      	ldr	r3, [pc, #364]	; (8000424 <main+0x2c4>)
 80002b6:	601a      	str	r2, [r3, #0]
  if (blinkLed1Handle == NULL)
 80002b8:	4b5a      	ldr	r3, [pc, #360]	; (8000424 <main+0x2c4>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d116      	bne.n	80002ee <main+0x18e>
  {
    PRINTF("Failed to create user tasks\r\n");
 80002c0:	4e54      	ldr	r6, [pc, #336]	; (8000414 <main+0x2b4>)
 80002c2:	4b59      	ldr	r3, [pc, #356]	; (8000428 <main+0x2c8>)
 80002c4:	930c      	str	r3, [sp, #48]	; 0x30
 80002c6:	466d      	mov	r5, sp
 80002c8:	f106 0410 	add.w	r4, r6, #16
 80002cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80002d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80002d4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80002d8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80002dc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80002e0:	f000 fc38 	bl	8000b54 <vUARTSend>
    error_count++;
 80002e4:	4b4a      	ldr	r3, [pc, #296]	; (8000410 <main+0x2b0>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	3301      	adds	r3, #1
 80002ea:	4a49      	ldr	r2, [pc, #292]	; (8000410 <main+0x2b0>)
 80002ec:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END RTOS_THREADS */

  if (error_count == 0)
 80002ee:	4b48      	ldr	r3, [pc, #288]	; (8000410 <main+0x2b0>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d163      	bne.n	80003be <main+0x25e>
  {
    PRINT_VAR(error_count);
 80002f6:	4e47      	ldr	r6, [pc, #284]	; (8000414 <main+0x2b4>)
 80002f8:	4b4c      	ldr	r3, [pc, #304]	; (800042c <main+0x2cc>)
 80002fa:	930c      	str	r3, [sp, #48]	; 0x30
 80002fc:	466d      	mov	r5, sp
 80002fe:	f106 0410 	add.w	r4, r6, #16
 8000302:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000304:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000306:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000308:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800030a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800030e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000312:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000316:	f000 fc1d 	bl	8000b54 <vUARTSend>
 800031a:	4e3e      	ldr	r6, [pc, #248]	; (8000414 <main+0x2b4>)
 800031c:	4b44      	ldr	r3, [pc, #272]	; (8000430 <main+0x2d0>)
 800031e:	930c      	str	r3, [sp, #48]	; 0x30
 8000320:	466d      	mov	r5, sp
 8000322:	f106 0410 	add.w	r4, r6, #16
 8000326:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000328:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800032a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800032c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800032e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000332:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000336:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800033a:	f000 fc0b 	bl	8000b54 <vUARTSend>
 800033e:	4b34      	ldr	r3, [pc, #208]	; (8000410 <main+0x2b0>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	220a      	movs	r2, #10
 8000344:	493b      	ldr	r1, [pc, #236]	; (8000434 <main+0x2d4>)
 8000346:	4618      	mov	r0, r3
 8000348:	f004 fb64 	bl	8004a14 <itoa>
 800034c:	4e31      	ldr	r6, [pc, #196]	; (8000414 <main+0x2b4>)
 800034e:	4b39      	ldr	r3, [pc, #228]	; (8000434 <main+0x2d4>)
 8000350:	930c      	str	r3, [sp, #48]	; 0x30
 8000352:	466d      	mov	r5, sp
 8000354:	f106 0410 	add.w	r4, r6, #16
 8000358:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800035a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800035c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800035e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000360:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000364:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000368:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800036c:	f000 fbf2 	bl	8000b54 <vUARTSend>
 8000370:	4e28      	ldr	r6, [pc, #160]	; (8000414 <main+0x2b4>)
 8000372:	4b31      	ldr	r3, [pc, #196]	; (8000438 <main+0x2d8>)
 8000374:	930c      	str	r3, [sp, #48]	; 0x30
 8000376:	466d      	mov	r5, sp
 8000378:	f106 0410 	add.w	r4, r6, #16
 800037c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800037e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000380:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000382:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000384:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000388:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800038c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000390:	f000 fbe0 	bl	8000b54 <vUARTSend>
    PRINTF("Start RTOS_Kernel\r\n");
 8000394:	4e1f      	ldr	r6, [pc, #124]	; (8000414 <main+0x2b4>)
 8000396:	4b29      	ldr	r3, [pc, #164]	; (800043c <main+0x2dc>)
 8000398:	930c      	str	r3, [sp, #48]	; 0x30
 800039a:	466d      	mov	r5, sp
 800039c:	f106 0410 	add.w	r4, r6, #16
 80003a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80003ac:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80003b0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80003b4:	f000 fbce 	bl	8000b54 <vUARTSend>
    osKernelStart();
 80003b8:	f001 fe1e 	bl	8001ff8 <osKernelStart>
 80003bc:	e011      	b.n	80003e2 <main+0x282>
  }
  else
  {
    PRINTF("Failed to start RTOS_Kernel\r\n");
 80003be:	4e15      	ldr	r6, [pc, #84]	; (8000414 <main+0x2b4>)
 80003c0:	4b1f      	ldr	r3, [pc, #124]	; (8000440 <main+0x2e0>)
 80003c2:	930c      	str	r3, [sp, #48]	; 0x30
 80003c4:	466d      	mov	r5, sp
 80003c6:	f106 0410 	add.w	r4, r6, #16
 80003ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003d2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80003d6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80003da:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80003de:	f000 fbb9 	bl	8000b54 <vUARTSend>
  /* Start scheduler */

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003e2:	e7fe      	b.n	80003e2 <main+0x282>
 80003e4:	40010c00 	.word	0x40010c00
 80003e8:	40010800 	.word	0x40010800
 80003ec:	08000609 	.word	0x08000609
 80003f0:	08004ae0 	.word	0x08004ae0
 80003f4:	20001a54 	.word	0x20001a54
 80003f8:	080007d1 	.word	0x080007d1
 80003fc:	08004af0 	.word	0x08004af0
 8000400:	20001a98 	.word	0x20001a98
 8000404:	08000a29 	.word	0x08000a29
 8000408:	08004b00 	.word	0x08004b00
 800040c:	20001a9c 	.word	0x20001a9c
 8000410:	20000034 	.word	0x20000034
 8000414:	20001a58 	.word	0x20001a58
 8000418:	08004b10 	.word	0x08004b10
 800041c:	08004c94 	.word	0x08004c94
 8000420:	080005e9 	.word	0x080005e9
 8000424:	20001a50 	.word	0x20001a50
 8000428:	08004b38 	.word	0x08004b38
 800042c:	08004b58 	.word	0x08004b58
 8000430:	08004b64 	.word	0x08004b64
 8000434:	20001a44 	.word	0x20001a44
 8000438:	08004b68 	.word	0x08004b68
 800043c:	08004b6c 	.word	0x08004b6c
 8000440:	08004b80 	.word	0x08004b80

08000444 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b090      	sub	sp, #64	; 0x40
 8000448:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800044a:	f107 0318 	add.w	r3, r7, #24
 800044e:	2228      	movs	r2, #40	; 0x28
 8000450:	2100      	movs	r1, #0
 8000452:	4618      	mov	r0, r3
 8000454:	f004 faeb 	bl	8004a2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000458:	1d3b      	adds	r3, r7, #4
 800045a:	2200      	movs	r2, #0
 800045c:	601a      	str	r2, [r3, #0]
 800045e:	605a      	str	r2, [r3, #4]
 8000460:	609a      	str	r2, [r3, #8]
 8000462:	60da      	str	r2, [r3, #12]
 8000464:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000466:	2301      	movs	r3, #1
 8000468:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800046a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800046e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000470:	2300      	movs	r3, #0
 8000472:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000474:	2301      	movs	r3, #1
 8000476:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000478:	2302      	movs	r3, #2
 800047a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800047c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000480:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000482:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000486:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000488:	f107 0318 	add.w	r3, r7, #24
 800048c:	4618      	mov	r0, r3
 800048e:	f000 ff5b 	bl	8001348 <HAL_RCC_OscConfig>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000498:	f000 fb56 	bl	8000b48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
     */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800049c:	230f      	movs	r3, #15
 800049e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004a0:	2302      	movs	r3, #2
 80004a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004a4:	2300      	movs	r3, #0
 80004a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004ae:	2300      	movs	r3, #0
 80004b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	2102      	movs	r1, #2
 80004b6:	4618      	mov	r0, r3
 80004b8:	f001 f9c6 	bl	8001848 <HAL_RCC_ClockConfig>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004c2:	f000 fb41 	bl	8000b48 <Error_Handler>
  }
}
 80004c6:	bf00      	nop
 80004c8:	3740      	adds	r7, #64	; 0x40
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
	...

080004d0 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004d4:	4b11      	ldr	r3, [pc, #68]	; (800051c <MX_USART2_UART_Init+0x4c>)
 80004d6:	4a12      	ldr	r2, [pc, #72]	; (8000520 <MX_USART2_UART_Init+0x50>)
 80004d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004da:	4b10      	ldr	r3, [pc, #64]	; (800051c <MX_USART2_UART_Init+0x4c>)
 80004dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004e2:	4b0e      	ldr	r3, [pc, #56]	; (800051c <MX_USART2_UART_Init+0x4c>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004e8:	4b0c      	ldr	r3, [pc, #48]	; (800051c <MX_USART2_UART_Init+0x4c>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004ee:	4b0b      	ldr	r3, [pc, #44]	; (800051c <MX_USART2_UART_Init+0x4c>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004f4:	4b09      	ldr	r3, [pc, #36]	; (800051c <MX_USART2_UART_Init+0x4c>)
 80004f6:	220c      	movs	r2, #12
 80004f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004fa:	4b08      	ldr	r3, [pc, #32]	; (800051c <MX_USART2_UART_Init+0x4c>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000500:	4b06      	ldr	r3, [pc, #24]	; (800051c <MX_USART2_UART_Init+0x4c>)
 8000502:	2200      	movs	r2, #0
 8000504:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000506:	4805      	ldr	r0, [pc, #20]	; (800051c <MX_USART2_UART_Init+0x4c>)
 8000508:	f001 fb3a 	bl	8001b80 <HAL_UART_Init>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000512:	f000 fb19 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	20001a58 	.word	0x20001a58
 8000520:	40004400 	.word	0x40004400

08000524 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b088      	sub	sp, #32
 8000528:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052a:	f107 0310 	add.w	r3, r7, #16
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	605a      	str	r2, [r3, #4]
 8000534:	609a      	str	r2, [r3, #8]
 8000536:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000538:	4b28      	ldr	r3, [pc, #160]	; (80005dc <MX_GPIO_Init+0xb8>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	4a27      	ldr	r2, [pc, #156]	; (80005dc <MX_GPIO_Init+0xb8>)
 800053e:	f043 0320 	orr.w	r3, r3, #32
 8000542:	6193      	str	r3, [r2, #24]
 8000544:	4b25      	ldr	r3, [pc, #148]	; (80005dc <MX_GPIO_Init+0xb8>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	f003 0320 	and.w	r3, r3, #32
 800054c:	60fb      	str	r3, [r7, #12]
 800054e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000550:	4b22      	ldr	r3, [pc, #136]	; (80005dc <MX_GPIO_Init+0xb8>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	4a21      	ldr	r2, [pc, #132]	; (80005dc <MX_GPIO_Init+0xb8>)
 8000556:	f043 0304 	orr.w	r3, r3, #4
 800055a:	6193      	str	r3, [r2, #24]
 800055c:	4b1f      	ldr	r3, [pc, #124]	; (80005dc <MX_GPIO_Init+0xb8>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	f003 0304 	and.w	r3, r3, #4
 8000564:	60bb      	str	r3, [r7, #8]
 8000566:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000568:	4b1c      	ldr	r3, [pc, #112]	; (80005dc <MX_GPIO_Init+0xb8>)
 800056a:	699b      	ldr	r3, [r3, #24]
 800056c:	4a1b      	ldr	r2, [pc, #108]	; (80005dc <MX_GPIO_Init+0xb8>)
 800056e:	f043 0308 	orr.w	r3, r3, #8
 8000572:	6193      	str	r3, [r2, #24]
 8000574:	4b19      	ldr	r3, [pc, #100]	; (80005dc <MX_GPIO_Init+0xb8>)
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	f003 0308 	and.w	r3, r3, #8
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12,
 8000580:	2200      	movs	r2, #0
 8000582:	f44f 51c1 	mov.w	r1, #6176	; 0x1820
 8000586:	4816      	ldr	r0, [pc, #88]	; (80005e0 <MX_GPIO_Init+0xbc>)
 8000588:	f000 feae 	bl	80012e8 <HAL_GPIO_WritePin>
                    GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800058c:	2200      	movs	r2, #0
 800058e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000592:	4814      	ldr	r0, [pc, #80]	; (80005e4 <MX_GPIO_Init+0xc0>)
 8000594:	f000 fea8 	bl	80012e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12;
 8000598:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 800059c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059e:	2301      	movs	r3, #1
 80005a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a2:	2300      	movs	r3, #0
 80005a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a6:	2302      	movs	r3, #2
 80005a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005aa:	f107 0310 	add.w	r3, r7, #16
 80005ae:	4619      	mov	r1, r3
 80005b0:	480b      	ldr	r0, [pc, #44]	; (80005e0 <MX_GPIO_Init+0xbc>)
 80005b2:	f000 fd3f 	bl	8001034 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80005b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005bc:	2301      	movs	r3, #1
 80005be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c4:	2302      	movs	r3, #2
 80005c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c8:	f107 0310 	add.w	r3, r7, #16
 80005cc:	4619      	mov	r1, r3
 80005ce:	4805      	ldr	r0, [pc, #20]	; (80005e4 <MX_GPIO_Init+0xc0>)
 80005d0:	f000 fd30 	bl	8001034 <HAL_GPIO_Init>
}
 80005d4:	bf00      	nop
 80005d6:	3720      	adds	r7, #32
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40021000 	.word	0x40021000
 80005e0:	40010800 	.word	0x40010800
 80005e4:	40010c00 	.word	0x40010c00

080005e8 <blinkTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_blinkTask */
void blinkTask(void *argument)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blinkTask */
  /* Infinite loop */
  for (;;)
  {
    toggleLed1;
 80005f0:	2120      	movs	r1, #32
 80005f2:	4804      	ldr	r0, [pc, #16]	; (8000604 <blinkTask+0x1c>)
 80005f4:	f000 fe90 	bl	8001318 <HAL_GPIO_TogglePin>
    osDelay(1000);
 80005f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005fc:	f001 fdda 	bl	80021b4 <osDelay>
    toggleLed1;
 8000600:	e7f6      	b.n	80005f0 <blinkTask+0x8>
 8000602:	bf00      	nop
 8000604:	40010c00 	.word	0x40010c00

08000608 <timer1Callback>:
  /* USER CODE END blinkTask */
}

/* timer1Callback function */
void timer1Callback(void *argument)
{
 8000608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800060a:	b093      	sub	sp, #76	; 0x4c
 800060c:	af0e      	add	r7, sp, #56	; 0x38
 800060e:	6078      	str	r0, [r7, #4]
  TickType_t tick_now;
  static uint32_t timer1_freq = TIMER_1_FREQ;
  /* Obtain current tick count */
  tick_now = xTaskGetTickCount();
 8000610:	f002 fe88 	bl	8003324 <xTaskGetTickCount>
 8000614:	60f8      	str	r0, [r7, #12]

  toggleLed4;
 8000616:	f44f 7180 	mov.w	r1, #256	; 0x100
 800061a:	4864      	ldr	r0, [pc, #400]	; (80007ac <timer1Callback+0x1a4>)
 800061c:	f000 fe7c 	bl	8001318 <HAL_GPIO_TogglePin>
  newline;
 8000620:	4e63      	ldr	r6, [pc, #396]	; (80007b0 <timer1Callback+0x1a8>)
 8000622:	4b64      	ldr	r3, [pc, #400]	; (80007b4 <timer1Callback+0x1ac>)
 8000624:	930c      	str	r3, [sp, #48]	; 0x30
 8000626:	466d      	mov	r5, sp
 8000628:	f106 0410 	add.w	r4, r6, #16
 800062c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800062e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000630:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000632:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000634:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000638:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800063c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000640:	f000 fa88 	bl	8000b54 <vUARTSend>
  PRINTF("Timer1 executes every ");
 8000644:	4e5a      	ldr	r6, [pc, #360]	; (80007b0 <timer1Callback+0x1a8>)
 8000646:	4b5c      	ldr	r3, [pc, #368]	; (80007b8 <timer1Callback+0x1b0>)
 8000648:	930c      	str	r3, [sp, #48]	; 0x30
 800064a:	466d      	mov	r5, sp
 800064c:	f106 0410 	add.w	r4, r6, #16
 8000650:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000652:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000654:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000656:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000658:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800065c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000660:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000664:	f000 fa76 	bl	8000b54 <vUARTSend>
  PRINT_VAR(timer1_freq);
 8000668:	4e51      	ldr	r6, [pc, #324]	; (80007b0 <timer1Callback+0x1a8>)
 800066a:	4b54      	ldr	r3, [pc, #336]	; (80007bc <timer1Callback+0x1b4>)
 800066c:	930c      	str	r3, [sp, #48]	; 0x30
 800066e:	466d      	mov	r5, sp
 8000670:	f106 0410 	add.w	r4, r6, #16
 8000674:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000676:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000678:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800067a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800067c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000680:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000684:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000688:	f000 fa64 	bl	8000b54 <vUARTSend>
 800068c:	4e48      	ldr	r6, [pc, #288]	; (80007b0 <timer1Callback+0x1a8>)
 800068e:	4b4c      	ldr	r3, [pc, #304]	; (80007c0 <timer1Callback+0x1b8>)
 8000690:	930c      	str	r3, [sp, #48]	; 0x30
 8000692:	466d      	mov	r5, sp
 8000694:	f106 0410 	add.w	r4, r6, #16
 8000698:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800069a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800069c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800069e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006a0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80006a4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80006a8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80006ac:	f000 fa52 	bl	8000b54 <vUARTSend>
 80006b0:	4b44      	ldr	r3, [pc, #272]	; (80007c4 <timer1Callback+0x1bc>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	220a      	movs	r2, #10
 80006b6:	4944      	ldr	r1, [pc, #272]	; (80007c8 <timer1Callback+0x1c0>)
 80006b8:	4618      	mov	r0, r3
 80006ba:	f004 f9ab 	bl	8004a14 <itoa>
 80006be:	4e3c      	ldr	r6, [pc, #240]	; (80007b0 <timer1Callback+0x1a8>)
 80006c0:	4b41      	ldr	r3, [pc, #260]	; (80007c8 <timer1Callback+0x1c0>)
 80006c2:	930c      	str	r3, [sp, #48]	; 0x30
 80006c4:	466d      	mov	r5, sp
 80006c6:	f106 0410 	add.w	r4, r6, #16
 80006ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006d2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80006d6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80006da:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80006de:	f000 fa39 	bl	8000b54 <vUARTSend>
 80006e2:	4e33      	ldr	r6, [pc, #204]	; (80007b0 <timer1Callback+0x1a8>)
 80006e4:	4b33      	ldr	r3, [pc, #204]	; (80007b4 <timer1Callback+0x1ac>)
 80006e6:	930c      	str	r3, [sp, #48]	; 0x30
 80006e8:	466d      	mov	r5, sp
 80006ea:	f106 0410 	add.w	r4, r6, #16
 80006ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006f6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80006fa:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80006fe:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000702:	f000 fa27 	bl	8000b54 <vUARTSend>
  PRINT_VAR(tick_now);
 8000706:	4e2a      	ldr	r6, [pc, #168]	; (80007b0 <timer1Callback+0x1a8>)
 8000708:	4b30      	ldr	r3, [pc, #192]	; (80007cc <timer1Callback+0x1c4>)
 800070a:	930c      	str	r3, [sp, #48]	; 0x30
 800070c:	466d      	mov	r5, sp
 800070e:	f106 0410 	add.w	r4, r6, #16
 8000712:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000714:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000716:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000718:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800071a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800071e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000722:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000726:	f000 fa15 	bl	8000b54 <vUARTSend>
 800072a:	4e21      	ldr	r6, [pc, #132]	; (80007b0 <timer1Callback+0x1a8>)
 800072c:	4b24      	ldr	r3, [pc, #144]	; (80007c0 <timer1Callback+0x1b8>)
 800072e:	930c      	str	r3, [sp, #48]	; 0x30
 8000730:	466d      	mov	r5, sp
 8000732:	f106 0410 	add.w	r4, r6, #16
 8000736:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000738:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800073a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800073c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800073e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000742:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000746:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800074a:	f000 fa03 	bl	8000b54 <vUARTSend>
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	220a      	movs	r2, #10
 8000752:	491d      	ldr	r1, [pc, #116]	; (80007c8 <timer1Callback+0x1c0>)
 8000754:	4618      	mov	r0, r3
 8000756:	f004 f95d 	bl	8004a14 <itoa>
 800075a:	4e15      	ldr	r6, [pc, #84]	; (80007b0 <timer1Callback+0x1a8>)
 800075c:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <timer1Callback+0x1c0>)
 800075e:	930c      	str	r3, [sp, #48]	; 0x30
 8000760:	466d      	mov	r5, sp
 8000762:	f106 0410 	add.w	r4, r6, #16
 8000766:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000768:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800076a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800076c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800076e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000772:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000776:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800077a:	f000 f9eb 	bl	8000b54 <vUARTSend>
 800077e:	4e0c      	ldr	r6, [pc, #48]	; (80007b0 <timer1Callback+0x1a8>)
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <timer1Callback+0x1ac>)
 8000782:	930c      	str	r3, [sp, #48]	; 0x30
 8000784:	466d      	mov	r5, sp
 8000786:	f106 0410 	add.w	r4, r6, #16
 800078a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800078c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800078e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000790:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000792:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000796:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800079a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800079e:	f000 f9d9 	bl	8000b54 <vUARTSend>
}
 80007a2:	bf00      	nop
 80007a4:	3714      	adds	r7, #20
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40010c00 	.word	0x40010c00
 80007b0:	20001a58 	.word	0x20001a58
 80007b4:	08004b68 	.word	0x08004b68
 80007b8:	08004ba0 	.word	0x08004ba0
 80007bc:	08004bb8 	.word	0x08004bb8
 80007c0:	08004b64 	.word	0x08004b64
 80007c4:	20000000 	.word	0x20000000
 80007c8:	20001a44 	.word	0x20001a44
 80007cc:	08004bc4 	.word	0x08004bc4

080007d0 <timer2Callback>:

/* timer2Callback function */
void timer2Callback(void *argument)
{
 80007d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007d2:	b093      	sub	sp, #76	; 0x4c
 80007d4:	af0e      	add	r7, sp, #56	; 0x38
 80007d6:	6078      	str	r0, [r7, #4]
  TickType_t tick_now;
  static uint32_t timer2_freq = TIMER_2_FREQ;
  /* Count number of time Timer2 has expired */
  static uint32_t timer2_expired_count = 0;

  tick_now = xTaskGetTickCount();
 80007d8:	f002 fda4 	bl	8003324 <xTaskGetTickCount>
 80007dc:	60f8      	str	r0, [r7, #12]

  toggleLed2;
 80007de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007e2:	4883      	ldr	r0, [pc, #524]	; (80009f0 <timer2Callback+0x220>)
 80007e4:	f000 fd98 	bl	8001318 <HAL_GPIO_TogglePin>
  newline;
 80007e8:	4e82      	ldr	r6, [pc, #520]	; (80009f4 <timer2Callback+0x224>)
 80007ea:	4b83      	ldr	r3, [pc, #524]	; (80009f8 <timer2Callback+0x228>)
 80007ec:	930c      	str	r3, [sp, #48]	; 0x30
 80007ee:	466d      	mov	r5, sp
 80007f0:	f106 0410 	add.w	r4, r6, #16
 80007f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000800:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000804:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000808:	f000 f9a4 	bl	8000b54 <vUARTSend>
  PRINTF("Timer2 execute every ");
 800080c:	4e79      	ldr	r6, [pc, #484]	; (80009f4 <timer2Callback+0x224>)
 800080e:	4b7b      	ldr	r3, [pc, #492]	; (80009fc <timer2Callback+0x22c>)
 8000810:	930c      	str	r3, [sp, #48]	; 0x30
 8000812:	466d      	mov	r5, sp
 8000814:	f106 0410 	add.w	r4, r6, #16
 8000818:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800081a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800081c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800081e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000820:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000824:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000828:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800082c:	f000 f992 	bl	8000b54 <vUARTSend>
  PRINT_VAR(timer2_freq);
 8000830:	4e70      	ldr	r6, [pc, #448]	; (80009f4 <timer2Callback+0x224>)
 8000832:	4b73      	ldr	r3, [pc, #460]	; (8000a00 <timer2Callback+0x230>)
 8000834:	930c      	str	r3, [sp, #48]	; 0x30
 8000836:	466d      	mov	r5, sp
 8000838:	f106 0410 	add.w	r4, r6, #16
 800083c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800083e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000840:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000842:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000844:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000848:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800084c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000850:	f000 f980 	bl	8000b54 <vUARTSend>
 8000854:	4e67      	ldr	r6, [pc, #412]	; (80009f4 <timer2Callback+0x224>)
 8000856:	4b6b      	ldr	r3, [pc, #428]	; (8000a04 <timer2Callback+0x234>)
 8000858:	930c      	str	r3, [sp, #48]	; 0x30
 800085a:	466d      	mov	r5, sp
 800085c:	f106 0410 	add.w	r4, r6, #16
 8000860:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000862:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000864:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000866:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000868:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800086c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000870:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000874:	f000 f96e 	bl	8000b54 <vUARTSend>
 8000878:	4b63      	ldr	r3, [pc, #396]	; (8000a08 <timer2Callback+0x238>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	220a      	movs	r2, #10
 800087e:	4963      	ldr	r1, [pc, #396]	; (8000a0c <timer2Callback+0x23c>)
 8000880:	4618      	mov	r0, r3
 8000882:	f004 f8c7 	bl	8004a14 <itoa>
 8000886:	4e5b      	ldr	r6, [pc, #364]	; (80009f4 <timer2Callback+0x224>)
 8000888:	4b60      	ldr	r3, [pc, #384]	; (8000a0c <timer2Callback+0x23c>)
 800088a:	930c      	str	r3, [sp, #48]	; 0x30
 800088c:	466d      	mov	r5, sp
 800088e:	f106 0410 	add.w	r4, r6, #16
 8000892:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000894:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000896:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000898:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800089a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800089e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80008a2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80008a6:	f000 f955 	bl	8000b54 <vUARTSend>
 80008aa:	4e52      	ldr	r6, [pc, #328]	; (80009f4 <timer2Callback+0x224>)
 80008ac:	4b52      	ldr	r3, [pc, #328]	; (80009f8 <timer2Callback+0x228>)
 80008ae:	930c      	str	r3, [sp, #48]	; 0x30
 80008b0:	466d      	mov	r5, sp
 80008b2:	f106 0410 	add.w	r4, r6, #16
 80008b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008be:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80008c2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80008c6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80008ca:	f000 f943 	bl	8000b54 <vUARTSend>
  PRINT_VAR(tick_now);
 80008ce:	4e49      	ldr	r6, [pc, #292]	; (80009f4 <timer2Callback+0x224>)
 80008d0:	4b4f      	ldr	r3, [pc, #316]	; (8000a10 <timer2Callback+0x240>)
 80008d2:	930c      	str	r3, [sp, #48]	; 0x30
 80008d4:	466d      	mov	r5, sp
 80008d6:	f106 0410 	add.w	r4, r6, #16
 80008da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008e2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80008e6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80008ea:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80008ee:	f000 f931 	bl	8000b54 <vUARTSend>
 80008f2:	4e40      	ldr	r6, [pc, #256]	; (80009f4 <timer2Callback+0x224>)
 80008f4:	4b43      	ldr	r3, [pc, #268]	; (8000a04 <timer2Callback+0x234>)
 80008f6:	930c      	str	r3, [sp, #48]	; 0x30
 80008f8:	466d      	mov	r5, sp
 80008fa:	f106 0410 	add.w	r4, r6, #16
 80008fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000900:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000902:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000904:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000906:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800090a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800090e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000912:	f000 f91f 	bl	8000b54 <vUARTSend>
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	220a      	movs	r2, #10
 800091a:	493c      	ldr	r1, [pc, #240]	; (8000a0c <timer2Callback+0x23c>)
 800091c:	4618      	mov	r0, r3
 800091e:	f004 f879 	bl	8004a14 <itoa>
 8000922:	4e34      	ldr	r6, [pc, #208]	; (80009f4 <timer2Callback+0x224>)
 8000924:	4b39      	ldr	r3, [pc, #228]	; (8000a0c <timer2Callback+0x23c>)
 8000926:	930c      	str	r3, [sp, #48]	; 0x30
 8000928:	466d      	mov	r5, sp
 800092a:	f106 0410 	add.w	r4, r6, #16
 800092e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000930:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000932:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000934:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000936:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800093a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800093e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000942:	f000 f907 	bl	8000b54 <vUARTSend>
 8000946:	4e2b      	ldr	r6, [pc, #172]	; (80009f4 <timer2Callback+0x224>)
 8000948:	4b2b      	ldr	r3, [pc, #172]	; (80009f8 <timer2Callback+0x228>)
 800094a:	930c      	str	r3, [sp, #48]	; 0x30
 800094c:	466d      	mov	r5, sp
 800094e:	f106 0410 	add.w	r4, r6, #16
 8000952:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000954:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000956:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000958:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800095a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800095e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000962:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000966:	f000 f8f5 	bl	8000b54 <vUARTSend>

  ++timer2_expired_count;
 800096a:	4b2a      	ldr	r3, [pc, #168]	; (8000a14 <timer2Callback+0x244>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	3301      	adds	r3, #1
 8000970:	4a28      	ldr	r2, [pc, #160]	; (8000a14 <timer2Callback+0x244>)
 8000972:	6013      	str	r3, [r2, #0]
  /* Modify timer 2 period every 5 times expires */
  if (timer2_expired_count % 5 == 0)
 8000974:	4b27      	ldr	r3, [pc, #156]	; (8000a14 <timer2Callback+0x244>)
 8000976:	6819      	ldr	r1, [r3, #0]
 8000978:	4b27      	ldr	r3, [pc, #156]	; (8000a18 <timer2Callback+0x248>)
 800097a:	fba3 2301 	umull	r2, r3, r3, r1
 800097e:	089a      	lsrs	r2, r3, #2
 8000980:	4613      	mov	r3, r2
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	4413      	add	r3, r2
 8000986:	1aca      	subs	r2, r1, r3
 8000988:	2a00      	cmp	r2, #0
 800098a:	d12c      	bne.n	80009e6 <timer2Callback+0x216>
  {
    PRINTF("Change timer 2 freq & Reset Timer 3\r\n");
 800098c:	4e19      	ldr	r6, [pc, #100]	; (80009f4 <timer2Callback+0x224>)
 800098e:	4b23      	ldr	r3, [pc, #140]	; (8000a1c <timer2Callback+0x24c>)
 8000990:	930c      	str	r3, [sp, #48]	; 0x30
 8000992:	466d      	mov	r5, sp
 8000994:	f106 0410 	add.w	r4, r6, #16
 8000998:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800099a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800099c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800099e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009a0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80009a4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80009a8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80009ac:	f000 f8d2 	bl	8000b54 <vUARTSend>
    timer2_freq += 50;
 80009b0:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <timer2Callback+0x238>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	3332      	adds	r3, #50	; 0x32
 80009b6:	4a14      	ldr	r2, [pc, #80]	; (8000a08 <timer2Callback+0x238>)
 80009b8:	6013      	str	r3, [r2, #0]
    /* Modify timer 2 period */
    xTimerChangePeriod(PeriodicTimer2Handle, timer2_freq, 0);
 80009ba:	4b19      	ldr	r3, [pc, #100]	; (8000a20 <timer2Callback+0x250>)
 80009bc:	6818      	ldr	r0, [r3, #0]
 80009be:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <timer2Callback+0x238>)
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	2300      	movs	r3, #0
 80009c4:	9300      	str	r3, [sp, #0]
 80009c6:	2300      	movs	r3, #0
 80009c8:	2104      	movs	r1, #4
 80009ca:	f003 f953 	bl	8003c74 <xTimerGenericCommand>
    xTimerReset(OneShotTimer3Handle, 0);
 80009ce:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <timer2Callback+0x254>)
 80009d0:	681c      	ldr	r4, [r3, #0]
 80009d2:	f002 fca7 	bl	8003324 <xTaskGetTickCount>
 80009d6:	4602      	mov	r2, r0
 80009d8:	2300      	movs	r3, #0
 80009da:	9300      	str	r3, [sp, #0]
 80009dc:	2300      	movs	r3, #0
 80009de:	2102      	movs	r1, #2
 80009e0:	4620      	mov	r0, r4
 80009e2:	f003 f947 	bl	8003c74 <xTimerGenericCommand>
    /* Print debug value */
  }
}
 80009e6:	bf00      	nop
 80009e8:	3714      	adds	r7, #20
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40010800 	.word	0x40010800
 80009f4:	20001a58 	.word	0x20001a58
 80009f8:	08004b68 	.word	0x08004b68
 80009fc:	08004bd0 	.word	0x08004bd0
 8000a00:	08004be8 	.word	0x08004be8
 8000a04:	08004b64 	.word	0x08004b64
 8000a08:	20000004 	.word	0x20000004
 8000a0c:	20001a44 	.word	0x20001a44
 8000a10:	08004bc4 	.word	0x08004bc4
 8000a14:	20000038 	.word	0x20000038
 8000a18:	cccccccd 	.word	0xcccccccd
 8000a1c:	08004bf4 	.word	0x08004bf4
 8000a20:	20001a98 	.word	0x20001a98
 8000a24:	20001a9c 	.word	0x20001a9c

08000a28 <timer3Callback>:
/* timer3Callback function */
void timer3Callback(void *argument)
{
 8000a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a2a:	b093      	sub	sp, #76	; 0x4c
 8000a2c:	af0e      	add	r7, sp, #56	; 0x38
 8000a2e:	6078      	str	r0, [r7, #4]
  TickType_t tick_now;
  tick_now = xTaskGetTickCount(); /* Get current tick count */
 8000a30:	f002 fc78 	bl	8003324 <xTaskGetTickCount>
 8000a34:	60f8      	str	r0, [r7, #12]

  toggleLed3;
 8000a36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a3a:	483c      	ldr	r0, [pc, #240]	; (8000b2c <timer3Callback+0x104>)
 8000a3c:	f000 fc6c 	bl	8001318 <HAL_GPIO_TogglePin>
  newline;
 8000a40:	4e3b      	ldr	r6, [pc, #236]	; (8000b30 <timer3Callback+0x108>)
 8000a42:	4b3c      	ldr	r3, [pc, #240]	; (8000b34 <timer3Callback+0x10c>)
 8000a44:	930c      	str	r3, [sp, #48]	; 0x30
 8000a46:	466d      	mov	r5, sp
 8000a48:	f106 0410 	add.w	r4, r6, #16
 8000a4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a54:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a58:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000a5c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000a60:	f000 f878 	bl	8000b54 <vUARTSend>
  PRINTF("Timer3 execute after first 3333ms\r\n");
 8000a64:	4e32      	ldr	r6, [pc, #200]	; (8000b30 <timer3Callback+0x108>)
 8000a66:	4b34      	ldr	r3, [pc, #208]	; (8000b38 <timer3Callback+0x110>)
 8000a68:	930c      	str	r3, [sp, #48]	; 0x30
 8000a6a:	466d      	mov	r5, sp
 8000a6c:	f106 0410 	add.w	r4, r6, #16
 8000a70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a78:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a7c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000a80:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000a84:	f000 f866 	bl	8000b54 <vUARTSend>
  PRINT_VAR(tick_now);
 8000a88:	4e29      	ldr	r6, [pc, #164]	; (8000b30 <timer3Callback+0x108>)
 8000a8a:	4b2c      	ldr	r3, [pc, #176]	; (8000b3c <timer3Callback+0x114>)
 8000a8c:	930c      	str	r3, [sp, #48]	; 0x30
 8000a8e:	466d      	mov	r5, sp
 8000a90:	f106 0410 	add.w	r4, r6, #16
 8000a94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a9c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000aa0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000aa4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000aa8:	f000 f854 	bl	8000b54 <vUARTSend>
 8000aac:	4e20      	ldr	r6, [pc, #128]	; (8000b30 <timer3Callback+0x108>)
 8000aae:	4b24      	ldr	r3, [pc, #144]	; (8000b40 <timer3Callback+0x118>)
 8000ab0:	930c      	str	r3, [sp, #48]	; 0x30
 8000ab2:	466d      	mov	r5, sp
 8000ab4:	f106 0410 	add.w	r4, r6, #16
 8000ab8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000aba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000abc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000abe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ac0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000ac4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000ac8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000acc:	f000 f842 	bl	8000b54 <vUARTSend>
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	220a      	movs	r2, #10
 8000ad4:	491b      	ldr	r1, [pc, #108]	; (8000b44 <timer3Callback+0x11c>)
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f003 ff9c 	bl	8004a14 <itoa>
 8000adc:	4e14      	ldr	r6, [pc, #80]	; (8000b30 <timer3Callback+0x108>)
 8000ade:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <timer3Callback+0x11c>)
 8000ae0:	930c      	str	r3, [sp, #48]	; 0x30
 8000ae2:	466d      	mov	r5, sp
 8000ae4:	f106 0410 	add.w	r4, r6, #16
 8000ae8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000aea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000aec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000aee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000af0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000af4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000af8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000afc:	f000 f82a 	bl	8000b54 <vUARTSend>
 8000b00:	4e0b      	ldr	r6, [pc, #44]	; (8000b30 <timer3Callback+0x108>)
 8000b02:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <timer3Callback+0x10c>)
 8000b04:	930c      	str	r3, [sp, #48]	; 0x30
 8000b06:	466d      	mov	r5, sp
 8000b08:	f106 0410 	add.w	r4, r6, #16
 8000b0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b14:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000b18:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000b1c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000b20:	f000 f818 	bl	8000b54 <vUARTSend>
}
 8000b24:	bf00      	nop
 8000b26:	3714      	adds	r7, #20
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b2c:	40010800 	.word	0x40010800
 8000b30:	20001a58 	.word	0x20001a58
 8000b34:	08004b68 	.word	0x08004b68
 8000b38:	08004c1c 	.word	0x08004c1c
 8000b3c:	08004bc4 	.word	0x08004bc4
 8000b40:	08004b64 	.word	0x08004b64
 8000b44:	20001a44 	.word	0x20001a44

08000b48 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr

08000b54 <vUARTSend>:
#include "myLib.h"

#if defined(configHAL_UART)
void vUARTSend(UART_HandleTypeDef huart, uint8_t *String)
{
 8000b54:	b084      	sub	sp, #16
 8000b56:	b580      	push	{r7, lr}
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	f107 0c08 	add.w	ip, r7, #8
 8000b5e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_UART_Transmit(&huart, (uint8_t *)String, strlen((char *)String), 100);
 8000b62:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000b64:	f7ff faf4 	bl	8000150 <strlen>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	b29a      	uxth	r2, r3
 8000b6c:	2364      	movs	r3, #100	; 0x64
 8000b6e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000b70:	f107 0008 	add.w	r0, r7, #8
 8000b74:	f001 f851 	bl	8001c1a <HAL_UART_Transmit>
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b80:	b004      	add	sp, #16
 8000b82:	4770      	bx	lr

08000b84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b8a:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <HAL_MspInit+0x5c>)
 8000b8c:	699b      	ldr	r3, [r3, #24]
 8000b8e:	4a14      	ldr	r2, [pc, #80]	; (8000be0 <HAL_MspInit+0x5c>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	6193      	str	r3, [r2, #24]
 8000b96:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <HAL_MspInit+0x5c>)
 8000b98:	699b      	ldr	r3, [r3, #24]
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba2:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <HAL_MspInit+0x5c>)
 8000ba4:	69db      	ldr	r3, [r3, #28]
 8000ba6:	4a0e      	ldr	r2, [pc, #56]	; (8000be0 <HAL_MspInit+0x5c>)
 8000ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bac:	61d3      	str	r3, [r2, #28]
 8000bae:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <HAL_MspInit+0x5c>)
 8000bb0:	69db      	ldr	r3, [r3, #28]
 8000bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bba:	4b0a      	ldr	r3, [pc, #40]	; (8000be4 <HAL_MspInit+0x60>)
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	4a04      	ldr	r2, [pc, #16]	; (8000be4 <HAL_MspInit+0x60>)
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	3714      	adds	r7, #20
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr
 8000be0:	40021000 	.word	0x40021000
 8000be4:	40010000 	.word	0x40010000

08000be8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b088      	sub	sp, #32
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 0310 	add.w	r3, r7, #16
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a1b      	ldr	r2, [pc, #108]	; (8000c70 <HAL_UART_MspInit+0x88>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d12f      	bne.n	8000c68 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c08:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <HAL_UART_MspInit+0x8c>)
 8000c0a:	69db      	ldr	r3, [r3, #28]
 8000c0c:	4a19      	ldr	r2, [pc, #100]	; (8000c74 <HAL_UART_MspInit+0x8c>)
 8000c0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c12:	61d3      	str	r3, [r2, #28]
 8000c14:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <HAL_UART_MspInit+0x8c>)
 8000c16:	69db      	ldr	r3, [r3, #28]
 8000c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <HAL_UART_MspInit+0x8c>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	4a13      	ldr	r2, [pc, #76]	; (8000c74 <HAL_UART_MspInit+0x8c>)
 8000c26:	f043 0304 	orr.w	r3, r3, #4
 8000c2a:	6193      	str	r3, [r2, #24]
 8000c2c:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <HAL_UART_MspInit+0x8c>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	f003 0304 	and.w	r3, r3, #4
 8000c34:	60bb      	str	r3, [r7, #8]
 8000c36:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c38:	2304      	movs	r3, #4
 8000c3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c40:	2303      	movs	r3, #3
 8000c42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c44:	f107 0310 	add.w	r3, r7, #16
 8000c48:	4619      	mov	r1, r3
 8000c4a:	480b      	ldr	r0, [pc, #44]	; (8000c78 <HAL_UART_MspInit+0x90>)
 8000c4c:	f000 f9f2 	bl	8001034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c50:	2308      	movs	r3, #8
 8000c52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5c:	f107 0310 	add.w	r3, r7, #16
 8000c60:	4619      	mov	r1, r3
 8000c62:	4805      	ldr	r0, [pc, #20]	; (8000c78 <HAL_UART_MspInit+0x90>)
 8000c64:	f000 f9e6 	bl	8001034 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c68:	bf00      	nop
 8000c6a:	3720      	adds	r7, #32
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40004400 	.word	0x40004400
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40010800 	.word	0x40010800

08000c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr

08000c88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c8a:	b08f      	sub	sp, #60	; 0x3c
 8000c8c:	af0e      	add	r7, sp, #56	; 0x38

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    PRINTF("[Hardfault_Handler]Program error !!!\r\n");
 8000c8e:	4e09      	ldr	r6, [pc, #36]	; (8000cb4 <HardFault_Handler+0x2c>)
 8000c90:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <HardFault_Handler+0x30>)
 8000c92:	930c      	str	r3, [sp, #48]	; 0x30
 8000c94:	466d      	mov	r5, sp
 8000c96:	f106 0410 	add.w	r4, r6, #16
 8000c9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ca0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ca2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000ca6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000caa:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000cae:	f7ff ff51 	bl	8000b54 <vUARTSend>
 8000cb2:	e7ec      	b.n	8000c8e <HardFault_Handler+0x6>
 8000cb4:	20001a58 	.word	0x20001a58
 8000cb8:	08004c40 	.word	0x08004c40

08000cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <MemManage_Handler+0x4>

08000cc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc6:	e7fe      	b.n	8000cc6 <BusFault_Handler+0x4>

08000cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <UsageFault_Handler+0x4>

08000cce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bc80      	pop	{r7}
 8000cd8:	4770      	bx	lr

08000cda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cde:	f000 f8a9 	bl	8000e34 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000ce2:	f002 fe4f 	bl	8003984 <xTaskGetSchedulerState>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d001      	beq.n	8000cf0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000cec:	f003 fc04 	bl	80044f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <SystemInit>:
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <SystemInit+0x5c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a14      	ldr	r2, [pc, #80]	; (8000d50 <SystemInit+0x5c>)
 8000cfe:	f043 0301 	orr.w	r3, r3, #1
 8000d02:	6013      	str	r3, [r2, #0]
 8000d04:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <SystemInit+0x5c>)
 8000d06:	685a      	ldr	r2, [r3, #4]
 8000d08:	4911      	ldr	r1, [pc, #68]	; (8000d50 <SystemInit+0x5c>)
 8000d0a:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <SystemInit+0x60>)
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	604b      	str	r3, [r1, #4]
 8000d10:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <SystemInit+0x5c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a0e      	ldr	r2, [pc, #56]	; (8000d50 <SystemInit+0x5c>)
 8000d16:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000d1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d1e:	6013      	str	r3, [r2, #0]
 8000d20:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <SystemInit+0x5c>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <SystemInit+0x5c>)
 8000d26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d2a:	6013      	str	r3, [r2, #0]
 8000d2c:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <SystemInit+0x5c>)
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	4a07      	ldr	r2, [pc, #28]	; (8000d50 <SystemInit+0x5c>)
 8000d32:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000d36:	6053      	str	r3, [r2, #4]
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <SystemInit+0x5c>)
 8000d3a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <SystemInit+0x64>)
 8000d42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr
 8000d50:	40021000 	.word	0x40021000
 8000d54:	f8ff0000 	.word	0xf8ff0000
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <Reset_Handler>:
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	e003      	b.n	8000d68 <LoopCopyDataInit>

08000d60 <CopyDataInit>:
 8000d60:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <LoopFillZerobss+0x14>)
 8000d62:	585b      	ldr	r3, [r3, r1]
 8000d64:	5043      	str	r3, [r0, r1]
 8000d66:	3104      	adds	r1, #4

08000d68 <LoopCopyDataInit>:
 8000d68:	480a      	ldr	r0, [pc, #40]	; (8000d94 <LoopFillZerobss+0x18>)
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <LoopFillZerobss+0x1c>)
 8000d6c:	1842      	adds	r2, r0, r1
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d3f6      	bcc.n	8000d60 <CopyDataInit>
 8000d72:	4a0a      	ldr	r2, [pc, #40]	; (8000d9c <LoopFillZerobss+0x20>)
 8000d74:	e002      	b.n	8000d7c <LoopFillZerobss>

08000d76 <FillZerobss>:
 8000d76:	2300      	movs	r3, #0
 8000d78:	f842 3b04 	str.w	r3, [r2], #4

08000d7c <LoopFillZerobss>:
 8000d7c:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <LoopFillZerobss+0x24>)
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d3f9      	bcc.n	8000d76 <FillZerobss>
 8000d82:	f7ff ffb7 	bl	8000cf4 <SystemInit>
 8000d86:	f003 fe09 	bl	800499c <__libc_init_array>
 8000d8a:	f7ff f9e9 	bl	8000160 <main>
 8000d8e:	4770      	bx	lr
 8000d90:	08004d00 	.word	0x08004d00
 8000d94:	20000000 	.word	0x20000000
 8000d98:	20000018 	.word	0x20000018
 8000d9c:	20000018 	.word	0x20000018
 8000da0:	20001ae4 	.word	0x20001ae4

08000da4 <ADC1_2_IRQHandler>:
 8000da4:	e7fe      	b.n	8000da4 <ADC1_2_IRQHandler>
	...

08000da8 <HAL_Init>:
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <HAL_Init+0x28>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a07      	ldr	r2, [pc, #28]	; (8000dd0 <HAL_Init+0x28>)
 8000db2:	f043 0310 	orr.w	r3, r3, #16
 8000db6:	6013      	str	r3, [r2, #0]
 8000db8:	2003      	movs	r0, #3
 8000dba:	f000 f907 	bl	8000fcc <HAL_NVIC_SetPriorityGrouping>
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f000 f808 	bl	8000dd4 <HAL_InitTick>
 8000dc4:	f7ff fede 	bl	8000b84 <HAL_MspInit>
 8000dc8:	2300      	movs	r3, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40022000 	.word	0x40022000

08000dd4 <HAL_InitTick>:
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <HAL_InitTick+0x54>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <HAL_InitTick+0x58>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	4619      	mov	r1, r3
 8000de6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 f911 	bl	800101a <HAL_SYSTICK_Config>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <HAL_InitTick+0x2e>
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e00e      	b.n	8000e20 <HAL_InitTick+0x4c>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2b0f      	cmp	r3, #15
 8000e06:	d80a      	bhi.n	8000e1e <HAL_InitTick+0x4a>
 8000e08:	2200      	movs	r2, #0
 8000e0a:	6879      	ldr	r1, [r7, #4]
 8000e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e10:	f000 f8e7 	bl	8000fe2 <HAL_NVIC_SetPriority>
 8000e14:	4a06      	ldr	r2, [pc, #24]	; (8000e30 <HAL_InitTick+0x5c>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6013      	str	r3, [r2, #0]
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e000      	b.n	8000e20 <HAL_InitTick+0x4c>
 8000e1e:	2301      	movs	r3, #1
 8000e20:	4618      	mov	r0, r3
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000008 	.word	0x20000008
 8000e2c:	20000010 	.word	0x20000010
 8000e30:	2000000c 	.word	0x2000000c

08000e34 <HAL_IncTick>:
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <HAL_IncTick+0x1c>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <HAL_IncTick+0x20>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4413      	add	r3, r2
 8000e44:	4a03      	ldr	r2, [pc, #12]	; (8000e54 <HAL_IncTick+0x20>)
 8000e46:	6013      	str	r3, [r2, #0]
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr
 8000e50:	20000010 	.word	0x20000010
 8000e54:	20001aa0 	.word	0x20001aa0

08000e58 <HAL_GetTick>:
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	4b02      	ldr	r3, [pc, #8]	; (8000e68 <HAL_GetTick+0x10>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4618      	mov	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr
 8000e68:	20001aa0 	.word	0x20001aa0

08000e6c <__NVIC_SetPriorityGrouping>:
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	68ba      	ldr	r2, [r7, #8]
 8000e84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e88:	4013      	ands	r3, r2
 8000e8a:	60bb      	str	r3, [r7, #8]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	021a      	lsls	r2, r3, #8
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	60d3      	str	r3, [r2, #12]
 8000ea4:	bf00      	nop
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bc80      	pop	{r7}
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <__NVIC_GetPriorityGrouping>:
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <__NVIC_GetPriorityGrouping+0x18>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	0a1b      	lsrs	r3, r3, #8
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <__NVIC_SetPriority>:
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	6039      	str	r1, [r7, #0]
 8000eda:	71fb      	strb	r3, [r7, #7]
 8000edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	db0a      	blt.n	8000efa <__NVIC_SetPriority+0x2a>
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	490c      	ldr	r1, [pc, #48]	; (8000f1c <__NVIC_SetPriority+0x4c>)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	0112      	lsls	r2, r2, #4
 8000ef0:	b2d2      	uxtb	r2, r2
 8000ef2:	440b      	add	r3, r1
 8000ef4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8000ef8:	e00a      	b.n	8000f10 <__NVIC_SetPriority+0x40>
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	4908      	ldr	r1, [pc, #32]	; (8000f20 <__NVIC_SetPriority+0x50>)
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	f003 030f 	and.w	r3, r3, #15
 8000f06:	3b04      	subs	r3, #4
 8000f08:	0112      	lsls	r2, r2, #4
 8000f0a:	b2d2      	uxtb	r2, r2
 8000f0c:	440b      	add	r3, r1
 8000f0e:	761a      	strb	r2, [r3, #24]
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bc80      	pop	{r7}
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000e100 	.word	0xe000e100
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <NVIC_EncodePriority>:
 8000f24:	b480      	push	{r7}
 8000f26:	b089      	sub	sp, #36	; 0x24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	61fb      	str	r3, [r7, #28]
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	f1c3 0307 	rsb	r3, r3, #7
 8000f3e:	2b04      	cmp	r3, #4
 8000f40:	bf28      	it	cs
 8000f42:	2304      	movcs	r3, #4
 8000f44:	61bb      	str	r3, [r7, #24]
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3304      	adds	r3, #4
 8000f4a:	2b06      	cmp	r3, #6
 8000f4c:	d902      	bls.n	8000f54 <NVIC_EncodePriority+0x30>
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3b03      	subs	r3, #3
 8000f52:	e000      	b.n	8000f56 <NVIC_EncodePriority+0x32>
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	f04f 32ff 	mov.w	r2, #4294967295
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43da      	mvns	r2, r3
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	401a      	ands	r2, r3
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	409a      	lsls	r2, r3
 8000f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	fa01 f303 	lsl.w	r3, r1, r3
 8000f76:	43d9      	mvns	r1, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	400b      	ands	r3, r1
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3724      	adds	r7, #36	; 0x24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr

08000f88 <SysTick_Config>:
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3b01      	subs	r3, #1
 8000f94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f98:	d301      	bcc.n	8000f9e <SysTick_Config+0x16>
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e00f      	b.n	8000fbe <SysTick_Config+0x36>
 8000f9e:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <SysTick_Config+0x40>)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	6053      	str	r3, [r2, #4]
 8000fa6:	210f      	movs	r1, #15
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	f7ff ff90 	bl	8000ed0 <__NVIC_SetPriority>
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <SysTick_Config+0x40>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
 8000fb6:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <SysTick_Config+0x40>)
 8000fb8:	2207      	movs	r2, #7
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	e000e010 	.word	0xe000e010

08000fcc <HAL_NVIC_SetPriorityGrouping>:
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f7ff ff49 	bl	8000e6c <__NVIC_SetPriorityGrouping>
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <HAL_NVIC_SetPriority>:
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b086      	sub	sp, #24
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	4603      	mov	r3, r0
 8000fea:	60b9      	str	r1, [r7, #8]
 8000fec:	607a      	str	r2, [r7, #4]
 8000fee:	73fb      	strb	r3, [r7, #15]
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
 8000ff4:	f7ff ff5e 	bl	8000eb4 <__NVIC_GetPriorityGrouping>
 8000ff8:	6178      	str	r0, [r7, #20]
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	68b9      	ldr	r1, [r7, #8]
 8000ffe:	6978      	ldr	r0, [r7, #20]
 8001000:	f7ff ff90 	bl	8000f24 <NVIC_EncodePriority>
 8001004:	4602      	mov	r2, r0
 8001006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800100a:	4611      	mov	r1, r2
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff ff5f 	bl	8000ed0 <__NVIC_SetPriority>
 8001012:	bf00      	nop
 8001014:	3718      	adds	r7, #24
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_SYSTICK_Config>:
 800101a:	b580      	push	{r7, lr}
 800101c:	b082      	sub	sp, #8
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff ffb0 	bl	8000f88 <SysTick_Config>
 8001028:	4603      	mov	r3, r0
 800102a:	4618      	mov	r0, r3
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <HAL_GPIO_Init>:
 8001034:	b480      	push	{r7}
 8001036:	b08b      	sub	sp, #44	; 0x2c
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
 800103e:	2300      	movs	r3, #0
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
 8001042:	2300      	movs	r3, #0
 8001044:	623b      	str	r3, [r7, #32]
 8001046:	e127      	b.n	8001298 <HAL_GPIO_Init+0x264>
 8001048:	2201      	movs	r2, #1
 800104a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	61fb      	str	r3, [r7, #28]
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	69fa      	ldr	r2, [r7, #28]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	429a      	cmp	r2, r3
 8001062:	f040 8116 	bne.w	8001292 <HAL_GPIO_Init+0x25e>
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	2b12      	cmp	r3, #18
 800106c:	d034      	beq.n	80010d8 <HAL_GPIO_Init+0xa4>
 800106e:	2b12      	cmp	r3, #18
 8001070:	d80d      	bhi.n	800108e <HAL_GPIO_Init+0x5a>
 8001072:	2b02      	cmp	r3, #2
 8001074:	d02b      	beq.n	80010ce <HAL_GPIO_Init+0x9a>
 8001076:	2b02      	cmp	r3, #2
 8001078:	d804      	bhi.n	8001084 <HAL_GPIO_Init+0x50>
 800107a:	2b00      	cmp	r3, #0
 800107c:	d031      	beq.n	80010e2 <HAL_GPIO_Init+0xae>
 800107e:	2b01      	cmp	r3, #1
 8001080:	d01c      	beq.n	80010bc <HAL_GPIO_Init+0x88>
 8001082:	e048      	b.n	8001116 <HAL_GPIO_Init+0xe2>
 8001084:	2b03      	cmp	r3, #3
 8001086:	d043      	beq.n	8001110 <HAL_GPIO_Init+0xdc>
 8001088:	2b11      	cmp	r3, #17
 800108a:	d01b      	beq.n	80010c4 <HAL_GPIO_Init+0x90>
 800108c:	e043      	b.n	8001116 <HAL_GPIO_Init+0xe2>
 800108e:	4a89      	ldr	r2, [pc, #548]	; (80012b4 <HAL_GPIO_Init+0x280>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d026      	beq.n	80010e2 <HAL_GPIO_Init+0xae>
 8001094:	4a87      	ldr	r2, [pc, #540]	; (80012b4 <HAL_GPIO_Init+0x280>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d806      	bhi.n	80010a8 <HAL_GPIO_Init+0x74>
 800109a:	4a87      	ldr	r2, [pc, #540]	; (80012b8 <HAL_GPIO_Init+0x284>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d020      	beq.n	80010e2 <HAL_GPIO_Init+0xae>
 80010a0:	4a86      	ldr	r2, [pc, #536]	; (80012bc <HAL_GPIO_Init+0x288>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d01d      	beq.n	80010e2 <HAL_GPIO_Init+0xae>
 80010a6:	e036      	b.n	8001116 <HAL_GPIO_Init+0xe2>
 80010a8:	4a85      	ldr	r2, [pc, #532]	; (80012c0 <HAL_GPIO_Init+0x28c>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d019      	beq.n	80010e2 <HAL_GPIO_Init+0xae>
 80010ae:	4a85      	ldr	r2, [pc, #532]	; (80012c4 <HAL_GPIO_Init+0x290>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d016      	beq.n	80010e2 <HAL_GPIO_Init+0xae>
 80010b4:	4a84      	ldr	r2, [pc, #528]	; (80012c8 <HAL_GPIO_Init+0x294>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d013      	beq.n	80010e2 <HAL_GPIO_Init+0xae>
 80010ba:	e02c      	b.n	8001116 <HAL_GPIO_Init+0xe2>
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	623b      	str	r3, [r7, #32]
 80010c2:	e028      	b.n	8001116 <HAL_GPIO_Init+0xe2>
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	3304      	adds	r3, #4
 80010ca:	623b      	str	r3, [r7, #32]
 80010cc:	e023      	b.n	8001116 <HAL_GPIO_Init+0xe2>
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	3308      	adds	r3, #8
 80010d4:	623b      	str	r3, [r7, #32]
 80010d6:	e01e      	b.n	8001116 <HAL_GPIO_Init+0xe2>
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	330c      	adds	r3, #12
 80010de:	623b      	str	r3, [r7, #32]
 80010e0:	e019      	b.n	8001116 <HAL_GPIO_Init+0xe2>
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d102      	bne.n	80010f0 <HAL_GPIO_Init+0xbc>
 80010ea:	2304      	movs	r3, #4
 80010ec:	623b      	str	r3, [r7, #32]
 80010ee:	e012      	b.n	8001116 <HAL_GPIO_Init+0xe2>
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d105      	bne.n	8001104 <HAL_GPIO_Init+0xd0>
 80010f8:	2308      	movs	r3, #8
 80010fa:	623b      	str	r3, [r7, #32]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	69fa      	ldr	r2, [r7, #28]
 8001100:	611a      	str	r2, [r3, #16]
 8001102:	e008      	b.n	8001116 <HAL_GPIO_Init+0xe2>
 8001104:	2308      	movs	r3, #8
 8001106:	623b      	str	r3, [r7, #32]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	69fa      	ldr	r2, [r7, #28]
 800110c:	615a      	str	r2, [r3, #20]
 800110e:	e002      	b.n	8001116 <HAL_GPIO_Init+0xe2>
 8001110:	2300      	movs	r3, #0
 8001112:	623b      	str	r3, [r7, #32]
 8001114:	bf00      	nop
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	2bff      	cmp	r3, #255	; 0xff
 800111a:	d801      	bhi.n	8001120 <HAL_GPIO_Init+0xec>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	e001      	b.n	8001124 <HAL_GPIO_Init+0xf0>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3304      	adds	r3, #4
 8001124:	617b      	str	r3, [r7, #20]
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	2bff      	cmp	r3, #255	; 0xff
 800112a:	d802      	bhi.n	8001132 <HAL_GPIO_Init+0xfe>
 800112c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	e002      	b.n	8001138 <HAL_GPIO_Init+0x104>
 8001132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001134:	3b08      	subs	r3, #8
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	210f      	movs	r1, #15
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	fa01 f303 	lsl.w	r3, r1, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	401a      	ands	r2, r3
 800114a:	6a39      	ldr	r1, [r7, #32]
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	fa01 f303 	lsl.w	r3, r1, r3
 8001152:	431a      	orrs	r2, r3
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001160:	2b00      	cmp	r3, #0
 8001162:	f000 8096 	beq.w	8001292 <HAL_GPIO_Init+0x25e>
 8001166:	4b59      	ldr	r3, [pc, #356]	; (80012cc <HAL_GPIO_Init+0x298>)
 8001168:	699b      	ldr	r3, [r3, #24]
 800116a:	4a58      	ldr	r2, [pc, #352]	; (80012cc <HAL_GPIO_Init+0x298>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	6193      	str	r3, [r2, #24]
 8001172:	4b56      	ldr	r3, [pc, #344]	; (80012cc <HAL_GPIO_Init+0x298>)
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	4a54      	ldr	r2, [pc, #336]	; (80012d0 <HAL_GPIO_Init+0x29c>)
 8001180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001182:	089b      	lsrs	r3, r3, #2
 8001184:	3302      	adds	r3, #2
 8001186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118e:	f003 0303 	and.w	r3, r3, #3
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	220f      	movs	r2, #15
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43db      	mvns	r3, r3
 800119c:	68fa      	ldr	r2, [r7, #12]
 800119e:	4013      	ands	r3, r2
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a4b      	ldr	r2, [pc, #300]	; (80012d4 <HAL_GPIO_Init+0x2a0>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d013      	beq.n	80011d2 <HAL_GPIO_Init+0x19e>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a4a      	ldr	r2, [pc, #296]	; (80012d8 <HAL_GPIO_Init+0x2a4>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d00d      	beq.n	80011ce <HAL_GPIO_Init+0x19a>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a49      	ldr	r2, [pc, #292]	; (80012dc <HAL_GPIO_Init+0x2a8>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d007      	beq.n	80011ca <HAL_GPIO_Init+0x196>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a48      	ldr	r2, [pc, #288]	; (80012e0 <HAL_GPIO_Init+0x2ac>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d101      	bne.n	80011c6 <HAL_GPIO_Init+0x192>
 80011c2:	2303      	movs	r3, #3
 80011c4:	e006      	b.n	80011d4 <HAL_GPIO_Init+0x1a0>
 80011c6:	2304      	movs	r3, #4
 80011c8:	e004      	b.n	80011d4 <HAL_GPIO_Init+0x1a0>
 80011ca:	2302      	movs	r3, #2
 80011cc:	e002      	b.n	80011d4 <HAL_GPIO_Init+0x1a0>
 80011ce:	2301      	movs	r3, #1
 80011d0:	e000      	b.n	80011d4 <HAL_GPIO_Init+0x1a0>
 80011d2:	2300      	movs	r3, #0
 80011d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011d6:	f002 0203 	and.w	r2, r2, #3
 80011da:	0092      	lsls	r2, r2, #2
 80011dc:	4093      	lsls	r3, r2
 80011de:	68fa      	ldr	r2, [r7, #12]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	493a      	ldr	r1, [pc, #232]	; (80012d0 <HAL_GPIO_Init+0x29c>)
 80011e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e8:	089b      	lsrs	r3, r3, #2
 80011ea:	3302      	adds	r3, #2
 80011ec:	68fa      	ldr	r2, [r7, #12]
 80011ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d006      	beq.n	800120c <HAL_GPIO_Init+0x1d8>
 80011fe:	4b39      	ldr	r3, [pc, #228]	; (80012e4 <HAL_GPIO_Init+0x2b0>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	4938      	ldr	r1, [pc, #224]	; (80012e4 <HAL_GPIO_Init+0x2b0>)
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	4313      	orrs	r3, r2
 8001208:	600b      	str	r3, [r1, #0]
 800120a:	e006      	b.n	800121a <HAL_GPIO_Init+0x1e6>
 800120c:	4b35      	ldr	r3, [pc, #212]	; (80012e4 <HAL_GPIO_Init+0x2b0>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	43db      	mvns	r3, r3
 8001214:	4933      	ldr	r1, [pc, #204]	; (80012e4 <HAL_GPIO_Init+0x2b0>)
 8001216:	4013      	ands	r3, r2
 8001218:	600b      	str	r3, [r1, #0]
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d006      	beq.n	8001234 <HAL_GPIO_Init+0x200>
 8001226:	4b2f      	ldr	r3, [pc, #188]	; (80012e4 <HAL_GPIO_Init+0x2b0>)
 8001228:	685a      	ldr	r2, [r3, #4]
 800122a:	492e      	ldr	r1, [pc, #184]	; (80012e4 <HAL_GPIO_Init+0x2b0>)
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	4313      	orrs	r3, r2
 8001230:	604b      	str	r3, [r1, #4]
 8001232:	e006      	b.n	8001242 <HAL_GPIO_Init+0x20e>
 8001234:	4b2b      	ldr	r3, [pc, #172]	; (80012e4 <HAL_GPIO_Init+0x2b0>)
 8001236:	685a      	ldr	r2, [r3, #4]
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	43db      	mvns	r3, r3
 800123c:	4929      	ldr	r1, [pc, #164]	; (80012e4 <HAL_GPIO_Init+0x2b0>)
 800123e:	4013      	ands	r3, r2
 8001240:	604b      	str	r3, [r1, #4]
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d006      	beq.n	800125c <HAL_GPIO_Init+0x228>
 800124e:	4b25      	ldr	r3, [pc, #148]	; (80012e4 <HAL_GPIO_Init+0x2b0>)
 8001250:	689a      	ldr	r2, [r3, #8]
 8001252:	4924      	ldr	r1, [pc, #144]	; (80012e4 <HAL_GPIO_Init+0x2b0>)
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	4313      	orrs	r3, r2
 8001258:	608b      	str	r3, [r1, #8]
 800125a:	e006      	b.n	800126a <HAL_GPIO_Init+0x236>
 800125c:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <HAL_GPIO_Init+0x2b0>)
 800125e:	689a      	ldr	r2, [r3, #8]
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	43db      	mvns	r3, r3
 8001264:	491f      	ldr	r1, [pc, #124]	; (80012e4 <HAL_GPIO_Init+0x2b0>)
 8001266:	4013      	ands	r3, r2
 8001268:	608b      	str	r3, [r1, #8]
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d006      	beq.n	8001284 <HAL_GPIO_Init+0x250>
 8001276:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <HAL_GPIO_Init+0x2b0>)
 8001278:	68da      	ldr	r2, [r3, #12]
 800127a:	491a      	ldr	r1, [pc, #104]	; (80012e4 <HAL_GPIO_Init+0x2b0>)
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	4313      	orrs	r3, r2
 8001280:	60cb      	str	r3, [r1, #12]
 8001282:	e006      	b.n	8001292 <HAL_GPIO_Init+0x25e>
 8001284:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <HAL_GPIO_Init+0x2b0>)
 8001286:	68da      	ldr	r2, [r3, #12]
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	43db      	mvns	r3, r3
 800128c:	4915      	ldr	r1, [pc, #84]	; (80012e4 <HAL_GPIO_Init+0x2b0>)
 800128e:	4013      	ands	r3, r2
 8001290:	60cb      	str	r3, [r1, #12]
 8001292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001294:	3301      	adds	r3, #1
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129e:	fa22 f303 	lsr.w	r3, r2, r3
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	f47f aed0 	bne.w	8001048 <HAL_GPIO_Init+0x14>
 80012a8:	bf00      	nop
 80012aa:	372c      	adds	r7, #44	; 0x2c
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	10210000 	.word	0x10210000
 80012b8:	10110000 	.word	0x10110000
 80012bc:	10120000 	.word	0x10120000
 80012c0:	10310000 	.word	0x10310000
 80012c4:	10320000 	.word	0x10320000
 80012c8:	10220000 	.word	0x10220000
 80012cc:	40021000 	.word	0x40021000
 80012d0:	40010000 	.word	0x40010000
 80012d4:	40010800 	.word	0x40010800
 80012d8:	40010c00 	.word	0x40010c00
 80012dc:	40011000 	.word	0x40011000
 80012e0:	40011400 	.word	0x40011400
 80012e4:	40010400 	.word	0x40010400

080012e8 <HAL_GPIO_WritePin>:
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	460b      	mov	r3, r1
 80012f2:	807b      	strh	r3, [r7, #2]
 80012f4:	4613      	mov	r3, r2
 80012f6:	707b      	strb	r3, [r7, #1]
 80012f8:	787b      	ldrb	r3, [r7, #1]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d003      	beq.n	8001306 <HAL_GPIO_WritePin+0x1e>
 80012fe:	887a      	ldrh	r2, [r7, #2]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	611a      	str	r2, [r3, #16]
 8001304:	e003      	b.n	800130e <HAL_GPIO_WritePin+0x26>
 8001306:	887b      	ldrh	r3, [r7, #2]
 8001308:	041a      	lsls	r2, r3, #16
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	611a      	str	r2, [r3, #16]
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr

08001318 <HAL_GPIO_TogglePin>:
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	460b      	mov	r3, r1
 8001322:	807b      	strh	r3, [r7, #2]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	68da      	ldr	r2, [r3, #12]
 8001328:	887b      	ldrh	r3, [r7, #2]
 800132a:	4013      	ands	r3, r2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d003      	beq.n	8001338 <HAL_GPIO_TogglePin+0x20>
 8001330:	887a      	ldrh	r2, [r7, #2]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	615a      	str	r2, [r3, #20]
 8001336:	e002      	b.n	800133e <HAL_GPIO_TogglePin+0x26>
 8001338:	887a      	ldrh	r2, [r7, #2]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	611a      	str	r2, [r3, #16]
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr

08001348 <HAL_RCC_OscConfig>:
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d101      	bne.n	800135a <HAL_RCC_OscConfig+0x12>
 8001356:	2301      	movs	r3, #1
 8001358:	e26c      	b.n	8001834 <HAL_RCC_OscConfig+0x4ec>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	2b00      	cmp	r3, #0
 8001364:	f000 8087 	beq.w	8001476 <HAL_RCC_OscConfig+0x12e>
 8001368:	4b92      	ldr	r3, [pc, #584]	; (80015b4 <HAL_RCC_OscConfig+0x26c>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 030c 	and.w	r3, r3, #12
 8001370:	2b04      	cmp	r3, #4
 8001372:	d00c      	beq.n	800138e <HAL_RCC_OscConfig+0x46>
 8001374:	4b8f      	ldr	r3, [pc, #572]	; (80015b4 <HAL_RCC_OscConfig+0x26c>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f003 030c 	and.w	r3, r3, #12
 800137c:	2b08      	cmp	r3, #8
 800137e:	d112      	bne.n	80013a6 <HAL_RCC_OscConfig+0x5e>
 8001380:	4b8c      	ldr	r3, [pc, #560]	; (80015b4 <HAL_RCC_OscConfig+0x26c>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800138c:	d10b      	bne.n	80013a6 <HAL_RCC_OscConfig+0x5e>
 800138e:	4b89      	ldr	r3, [pc, #548]	; (80015b4 <HAL_RCC_OscConfig+0x26c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d06c      	beq.n	8001474 <HAL_RCC_OscConfig+0x12c>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d168      	bne.n	8001474 <HAL_RCC_OscConfig+0x12c>
 80013a2:	2301      	movs	r3, #1
 80013a4:	e246      	b.n	8001834 <HAL_RCC_OscConfig+0x4ec>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ae:	d106      	bne.n	80013be <HAL_RCC_OscConfig+0x76>
 80013b0:	4b80      	ldr	r3, [pc, #512]	; (80015b4 <HAL_RCC_OscConfig+0x26c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a7f      	ldr	r2, [pc, #508]	; (80015b4 <HAL_RCC_OscConfig+0x26c>)
 80013b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ba:	6013      	str	r3, [r2, #0]
 80013bc:	e02e      	b.n	800141c <HAL_RCC_OscConfig+0xd4>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d10c      	bne.n	80013e0 <HAL_RCC_OscConfig+0x98>
 80013c6:	4b7b      	ldr	r3, [pc, #492]	; (80015b4 <HAL_RCC_OscConfig+0x26c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a7a      	ldr	r2, [pc, #488]	; (80015b4 <HAL_RCC_OscConfig+0x26c>)
 80013cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	4b78      	ldr	r3, [pc, #480]	; (80015b4 <HAL_RCC_OscConfig+0x26c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a77      	ldr	r2, [pc, #476]	; (80015b4 <HAL_RCC_OscConfig+0x26c>)
 80013d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	e01d      	b.n	800141c <HAL_RCC_OscConfig+0xd4>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013e8:	d10c      	bne.n	8001404 <HAL_RCC_OscConfig+0xbc>
 80013ea:	4b72      	ldr	r3, [pc, #456]	; (80015b4 <HAL_RCC_OscConfig+0x26c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a71      	ldr	r2, [pc, #452]	; (80015b4 <HAL_RCC_OscConfig+0x26c>)
 80013f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013f4:	6013      	str	r3, [r2, #0]
 80013f6:	4b6f      	ldr	r3, [pc, #444]	; (80015b4 <HAL_RCC_OscConfig+0x26c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a6e      	ldr	r2, [pc, #440]	; (80015b4 <HAL_RCC_OscConfig+0x26c>)
 80013fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001400:	6013      	str	r3, [r2, #0]
 8001402:	e00b      	b.n	800141c <HAL_RCC_OscConfig+0xd4>
 8001404:	4b6b      	ldr	r3, [pc, #428]	; (80015b4 <HAL_RCC_OscConfig+0x26c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a6a      	ldr	r2, [pc, #424]	; (80015b4 <HAL_RCC_OscConfig+0x26c>)
 800140a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800140e:	6013      	str	r3, [r2, #0]
 8001410:	4b68      	ldr	r3, [pc, #416]	; (80015b4 <HAL_RCC_OscConfig+0x26c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a67      	ldr	r2, [pc, #412]	; (80015b4 <HAL_RCC_OscConfig+0x26c>)
 8001416:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800141a:	6013      	str	r3, [r2, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d013      	beq.n	800144c <HAL_RCC_OscConfig+0x104>
 8001424:	f7ff fd18 	bl	8000e58 <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0xf6>
 800142c:	f7ff fd14 	bl	8000e58 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b64      	cmp	r3, #100	; 0x64
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0xf6>
 800143a:	2303      	movs	r3, #3
 800143c:	e1fa      	b.n	8001834 <HAL_RCC_OscConfig+0x4ec>
 800143e:	4b5d      	ldr	r3, [pc, #372]	; (80015b4 <HAL_RCC_OscConfig+0x26c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d0f0      	beq.n	800142c <HAL_RCC_OscConfig+0xe4>
 800144a:	e014      	b.n	8001476 <HAL_RCC_OscConfig+0x12e>
 800144c:	f7ff fd04 	bl	8000e58 <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]
 8001452:	e008      	b.n	8001466 <HAL_RCC_OscConfig+0x11e>
 8001454:	f7ff fd00 	bl	8000e58 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b64      	cmp	r3, #100	; 0x64
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x11e>
 8001462:	2303      	movs	r3, #3
 8001464:	e1e6      	b.n	8001834 <HAL_RCC_OscConfig+0x4ec>
 8001466:	4b53      	ldr	r3, [pc, #332]	; (80015b4 <HAL_RCC_OscConfig+0x26c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1f0      	bne.n	8001454 <HAL_RCC_OscConfig+0x10c>
 8001472:	e000      	b.n	8001476 <HAL_RCC_OscConfig+0x12e>
 8001474:	bf00      	nop
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d063      	beq.n	800154a <HAL_RCC_OscConfig+0x202>
 8001482:	4b4c      	ldr	r3, [pc, #304]	; (80015b4 <HAL_RCC_OscConfig+0x26c>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f003 030c 	and.w	r3, r3, #12
 800148a:	2b00      	cmp	r3, #0
 800148c:	d00b      	beq.n	80014a6 <HAL_RCC_OscConfig+0x15e>
 800148e:	4b49      	ldr	r3, [pc, #292]	; (80015b4 <HAL_RCC_OscConfig+0x26c>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f003 030c 	and.w	r3, r3, #12
 8001496:	2b08      	cmp	r3, #8
 8001498:	d11c      	bne.n	80014d4 <HAL_RCC_OscConfig+0x18c>
 800149a:	4b46      	ldr	r3, [pc, #280]	; (80015b4 <HAL_RCC_OscConfig+0x26c>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d116      	bne.n	80014d4 <HAL_RCC_OscConfig+0x18c>
 80014a6:	4b43      	ldr	r3, [pc, #268]	; (80015b4 <HAL_RCC_OscConfig+0x26c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d005      	beq.n	80014be <HAL_RCC_OscConfig+0x176>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	691b      	ldr	r3, [r3, #16]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d001      	beq.n	80014be <HAL_RCC_OscConfig+0x176>
 80014ba:	2301      	movs	r3, #1
 80014bc:	e1ba      	b.n	8001834 <HAL_RCC_OscConfig+0x4ec>
 80014be:	4b3d      	ldr	r3, [pc, #244]	; (80015b4 <HAL_RCC_OscConfig+0x26c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	695b      	ldr	r3, [r3, #20]
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	4939      	ldr	r1, [pc, #228]	; (80015b4 <HAL_RCC_OscConfig+0x26c>)
 80014ce:	4313      	orrs	r3, r2
 80014d0:	600b      	str	r3, [r1, #0]
 80014d2:	e03a      	b.n	800154a <HAL_RCC_OscConfig+0x202>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	691b      	ldr	r3, [r3, #16]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d020      	beq.n	800151e <HAL_RCC_OscConfig+0x1d6>
 80014dc:	4b36      	ldr	r3, [pc, #216]	; (80015b8 <HAL_RCC_OscConfig+0x270>)
 80014de:	2201      	movs	r2, #1
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	f7ff fcb9 	bl	8000e58 <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x1b4>
 80014ea:	f7ff fcb5 	bl	8000e58 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x1b4>
 80014f8:	2303      	movs	r3, #3
 80014fa:	e19b      	b.n	8001834 <HAL_RCC_OscConfig+0x4ec>
 80014fc:	4b2d      	ldr	r3, [pc, #180]	; (80015b4 <HAL_RCC_OscConfig+0x26c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d0f0      	beq.n	80014ea <HAL_RCC_OscConfig+0x1a2>
 8001508:	4b2a      	ldr	r3, [pc, #168]	; (80015b4 <HAL_RCC_OscConfig+0x26c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	695b      	ldr	r3, [r3, #20]
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	4927      	ldr	r1, [pc, #156]	; (80015b4 <HAL_RCC_OscConfig+0x26c>)
 8001518:	4313      	orrs	r3, r2
 800151a:	600b      	str	r3, [r1, #0]
 800151c:	e015      	b.n	800154a <HAL_RCC_OscConfig+0x202>
 800151e:	4b26      	ldr	r3, [pc, #152]	; (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	f7ff fc98 	bl	8000e58 <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x1f6>
 800152c:	f7ff fc94 	bl	8000e58 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x1f6>
 800153a:	2303      	movs	r3, #3
 800153c:	e17a      	b.n	8001834 <HAL_RCC_OscConfig+0x4ec>
 800153e:	4b1d      	ldr	r3, [pc, #116]	; (80015b4 <HAL_RCC_OscConfig+0x26c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1f0      	bne.n	800152c <HAL_RCC_OscConfig+0x1e4>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0308 	and.w	r3, r3, #8
 8001552:	2b00      	cmp	r3, #0
 8001554:	d03a      	beq.n	80015cc <HAL_RCC_OscConfig+0x284>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d019      	beq.n	8001592 <HAL_RCC_OscConfig+0x24a>
 800155e:	4b17      	ldr	r3, [pc, #92]	; (80015bc <HAL_RCC_OscConfig+0x274>)
 8001560:	2201      	movs	r2, #1
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	f7ff fc78 	bl	8000e58 <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0x236>
 800156c:	f7ff fc74 	bl	8000e58 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x236>
 800157a:	2303      	movs	r3, #3
 800157c:	e15a      	b.n	8001834 <HAL_RCC_OscConfig+0x4ec>
 800157e:	4b0d      	ldr	r3, [pc, #52]	; (80015b4 <HAL_RCC_OscConfig+0x26c>)
 8001580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d0f0      	beq.n	800156c <HAL_RCC_OscConfig+0x224>
 800158a:	2001      	movs	r0, #1
 800158c:	f000 fada 	bl	8001b44 <RCC_Delay>
 8001590:	e01c      	b.n	80015cc <HAL_RCC_OscConfig+0x284>
 8001592:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <HAL_RCC_OscConfig+0x274>)
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	f7ff fc5e 	bl	8000e58 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]
 800159e:	e00f      	b.n	80015c0 <HAL_RCC_OscConfig+0x278>
 80015a0:	f7ff fc5a 	bl	8000e58 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d908      	bls.n	80015c0 <HAL_RCC_OscConfig+0x278>
 80015ae:	2303      	movs	r3, #3
 80015b0:	e140      	b.n	8001834 <HAL_RCC_OscConfig+0x4ec>
 80015b2:	bf00      	nop
 80015b4:	40021000 	.word	0x40021000
 80015b8:	42420000 	.word	0x42420000
 80015bc:	42420480 	.word	0x42420480
 80015c0:	4b9e      	ldr	r3, [pc, #632]	; (800183c <HAL_RCC_OscConfig+0x4f4>)
 80015c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1e9      	bne.n	80015a0 <HAL_RCC_OscConfig+0x258>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0304 	and.w	r3, r3, #4
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 80a6 	beq.w	8001726 <HAL_RCC_OscConfig+0x3de>
 80015da:	2300      	movs	r3, #0
 80015dc:	75fb      	strb	r3, [r7, #23]
 80015de:	4b97      	ldr	r3, [pc, #604]	; (800183c <HAL_RCC_OscConfig+0x4f4>)
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d10d      	bne.n	8001606 <HAL_RCC_OscConfig+0x2be>
 80015ea:	4b94      	ldr	r3, [pc, #592]	; (800183c <HAL_RCC_OscConfig+0x4f4>)
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	4a93      	ldr	r2, [pc, #588]	; (800183c <HAL_RCC_OscConfig+0x4f4>)
 80015f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f4:	61d3      	str	r3, [r2, #28]
 80015f6:	4b91      	ldr	r3, [pc, #580]	; (800183c <HAL_RCC_OscConfig+0x4f4>)
 80015f8:	69db      	ldr	r3, [r3, #28]
 80015fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fe:	60bb      	str	r3, [r7, #8]
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	2301      	movs	r3, #1
 8001604:	75fb      	strb	r3, [r7, #23]
 8001606:	4b8e      	ldr	r3, [pc, #568]	; (8001840 <HAL_RCC_OscConfig+0x4f8>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800160e:	2b00      	cmp	r3, #0
 8001610:	d118      	bne.n	8001644 <HAL_RCC_OscConfig+0x2fc>
 8001612:	4b8b      	ldr	r3, [pc, #556]	; (8001840 <HAL_RCC_OscConfig+0x4f8>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a8a      	ldr	r2, [pc, #552]	; (8001840 <HAL_RCC_OscConfig+0x4f8>)
 8001618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800161c:	6013      	str	r3, [r2, #0]
 800161e:	f7ff fc1b 	bl	8000e58 <HAL_GetTick>
 8001622:	6138      	str	r0, [r7, #16]
 8001624:	e008      	b.n	8001638 <HAL_RCC_OscConfig+0x2f0>
 8001626:	f7ff fc17 	bl	8000e58 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b64      	cmp	r3, #100	; 0x64
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x2f0>
 8001634:	2303      	movs	r3, #3
 8001636:	e0fd      	b.n	8001834 <HAL_RCC_OscConfig+0x4ec>
 8001638:	4b81      	ldr	r3, [pc, #516]	; (8001840 <HAL_RCC_OscConfig+0x4f8>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001640:	2b00      	cmp	r3, #0
 8001642:	d0f0      	beq.n	8001626 <HAL_RCC_OscConfig+0x2de>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d106      	bne.n	800165a <HAL_RCC_OscConfig+0x312>
 800164c:	4b7b      	ldr	r3, [pc, #492]	; (800183c <HAL_RCC_OscConfig+0x4f4>)
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	4a7a      	ldr	r2, [pc, #488]	; (800183c <HAL_RCC_OscConfig+0x4f4>)
 8001652:	f043 0301 	orr.w	r3, r3, #1
 8001656:	6213      	str	r3, [r2, #32]
 8001658:	e02d      	b.n	80016b6 <HAL_RCC_OscConfig+0x36e>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d10c      	bne.n	800167c <HAL_RCC_OscConfig+0x334>
 8001662:	4b76      	ldr	r3, [pc, #472]	; (800183c <HAL_RCC_OscConfig+0x4f4>)
 8001664:	6a1b      	ldr	r3, [r3, #32]
 8001666:	4a75      	ldr	r2, [pc, #468]	; (800183c <HAL_RCC_OscConfig+0x4f4>)
 8001668:	f023 0301 	bic.w	r3, r3, #1
 800166c:	6213      	str	r3, [r2, #32]
 800166e:	4b73      	ldr	r3, [pc, #460]	; (800183c <HAL_RCC_OscConfig+0x4f4>)
 8001670:	6a1b      	ldr	r3, [r3, #32]
 8001672:	4a72      	ldr	r2, [pc, #456]	; (800183c <HAL_RCC_OscConfig+0x4f4>)
 8001674:	f023 0304 	bic.w	r3, r3, #4
 8001678:	6213      	str	r3, [r2, #32]
 800167a:	e01c      	b.n	80016b6 <HAL_RCC_OscConfig+0x36e>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	2b05      	cmp	r3, #5
 8001682:	d10c      	bne.n	800169e <HAL_RCC_OscConfig+0x356>
 8001684:	4b6d      	ldr	r3, [pc, #436]	; (800183c <HAL_RCC_OscConfig+0x4f4>)
 8001686:	6a1b      	ldr	r3, [r3, #32]
 8001688:	4a6c      	ldr	r2, [pc, #432]	; (800183c <HAL_RCC_OscConfig+0x4f4>)
 800168a:	f043 0304 	orr.w	r3, r3, #4
 800168e:	6213      	str	r3, [r2, #32]
 8001690:	4b6a      	ldr	r3, [pc, #424]	; (800183c <HAL_RCC_OscConfig+0x4f4>)
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	4a69      	ldr	r2, [pc, #420]	; (800183c <HAL_RCC_OscConfig+0x4f4>)
 8001696:	f043 0301 	orr.w	r3, r3, #1
 800169a:	6213      	str	r3, [r2, #32]
 800169c:	e00b      	b.n	80016b6 <HAL_RCC_OscConfig+0x36e>
 800169e:	4b67      	ldr	r3, [pc, #412]	; (800183c <HAL_RCC_OscConfig+0x4f4>)
 80016a0:	6a1b      	ldr	r3, [r3, #32]
 80016a2:	4a66      	ldr	r2, [pc, #408]	; (800183c <HAL_RCC_OscConfig+0x4f4>)
 80016a4:	f023 0301 	bic.w	r3, r3, #1
 80016a8:	6213      	str	r3, [r2, #32]
 80016aa:	4b64      	ldr	r3, [pc, #400]	; (800183c <HAL_RCC_OscConfig+0x4f4>)
 80016ac:	6a1b      	ldr	r3, [r3, #32]
 80016ae:	4a63      	ldr	r2, [pc, #396]	; (800183c <HAL_RCC_OscConfig+0x4f4>)
 80016b0:	f023 0304 	bic.w	r3, r3, #4
 80016b4:	6213      	str	r3, [r2, #32]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d015      	beq.n	80016ea <HAL_RCC_OscConfig+0x3a2>
 80016be:	f7ff fbcb 	bl	8000e58 <HAL_GetTick>
 80016c2:	6138      	str	r0, [r7, #16]
 80016c4:	e00a      	b.n	80016dc <HAL_RCC_OscConfig+0x394>
 80016c6:	f7ff fbc7 	bl	8000e58 <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x394>
 80016d8:	2303      	movs	r3, #3
 80016da:	e0ab      	b.n	8001834 <HAL_RCC_OscConfig+0x4ec>
 80016dc:	4b57      	ldr	r3, [pc, #348]	; (800183c <HAL_RCC_OscConfig+0x4f4>)
 80016de:	6a1b      	ldr	r3, [r3, #32]
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d0ee      	beq.n	80016c6 <HAL_RCC_OscConfig+0x37e>
 80016e8:	e014      	b.n	8001714 <HAL_RCC_OscConfig+0x3cc>
 80016ea:	f7ff fbb5 	bl	8000e58 <HAL_GetTick>
 80016ee:	6138      	str	r0, [r7, #16]
 80016f0:	e00a      	b.n	8001708 <HAL_RCC_OscConfig+0x3c0>
 80016f2:	f7ff fbb1 	bl	8000e58 <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001700:	4293      	cmp	r3, r2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x3c0>
 8001704:	2303      	movs	r3, #3
 8001706:	e095      	b.n	8001834 <HAL_RCC_OscConfig+0x4ec>
 8001708:	4b4c      	ldr	r3, [pc, #304]	; (800183c <HAL_RCC_OscConfig+0x4f4>)
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1ee      	bne.n	80016f2 <HAL_RCC_OscConfig+0x3aa>
 8001714:	7dfb      	ldrb	r3, [r7, #23]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d105      	bne.n	8001726 <HAL_RCC_OscConfig+0x3de>
 800171a:	4b48      	ldr	r3, [pc, #288]	; (800183c <HAL_RCC_OscConfig+0x4f4>)
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	4a47      	ldr	r2, [pc, #284]	; (800183c <HAL_RCC_OscConfig+0x4f4>)
 8001720:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001724:	61d3      	str	r3, [r2, #28]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	2b00      	cmp	r3, #0
 800172c:	f000 8081 	beq.w	8001832 <HAL_RCC_OscConfig+0x4ea>
 8001730:	4b42      	ldr	r3, [pc, #264]	; (800183c <HAL_RCC_OscConfig+0x4f4>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 030c 	and.w	r3, r3, #12
 8001738:	2b08      	cmp	r3, #8
 800173a:	d061      	beq.n	8001800 <HAL_RCC_OscConfig+0x4b8>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	69db      	ldr	r3, [r3, #28]
 8001740:	2b02      	cmp	r3, #2
 8001742:	d146      	bne.n	80017d2 <HAL_RCC_OscConfig+0x48a>
 8001744:	4b3f      	ldr	r3, [pc, #252]	; (8001844 <HAL_RCC_OscConfig+0x4fc>)
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	f7ff fb85 	bl	8000e58 <HAL_GetTick>
 800174e:	6138      	str	r0, [r7, #16]
 8001750:	e008      	b.n	8001764 <HAL_RCC_OscConfig+0x41c>
 8001752:	f7ff fb81 	bl	8000e58 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x41c>
 8001760:	2303      	movs	r3, #3
 8001762:	e067      	b.n	8001834 <HAL_RCC_OscConfig+0x4ec>
 8001764:	4b35      	ldr	r3, [pc, #212]	; (800183c <HAL_RCC_OscConfig+0x4f4>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1f0      	bne.n	8001752 <HAL_RCC_OscConfig+0x40a>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001778:	d108      	bne.n	800178c <HAL_RCC_OscConfig+0x444>
 800177a:	4b30      	ldr	r3, [pc, #192]	; (800183c <HAL_RCC_OscConfig+0x4f4>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	492d      	ldr	r1, [pc, #180]	; (800183c <HAL_RCC_OscConfig+0x4f4>)
 8001788:	4313      	orrs	r3, r2
 800178a:	604b      	str	r3, [r1, #4]
 800178c:	4b2b      	ldr	r3, [pc, #172]	; (800183c <HAL_RCC_OscConfig+0x4f4>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a19      	ldr	r1, [r3, #32]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179c:	430b      	orrs	r3, r1
 800179e:	4927      	ldr	r1, [pc, #156]	; (800183c <HAL_RCC_OscConfig+0x4f4>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	604b      	str	r3, [r1, #4]
 80017a4:	4b27      	ldr	r3, [pc, #156]	; (8001844 <HAL_RCC_OscConfig+0x4fc>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	f7ff fb55 	bl	8000e58 <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]
 80017b0:	e008      	b.n	80017c4 <HAL_RCC_OscConfig+0x47c>
 80017b2:	f7ff fb51 	bl	8000e58 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x47c>
 80017c0:	2303      	movs	r3, #3
 80017c2:	e037      	b.n	8001834 <HAL_RCC_OscConfig+0x4ec>
 80017c4:	4b1d      	ldr	r3, [pc, #116]	; (800183c <HAL_RCC_OscConfig+0x4f4>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d0f0      	beq.n	80017b2 <HAL_RCC_OscConfig+0x46a>
 80017d0:	e02f      	b.n	8001832 <HAL_RCC_OscConfig+0x4ea>
 80017d2:	4b1c      	ldr	r3, [pc, #112]	; (8001844 <HAL_RCC_OscConfig+0x4fc>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	f7ff fb3e 	bl	8000e58 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x4aa>
 80017e0:	f7ff fb3a 	bl	8000e58 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x4aa>
 80017ee:	2303      	movs	r3, #3
 80017f0:	e020      	b.n	8001834 <HAL_RCC_OscConfig+0x4ec>
 80017f2:	4b12      	ldr	r3, [pc, #72]	; (800183c <HAL_RCC_OscConfig+0x4f4>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1f0      	bne.n	80017e0 <HAL_RCC_OscConfig+0x498>
 80017fe:	e018      	b.n	8001832 <HAL_RCC_OscConfig+0x4ea>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	69db      	ldr	r3, [r3, #28]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d101      	bne.n	800180c <HAL_RCC_OscConfig+0x4c4>
 8001808:	2301      	movs	r3, #1
 800180a:	e013      	b.n	8001834 <HAL_RCC_OscConfig+0x4ec>
 800180c:	4b0b      	ldr	r3, [pc, #44]	; (800183c <HAL_RCC_OscConfig+0x4f4>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a1b      	ldr	r3, [r3, #32]
 800181c:	429a      	cmp	r2, r3
 800181e:	d106      	bne.n	800182e <HAL_RCC_OscConfig+0x4e6>
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182a:	429a      	cmp	r2, r3
 800182c:	d001      	beq.n	8001832 <HAL_RCC_OscConfig+0x4ea>
 800182e:	2301      	movs	r3, #1
 8001830:	e000      	b.n	8001834 <HAL_RCC_OscConfig+0x4ec>
 8001832:	2300      	movs	r3, #0
 8001834:	4618      	mov	r0, r3
 8001836:	3718      	adds	r7, #24
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40021000 	.word	0x40021000
 8001840:	40007000 	.word	0x40007000
 8001844:	42420060 	.word	0x42420060

08001848 <HAL_RCC_ClockConfig>:
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d101      	bne.n	800185c <HAL_RCC_ClockConfig+0x14>
 8001858:	2301      	movs	r3, #1
 800185a:	e0d0      	b.n	80019fe <HAL_RCC_ClockConfig+0x1b6>
 800185c:	4b6a      	ldr	r3, [pc, #424]	; (8001a08 <HAL_RCC_ClockConfig+0x1c0>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0307 	and.w	r3, r3, #7
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	429a      	cmp	r2, r3
 8001868:	d910      	bls.n	800188c <HAL_RCC_ClockConfig+0x44>
 800186a:	4b67      	ldr	r3, [pc, #412]	; (8001a08 <HAL_RCC_ClockConfig+0x1c0>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f023 0207 	bic.w	r2, r3, #7
 8001872:	4965      	ldr	r1, [pc, #404]	; (8001a08 <HAL_RCC_ClockConfig+0x1c0>)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	4313      	orrs	r3, r2
 8001878:	600b      	str	r3, [r1, #0]
 800187a:	4b63      	ldr	r3, [pc, #396]	; (8001a08 <HAL_RCC_ClockConfig+0x1c0>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	429a      	cmp	r2, r3
 8001886:	d001      	beq.n	800188c <HAL_RCC_ClockConfig+0x44>
 8001888:	2301      	movs	r3, #1
 800188a:	e0b8      	b.n	80019fe <HAL_RCC_ClockConfig+0x1b6>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d020      	beq.n	80018da <HAL_RCC_ClockConfig+0x92>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d005      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x68>
 80018a4:	4b59      	ldr	r3, [pc, #356]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	4a58      	ldr	r2, [pc, #352]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80018aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018ae:	6053      	str	r3, [r2, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0308 	and.w	r3, r3, #8
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d005      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x80>
 80018bc:	4b53      	ldr	r3, [pc, #332]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	4a52      	ldr	r2, [pc, #328]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80018c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018c6:	6053      	str	r3, [r2, #4]
 80018c8:	4b50      	ldr	r3, [pc, #320]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	494d      	ldr	r1, [pc, #308]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	604b      	str	r3, [r1, #4]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d040      	beq.n	8001968 <HAL_RCC_ClockConfig+0x120>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d107      	bne.n	80018fe <HAL_RCC_ClockConfig+0xb6>
 80018ee:	4b47      	ldr	r3, [pc, #284]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d115      	bne.n	8001926 <HAL_RCC_ClockConfig+0xde>
 80018fa:	2301      	movs	r3, #1
 80018fc:	e07f      	b.n	80019fe <HAL_RCC_ClockConfig+0x1b6>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b02      	cmp	r3, #2
 8001904:	d107      	bne.n	8001916 <HAL_RCC_ClockConfig+0xce>
 8001906:	4b41      	ldr	r3, [pc, #260]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d109      	bne.n	8001926 <HAL_RCC_ClockConfig+0xde>
 8001912:	2301      	movs	r3, #1
 8001914:	e073      	b.n	80019fe <HAL_RCC_ClockConfig+0x1b6>
 8001916:	4b3d      	ldr	r3, [pc, #244]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_RCC_ClockConfig+0xde>
 8001922:	2301      	movs	r3, #1
 8001924:	e06b      	b.n	80019fe <HAL_RCC_ClockConfig+0x1b6>
 8001926:	4b39      	ldr	r3, [pc, #228]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f023 0203 	bic.w	r2, r3, #3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	4936      	ldr	r1, [pc, #216]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 8001934:	4313      	orrs	r3, r2
 8001936:	604b      	str	r3, [r1, #4]
 8001938:	f7ff fa8e 	bl	8000e58 <HAL_GetTick>
 800193c:	60f8      	str	r0, [r7, #12]
 800193e:	e00a      	b.n	8001956 <HAL_RCC_ClockConfig+0x10e>
 8001940:	f7ff fa8a 	bl	8000e58 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	f241 3288 	movw	r2, #5000	; 0x1388
 800194e:	4293      	cmp	r3, r2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_ClockConfig+0x10e>
 8001952:	2303      	movs	r3, #3
 8001954:	e053      	b.n	80019fe <HAL_RCC_ClockConfig+0x1b6>
 8001956:	4b2d      	ldr	r3, [pc, #180]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f003 020c 	and.w	r2, r3, #12
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	429a      	cmp	r2, r3
 8001966:	d1eb      	bne.n	8001940 <HAL_RCC_ClockConfig+0xf8>
 8001968:	4b27      	ldr	r3, [pc, #156]	; (8001a08 <HAL_RCC_ClockConfig+0x1c0>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0307 	and.w	r3, r3, #7
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	429a      	cmp	r2, r3
 8001974:	d210      	bcs.n	8001998 <HAL_RCC_ClockConfig+0x150>
 8001976:	4b24      	ldr	r3, [pc, #144]	; (8001a08 <HAL_RCC_ClockConfig+0x1c0>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f023 0207 	bic.w	r2, r3, #7
 800197e:	4922      	ldr	r1, [pc, #136]	; (8001a08 <HAL_RCC_ClockConfig+0x1c0>)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	4313      	orrs	r3, r2
 8001984:	600b      	str	r3, [r1, #0]
 8001986:	4b20      	ldr	r3, [pc, #128]	; (8001a08 <HAL_RCC_ClockConfig+0x1c0>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	429a      	cmp	r2, r3
 8001992:	d001      	beq.n	8001998 <HAL_RCC_ClockConfig+0x150>
 8001994:	2301      	movs	r3, #1
 8001996:	e032      	b.n	80019fe <HAL_RCC_ClockConfig+0x1b6>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d008      	beq.n	80019b6 <HAL_RCC_ClockConfig+0x16e>
 80019a4:	4b19      	ldr	r3, [pc, #100]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	4916      	ldr	r1, [pc, #88]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	604b      	str	r3, [r1, #4]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0308 	and.w	r3, r3, #8
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d009      	beq.n	80019d6 <HAL_RCC_ClockConfig+0x18e>
 80019c2:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	490e      	ldr	r1, [pc, #56]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	604b      	str	r3, [r1, #4]
 80019d6:	f000 f821 	bl	8001a1c <HAL_RCC_GetSysClockFreq>
 80019da:	4601      	mov	r1, r0
 80019dc:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	091b      	lsrs	r3, r3, #4
 80019e2:	f003 030f 	and.w	r3, r3, #15
 80019e6:	4a0a      	ldr	r2, [pc, #40]	; (8001a10 <HAL_RCC_ClockConfig+0x1c8>)
 80019e8:	5cd3      	ldrb	r3, [r2, r3]
 80019ea:	fa21 f303 	lsr.w	r3, r1, r3
 80019ee:	4a09      	ldr	r2, [pc, #36]	; (8001a14 <HAL_RCC_ClockConfig+0x1cc>)
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <HAL_RCC_ClockConfig+0x1d0>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff f9ec 	bl	8000dd4 <HAL_InitTick>
 80019fc:	2300      	movs	r3, #0
 80019fe:	4618      	mov	r0, r3
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40022000 	.word	0x40022000
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	08004cb8 	.word	0x08004cb8
 8001a14:	20000008 	.word	0x20000008
 8001a18:	2000000c 	.word	0x2000000c

08001a1c <HAL_RCC_GetSysClockFreq>:
 8001a1c:	b490      	push	{r4, r7}
 8001a1e:	b08a      	sub	sp, #40	; 0x28
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4b2a      	ldr	r3, [pc, #168]	; (8001acc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a24:	1d3c      	adds	r4, r7, #4
 8001a26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001a2c:	4b28      	ldr	r3, [pc, #160]	; (8001ad0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a2e:	881b      	ldrh	r3, [r3, #0]
 8001a30:	803b      	strh	r3, [r7, #0]
 8001a32:	2300      	movs	r3, #0
 8001a34:	61fb      	str	r3, [r7, #28]
 8001a36:	2300      	movs	r3, #0
 8001a38:	61bb      	str	r3, [r7, #24]
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
 8001a42:	2300      	movs	r3, #0
 8001a44:	623b      	str	r3, [r7, #32]
 8001a46:	4b23      	ldr	r3, [pc, #140]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	61fb      	str	r3, [r7, #28]
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	f003 030c 	and.w	r3, r3, #12
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	d002      	beq.n	8001a5c <HAL_RCC_GetSysClockFreq+0x40>
 8001a56:	2b08      	cmp	r3, #8
 8001a58:	d003      	beq.n	8001a62 <HAL_RCC_GetSysClockFreq+0x46>
 8001a5a:	e02d      	b.n	8001ab8 <HAL_RCC_GetSysClockFreq+0x9c>
 8001a5c:	4b1e      	ldr	r3, [pc, #120]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a5e:	623b      	str	r3, [r7, #32]
 8001a60:	e02d      	b.n	8001abe <HAL_RCC_GetSysClockFreq+0xa2>
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	0c9b      	lsrs	r3, r3, #18
 8001a66:	f003 030f 	and.w	r3, r3, #15
 8001a6a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a6e:	4413      	add	r3, r2
 8001a70:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a74:	617b      	str	r3, [r7, #20]
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d013      	beq.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x8c>
 8001a80:	4b14      	ldr	r3, [pc, #80]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	0c5b      	lsrs	r3, r3, #17
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a8e:	4413      	add	r3, r2
 8001a90:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001a94:	61bb      	str	r3, [r7, #24]
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	4a0f      	ldr	r2, [pc, #60]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a9a:	fb02 f203 	mul.w	r2, r2, r3
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8001aa6:	e004      	b.n	8001ab2 <HAL_RCC_GetSysClockFreq+0x96>
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	4a0c      	ldr	r2, [pc, #48]	; (8001adc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001aac:	fb02 f303 	mul.w	r3, r2, r3
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab4:	623b      	str	r3, [r7, #32]
 8001ab6:	e002      	b.n	8001abe <HAL_RCC_GetSysClockFreq+0xa2>
 8001ab8:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001aba:	623b      	str	r3, [r7, #32]
 8001abc:	bf00      	nop
 8001abe:	6a3b      	ldr	r3, [r7, #32]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3728      	adds	r7, #40	; 0x28
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc90      	pop	{r4, r7}
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	08004c68 	.word	0x08004c68
 8001ad0:	08004c78 	.word	0x08004c78
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	007a1200 	.word	0x007a1200
 8001adc:	003d0900 	.word	0x003d0900

08001ae0 <HAL_RCC_GetHCLKFreq>:
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	4b02      	ldr	r3, [pc, #8]	; (8001af0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr
 8001af0:	20000008 	.word	0x20000008

08001af4 <HAL_RCC_GetPCLK1Freq>:
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	f7ff fff2 	bl	8001ae0 <HAL_RCC_GetHCLKFreq>
 8001afc:	4601      	mov	r1, r0
 8001afe:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	0a1b      	lsrs	r3, r3, #8
 8001b04:	f003 0307 	and.w	r3, r3, #7
 8001b08:	4a03      	ldr	r2, [pc, #12]	; (8001b18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b0a:	5cd3      	ldrb	r3, [r2, r3]
 8001b0c:	fa21 f303 	lsr.w	r3, r1, r3
 8001b10:	4618      	mov	r0, r3
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40021000 	.word	0x40021000
 8001b18:	08004cc8 	.word	0x08004cc8

08001b1c <HAL_RCC_GetPCLK2Freq>:
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	f7ff ffde 	bl	8001ae0 <HAL_RCC_GetHCLKFreq>
 8001b24:	4601      	mov	r1, r0
 8001b26:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	0adb      	lsrs	r3, r3, #11
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	4a03      	ldr	r2, [pc, #12]	; (8001b40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b32:	5cd3      	ldrb	r3, [r2, r3]
 8001b34:	fa21 f303 	lsr.w	r3, r1, r3
 8001b38:	4618      	mov	r0, r3
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	08004cc8 	.word	0x08004cc8

08001b44 <RCC_Delay>:
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <RCC_Delay+0x34>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a0a      	ldr	r2, [pc, #40]	; (8001b7c <RCC_Delay+0x38>)
 8001b52:	fba2 2303 	umull	r2, r3, r2, r3
 8001b56:	0a5b      	lsrs	r3, r3, #9
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	fb02 f303 	mul.w	r3, r2, r3
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	bf00      	nop
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	1e5a      	subs	r2, r3, #1
 8001b66:	60fa      	str	r2, [r7, #12]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1f9      	bne.n	8001b60 <RCC_Delay+0x1c>
 8001b6c:	bf00      	nop
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bc80      	pop	{r7}
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	20000008 	.word	0x20000008
 8001b7c:	10624dd3 	.word	0x10624dd3

08001b80 <HAL_UART_Init>:
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_UART_Init+0x12>
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e03f      	b.n	8001c12 <HAL_UART_Init+0x92>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d106      	bne.n	8001bac <HAL_UART_Init+0x2c>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff f81e 	bl	8000be8 <HAL_UART_MspInit>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2224      	movs	r2, #36	; 0x24
 8001bb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	68da      	ldr	r2, [r3, #12]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001bc2:	60da      	str	r2, [r3, #12]
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f000 f90b 	bl	8001de0 <UART_SetConfig>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	691a      	ldr	r2, [r3, #16]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001bd8:	611a      	str	r2, [r3, #16]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	695a      	ldr	r2, [r3, #20]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001be8:	615a      	str	r2, [r3, #20]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68da      	ldr	r2, [r3, #12]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2220      	movs	r2, #32
 8001c04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2220      	movs	r2, #32
 8001c0c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8001c10:	2300      	movs	r3, #0
 8001c12:	4618      	mov	r0, r3
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_UART_Transmit>:
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b088      	sub	sp, #32
 8001c1e:	af02      	add	r7, sp, #8
 8001c20:	60f8      	str	r0, [r7, #12]
 8001c22:	60b9      	str	r1, [r7, #8]
 8001c24:	603b      	str	r3, [r7, #0]
 8001c26:	4613      	mov	r3, r2
 8001c28:	80fb      	strh	r3, [r7, #6]
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	617b      	str	r3, [r7, #20]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b20      	cmp	r3, #32
 8001c38:	f040 8083 	bne.w	8001d42 <HAL_UART_Transmit+0x128>
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d002      	beq.n	8001c48 <HAL_UART_Transmit+0x2e>
 8001c42:	88fb      	ldrh	r3, [r7, #6]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d101      	bne.n	8001c4c <HAL_UART_Transmit+0x32>
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e07b      	b.n	8001d44 <HAL_UART_Transmit+0x12a>
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d101      	bne.n	8001c5a <HAL_UART_Transmit+0x40>
 8001c56:	2302      	movs	r3, #2
 8001c58:	e074      	b.n	8001d44 <HAL_UART_Transmit+0x12a>
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2200      	movs	r2, #0
 8001c66:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2221      	movs	r2, #33	; 0x21
 8001c6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001c70:	f7ff f8f2 	bl	8000e58 <HAL_GetTick>
 8001c74:	6178      	str	r0, [r7, #20]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	88fa      	ldrh	r2, [r7, #6]
 8001c7a:	849a      	strh	r2, [r3, #36]	; 0x24
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	88fa      	ldrh	r2, [r7, #6]
 8001c80:	84da      	strh	r2, [r3, #38]	; 0x26
 8001c82:	e042      	b.n	8001d0a <HAL_UART_Transmit+0xf0>
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	84da      	strh	r2, [r3, #38]	; 0x26
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c9a:	d122      	bne.n	8001ce2 <HAL_UART_Transmit+0xc8>
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2180      	movs	r1, #128	; 0x80
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f000 f850 	bl	8001d4c <UART_WaitOnFlagUntilTimeout>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <HAL_UART_Transmit+0x9c>
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e046      	b.n	8001d44 <HAL_UART_Transmit+0x12a>
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d103      	bne.n	8001cda <HAL_UART_Transmit+0xc0>
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	3302      	adds	r3, #2
 8001cd6:	60bb      	str	r3, [r7, #8]
 8001cd8:	e017      	b.n	8001d0a <HAL_UART_Transmit+0xf0>
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	60bb      	str	r3, [r7, #8]
 8001ce0:	e013      	b.n	8001d0a <HAL_UART_Transmit+0xf0>
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	9300      	str	r3, [sp, #0]
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	2180      	movs	r1, #128	; 0x80
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f000 f82d 	bl	8001d4c <UART_WaitOnFlagUntilTimeout>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <HAL_UART_Transmit+0xe2>
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e023      	b.n	8001d44 <HAL_UART_Transmit+0x12a>
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	1c5a      	adds	r2, r3, #1
 8001d00:	60ba      	str	r2, [r7, #8]
 8001d02:	781a      	ldrb	r2, [r3, #0]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1b7      	bne.n	8001c84 <HAL_UART_Transmit+0x6a>
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	2140      	movs	r1, #64	; 0x40
 8001d1e:	68f8      	ldr	r0, [r7, #12]
 8001d20:	f000 f814 	bl	8001d4c <UART_WaitOnFlagUntilTimeout>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_UART_Transmit+0x114>
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e00a      	b.n	8001d44 <HAL_UART_Transmit+0x12a>
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2220      	movs	r2, #32
 8001d32:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8001d3e:	2300      	movs	r3, #0
 8001d40:	e000      	b.n	8001d44 <HAL_UART_Transmit+0x12a>
 8001d42:	2302      	movs	r3, #2
 8001d44:	4618      	mov	r0, r3
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <UART_WaitOnFlagUntilTimeout>:
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	603b      	str	r3, [r7, #0]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	71fb      	strb	r3, [r7, #7]
 8001d5c:	e02c      	b.n	8001db8 <UART_WaitOnFlagUntilTimeout+0x6c>
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d64:	d028      	beq.n	8001db8 <UART_WaitOnFlagUntilTimeout+0x6c>
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d007      	beq.n	8001d7c <UART_WaitOnFlagUntilTimeout+0x30>
 8001d6c:	f7ff f874 	bl	8000e58 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d21d      	bcs.n	8001db8 <UART_WaitOnFlagUntilTimeout+0x6c>
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68da      	ldr	r2, [r3, #12]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001d8a:	60da      	str	r2, [r3, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	695a      	ldr	r2, [r3, #20]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f022 0201 	bic.w	r2, r2, #1
 8001d9a:	615a      	str	r2, [r3, #20]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2220      	movs	r2, #32
 8001da0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2220      	movs	r2, #32
 8001da8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8001db4:	2303      	movs	r3, #3
 8001db6:	e00f      	b.n	8001dd8 <UART_WaitOnFlagUntilTimeout+0x8c>
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	68ba      	ldr	r2, [r7, #8]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	bf0c      	ite	eq
 8001dc8:	2301      	moveq	r3, #1
 8001dca:	2300      	movne	r3, #0
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	461a      	mov	r2, r3
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d0c3      	beq.n	8001d5e <UART_WaitOnFlagUntilTimeout+0x12>
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <UART_SetConfig>:
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68da      	ldr	r2, [r3, #12]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	611a      	str	r2, [r3, #16]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689a      	ldr	r2, [r3, #8]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	431a      	orrs	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	695b      	ldr	r3, [r3, #20]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001e1a:	f023 030c 	bic.w	r3, r3, #12
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	6812      	ldr	r2, [r2, #0]
 8001e22:	68f9      	ldr	r1, [r7, #12]
 8001e24:	430b      	orrs	r3, r1
 8001e26:	60d3      	str	r3, [r2, #12]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	699a      	ldr	r2, [r3, #24]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	615a      	str	r2, [r3, #20]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a52      	ldr	r2, [pc, #328]	; (8001f8c <UART_SetConfig+0x1ac>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d14e      	bne.n	8001ee6 <UART_SetConfig+0x106>
 8001e48:	f7ff fe68 	bl	8001b1c <HAL_RCC_GetPCLK2Freq>
 8001e4c:	60b8      	str	r0, [r7, #8]
 8001e4e:	68ba      	ldr	r2, [r7, #8]
 8001e50:	4613      	mov	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	009a      	lsls	r2, r3, #2
 8001e58:	441a      	add	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e64:	4a4a      	ldr	r2, [pc, #296]	; (8001f90 <UART_SetConfig+0x1b0>)
 8001e66:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6a:	095b      	lsrs	r3, r3, #5
 8001e6c:	0119      	lsls	r1, r3, #4
 8001e6e:	68ba      	ldr	r2, [r7, #8]
 8001e70:	4613      	mov	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	009a      	lsls	r2, r3, #2
 8001e78:	441a      	add	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e84:	4b42      	ldr	r3, [pc, #264]	; (8001f90 <UART_SetConfig+0x1b0>)
 8001e86:	fba3 0302 	umull	r0, r3, r3, r2
 8001e8a:	095b      	lsrs	r3, r3, #5
 8001e8c:	2064      	movs	r0, #100	; 0x64
 8001e8e:	fb00 f303 	mul.w	r3, r0, r3
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	011b      	lsls	r3, r3, #4
 8001e96:	3332      	adds	r3, #50	; 0x32
 8001e98:	4a3d      	ldr	r2, [pc, #244]	; (8001f90 <UART_SetConfig+0x1b0>)
 8001e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9e:	095b      	lsrs	r3, r3, #5
 8001ea0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ea4:	4419      	add	r1, r3
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	009a      	lsls	r2, r3, #2
 8001eb0:	441a      	add	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ebc:	4b34      	ldr	r3, [pc, #208]	; (8001f90 <UART_SetConfig+0x1b0>)
 8001ebe:	fba3 0302 	umull	r0, r3, r3, r2
 8001ec2:	095b      	lsrs	r3, r3, #5
 8001ec4:	2064      	movs	r0, #100	; 0x64
 8001ec6:	fb00 f303 	mul.w	r3, r0, r3
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	011b      	lsls	r3, r3, #4
 8001ece:	3332      	adds	r3, #50	; 0x32
 8001ed0:	4a2f      	ldr	r2, [pc, #188]	; (8001f90 <UART_SetConfig+0x1b0>)
 8001ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed6:	095b      	lsrs	r3, r3, #5
 8001ed8:	f003 020f 	and.w	r2, r3, #15
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	440a      	add	r2, r1
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	e04d      	b.n	8001f82 <UART_SetConfig+0x1a2>
 8001ee6:	f7ff fe05 	bl	8001af4 <HAL_RCC_GetPCLK1Freq>
 8001eea:	60b8      	str	r0, [r7, #8]
 8001eec:	68ba      	ldr	r2, [r7, #8]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	009a      	lsls	r2, r3, #2
 8001ef6:	441a      	add	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f02:	4a23      	ldr	r2, [pc, #140]	; (8001f90 <UART_SetConfig+0x1b0>)
 8001f04:	fba2 2303 	umull	r2, r3, r2, r3
 8001f08:	095b      	lsrs	r3, r3, #5
 8001f0a:	0119      	lsls	r1, r3, #4
 8001f0c:	68ba      	ldr	r2, [r7, #8]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4413      	add	r3, r2
 8001f14:	009a      	lsls	r2, r3, #2
 8001f16:	441a      	add	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f22:	4b1b      	ldr	r3, [pc, #108]	; (8001f90 <UART_SetConfig+0x1b0>)
 8001f24:	fba3 0302 	umull	r0, r3, r3, r2
 8001f28:	095b      	lsrs	r3, r3, #5
 8001f2a:	2064      	movs	r0, #100	; 0x64
 8001f2c:	fb00 f303 	mul.w	r3, r0, r3
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	011b      	lsls	r3, r3, #4
 8001f34:	3332      	adds	r3, #50	; 0x32
 8001f36:	4a16      	ldr	r2, [pc, #88]	; (8001f90 <UART_SetConfig+0x1b0>)
 8001f38:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3c:	095b      	lsrs	r3, r3, #5
 8001f3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f42:	4419      	add	r1, r3
 8001f44:	68ba      	ldr	r2, [r7, #8]
 8001f46:	4613      	mov	r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4413      	add	r3, r2
 8001f4c:	009a      	lsls	r2, r3, #2
 8001f4e:	441a      	add	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f5a:	4b0d      	ldr	r3, [pc, #52]	; (8001f90 <UART_SetConfig+0x1b0>)
 8001f5c:	fba3 0302 	umull	r0, r3, r3, r2
 8001f60:	095b      	lsrs	r3, r3, #5
 8001f62:	2064      	movs	r0, #100	; 0x64
 8001f64:	fb00 f303 	mul.w	r3, r0, r3
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	011b      	lsls	r3, r3, #4
 8001f6c:	3332      	adds	r3, #50	; 0x32
 8001f6e:	4a08      	ldr	r2, [pc, #32]	; (8001f90 <UART_SetConfig+0x1b0>)
 8001f70:	fba2 2303 	umull	r2, r3, r2, r3
 8001f74:	095b      	lsrs	r3, r3, #5
 8001f76:	f003 020f 	and.w	r2, r3, #15
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	440a      	add	r2, r1
 8001f80:	609a      	str	r2, [r3, #8]
 8001f82:	bf00      	nop
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40013800 	.word	0x40013800
 8001f90:	51eb851f 	.word	0x51eb851f

08001f94 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f9a:	f3ef 8305 	mrs	r3, IPSR
 8001f9e:	60bb      	str	r3, [r7, #8]
  return(result);
 8001fa0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10f      	bne.n	8001fc6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fa6:	f3ef 8310 	mrs	r3, PRIMASK
 8001faa:	607b      	str	r3, [r7, #4]
  return(result);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d109      	bne.n	8001fc6 <osKernelInitialize+0x32>
 8001fb2:	4b10      	ldr	r3, [pc, #64]	; (8001ff4 <osKernelInitialize+0x60>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d109      	bne.n	8001fce <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001fba:	f3ef 8311 	mrs	r3, BASEPRI
 8001fbe:	603b      	str	r3, [r7, #0]
  return(result);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001fc6:	f06f 0305 	mvn.w	r3, #5
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	e00c      	b.n	8001fe8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001fce:	4b09      	ldr	r3, [pc, #36]	; (8001ff4 <osKernelInitialize+0x60>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d105      	bne.n	8001fe2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8001fd6:	4b07      	ldr	r3, [pc, #28]	; (8001ff4 <osKernelInitialize+0x60>)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	e002      	b.n	8001fe8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3714      	adds	r7, #20
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr
 8001ff4:	2000003c 	.word	0x2000003c

08001ff8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ffe:	f3ef 8305 	mrs	r3, IPSR
 8002002:	60bb      	str	r3, [r7, #8]
  return(result);
 8002004:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002006:	2b00      	cmp	r3, #0
 8002008:	d10f      	bne.n	800202a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800200a:	f3ef 8310 	mrs	r3, PRIMASK
 800200e:	607b      	str	r3, [r7, #4]
  return(result);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d109      	bne.n	800202a <osKernelStart+0x32>
 8002016:	4b11      	ldr	r3, [pc, #68]	; (800205c <osKernelStart+0x64>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2b02      	cmp	r3, #2
 800201c:	d109      	bne.n	8002032 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800201e:	f3ef 8311 	mrs	r3, BASEPRI
 8002022:	603b      	str	r3, [r7, #0]
  return(result);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <osKernelStart+0x3a>
    stat = osErrorISR;
 800202a:	f06f 0305 	mvn.w	r3, #5
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	e00e      	b.n	8002050 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002032:	4b0a      	ldr	r3, [pc, #40]	; (800205c <osKernelStart+0x64>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d107      	bne.n	800204a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800203a:	4b08      	ldr	r3, [pc, #32]	; (800205c <osKernelStart+0x64>)
 800203c:	2202      	movs	r2, #2
 800203e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002040:	f001 f862 	bl	8003108 <vTaskStartScheduler>
      stat = osOK;
 8002044:	2300      	movs	r3, #0
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	e002      	b.n	8002050 <osKernelStart+0x58>
    } else {
      stat = osError;
 800204a:	f04f 33ff 	mov.w	r3, #4294967295
 800204e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002050:	68fb      	ldr	r3, [r7, #12]
}
 8002052:	4618      	mov	r0, r3
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	2000003c 	.word	0x2000003c

08002060 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002060:	b580      	push	{r7, lr}
 8002062:	b092      	sub	sp, #72	; 0x48
 8002064:	af04      	add	r7, sp, #16
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002070:	f3ef 8305 	mrs	r3, IPSR
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002076:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002078:	2b00      	cmp	r3, #0
 800207a:	f040 8094 	bne.w	80021a6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800207e:	f3ef 8310 	mrs	r3, PRIMASK
 8002082:	623b      	str	r3, [r7, #32]
  return(result);
 8002084:	6a3b      	ldr	r3, [r7, #32]
 8002086:	2b00      	cmp	r3, #0
 8002088:	f040 808d 	bne.w	80021a6 <osThreadNew+0x146>
 800208c:	4b48      	ldr	r3, [pc, #288]	; (80021b0 <osThreadNew+0x150>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2b02      	cmp	r3, #2
 8002092:	d106      	bne.n	80020a2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002094:	f3ef 8311 	mrs	r3, BASEPRI
 8002098:	61fb      	str	r3, [r7, #28]
  return(result);
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	2b00      	cmp	r3, #0
 800209e:	f040 8082 	bne.w	80021a6 <osThreadNew+0x146>
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d07e      	beq.n	80021a6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80020a8:	2340      	movs	r3, #64	; 0x40
 80020aa:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80020ac:	2318      	movs	r3, #24
 80020ae:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80020b0:	2300      	movs	r3, #0
 80020b2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80020b4:	f107 031b 	add.w	r3, r7, #27
 80020b8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80020ba:	f04f 33ff 	mov.w	r3, #4294967295
 80020be:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d045      	beq.n	8002152 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d002      	beq.n	80020d4 <osThreadNew+0x74>
        name = attr->name;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d002      	beq.n	80020e2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80020e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d008      	beq.n	80020fa <osThreadNew+0x9a>
 80020e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ea:	2b38      	cmp	r3, #56	; 0x38
 80020ec:	d805      	bhi.n	80020fa <osThreadNew+0x9a>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <osThreadNew+0x9e>
        return (NULL);
 80020fa:	2300      	movs	r3, #0
 80020fc:	e054      	b.n	80021a8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	089b      	lsrs	r3, r3, #2
 800210c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00e      	beq.n	8002134 <osThreadNew+0xd4>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	2b5b      	cmp	r3, #91	; 0x5b
 800211c:	d90a      	bls.n	8002134 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002122:	2b00      	cmp	r3, #0
 8002124:	d006      	beq.n	8002134 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d002      	beq.n	8002134 <osThreadNew+0xd4>
        mem = 1;
 800212e:	2301      	movs	r3, #1
 8002130:	62bb      	str	r3, [r7, #40]	; 0x28
 8002132:	e010      	b.n	8002156 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d10c      	bne.n	8002156 <osThreadNew+0xf6>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d108      	bne.n	8002156 <osThreadNew+0xf6>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d104      	bne.n	8002156 <osThreadNew+0xf6>
          mem = 0;
 800214c:	2300      	movs	r3, #0
 800214e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002150:	e001      	b.n	8002156 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002152:	2300      	movs	r3, #0
 8002154:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002158:	2b01      	cmp	r3, #1
 800215a:	d110      	bne.n	800217e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002164:	9202      	str	r2, [sp, #8]
 8002166:	9301      	str	r3, [sp, #4]
 8002168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002170:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002172:	68f8      	ldr	r0, [r7, #12]
 8002174:	f000 fe00 	bl	8002d78 <xTaskCreateStatic>
 8002178:	4603      	mov	r3, r0
 800217a:	617b      	str	r3, [r7, #20]
 800217c:	e013      	b.n	80021a6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800217e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002180:	2b00      	cmp	r3, #0
 8002182:	d110      	bne.n	80021a6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002186:	b29a      	uxth	r2, r3
 8002188:	f107 0314 	add.w	r3, r7, #20
 800218c:	9301      	str	r3, [sp, #4]
 800218e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002190:	9300      	str	r3, [sp, #0]
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f000 fe47 	bl	8002e2a <xTaskCreate>
 800219c:	4603      	mov	r3, r0
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d001      	beq.n	80021a6 <osThreadNew+0x146>
          hTask = NULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80021a6:	697b      	ldr	r3, [r7, #20]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3738      	adds	r7, #56	; 0x38
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	2000003c 	.word	0x2000003c

080021b4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021bc:	f3ef 8305 	mrs	r3, IPSR
 80021c0:	613b      	str	r3, [r7, #16]
  return(result);
 80021c2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d10f      	bne.n	80021e8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021c8:	f3ef 8310 	mrs	r3, PRIMASK
 80021cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d109      	bne.n	80021e8 <osDelay+0x34>
 80021d4:	4b0d      	ldr	r3, [pc, #52]	; (800220c <osDelay+0x58>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d109      	bne.n	80021f0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80021dc:	f3ef 8311 	mrs	r3, BASEPRI
 80021e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d003      	beq.n	80021f0 <osDelay+0x3c>
    stat = osErrorISR;
 80021e8:	f06f 0305 	mvn.w	r3, #5
 80021ec:	617b      	str	r3, [r7, #20]
 80021ee:	e007      	b.n	8002200 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80021f0:	2300      	movs	r3, #0
 80021f2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d002      	beq.n	8002200 <osDelay+0x4c>
      vTaskDelay(ticks);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 ff50 	bl	80030a0 <vTaskDelay>
    }
  }

  return (stat);
 8002200:	697b      	ldr	r3, [r7, #20]
}
 8002202:	4618      	mov	r0, r3
 8002204:	3718      	adds	r7, #24
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	2000003c 	.word	0x2000003c

08002210 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4a06      	ldr	r2, [pc, #24]	; (8002238 <vApplicationGetIdleTaskMemory+0x28>)
 8002220:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	4a05      	ldr	r2, [pc, #20]	; (800223c <vApplicationGetIdleTaskMemory+0x2c>)
 8002226:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2240      	movs	r2, #64	; 0x40
 800222c:	601a      	str	r2, [r3, #0]
}
 800222e:	bf00      	nop
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr
 8002238:	20000040 	.word	0x20000040
 800223c:	2000009c 	.word	0x2000009c

08002240 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4a06      	ldr	r2, [pc, #24]	; (8002268 <vApplicationGetTimerTaskMemory+0x28>)
 8002250:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	4a05      	ldr	r2, [pc, #20]	; (800226c <vApplicationGetTimerTaskMemory+0x2c>)
 8002256:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2280      	movs	r2, #128	; 0x80
 800225c:	601a      	str	r2, [r3, #0]
}
 800225e:	bf00      	nop
 8002260:	3714      	adds	r7, #20
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr
 8002268:	2000019c 	.word	0x2000019c
 800226c:	200001f8 	.word	0x200001f8

08002270 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f103 0208 	add.w	r2, r3, #8
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f04f 32ff 	mov.w	r2, #4294967295
 8002288:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f103 0208 	add.w	r2, r3, #8
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f103 0208 	add.w	r2, r3, #8
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bc80      	pop	{r7}
 80022ac:	4770      	bx	lr

080022ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bc80      	pop	{r7}
 80022c4:	4770      	bx	lr

080022c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80022c6:	b480      	push	{r7}
 80022c8:	b085      	sub	sp, #20
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
 80022ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	1c5a      	adds	r2, r3, #1
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	601a      	str	r2, [r3, #0]
}
 8002302:	bf00      	nop
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	bc80      	pop	{r7}
 800230a:	4770      	bx	lr

0800230c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002322:	d103      	bne.n	800232c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	e00c      	b.n	8002346 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3308      	adds	r3, #8
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	e002      	b.n	800233a <vListInsert+0x2e>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68ba      	ldr	r2, [r7, #8]
 8002342:	429a      	cmp	r2, r3
 8002344:	d2f6      	bcs.n	8002334 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	1c5a      	adds	r2, r3, #1
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	601a      	str	r2, [r3, #0]
}
 8002372:	bf00      	nop
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr

0800237c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	6892      	ldr	r2, [r2, #8]
 8002392:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	6852      	ldr	r2, [r2, #4]
 800239c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d103      	bne.n	80023b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	1e5a      	subs	r2, r3, #1
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3714      	adds	r7, #20
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr
	...

080023d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d109      	bne.n	80023f8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80023e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023e8:	f383 8811 	msr	BASEPRI, r3
 80023ec:	f3bf 8f6f 	isb	sy
 80023f0:	f3bf 8f4f 	dsb	sy
 80023f4:	60bb      	str	r3, [r7, #8]
 80023f6:	e7fe      	b.n	80023f6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80023f8:	f002 f806 	bl	8004408 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002404:	68f9      	ldr	r1, [r7, #12]
 8002406:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002408:	fb01 f303 	mul.w	r3, r1, r3
 800240c:	441a      	add	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002428:	3b01      	subs	r3, #1
 800242a:	68f9      	ldr	r1, [r7, #12]
 800242c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800242e:	fb01 f303 	mul.w	r3, r1, r3
 8002432:	441a      	add	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	22ff      	movs	r2, #255	; 0xff
 800243c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	22ff      	movs	r2, #255	; 0xff
 8002444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d114      	bne.n	8002478 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d01a      	beq.n	800248c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	3310      	adds	r3, #16
 800245a:	4618      	mov	r0, r3
 800245c:	f001 f8d8 	bl	8003610 <xTaskRemoveFromEventList>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d012      	beq.n	800248c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002466:	4b0d      	ldr	r3, [pc, #52]	; (800249c <xQueueGenericReset+0xcc>)
 8002468:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	f3bf 8f4f 	dsb	sy
 8002472:	f3bf 8f6f 	isb	sy
 8002476:	e009      	b.n	800248c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	3310      	adds	r3, #16
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff fef7 	bl	8002270 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	3324      	adds	r3, #36	; 0x24
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff fef2 	bl	8002270 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800248c:	f001 ffea 	bl	8004464 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002490:	2301      	movs	r3, #1
}
 8002492:	4618      	mov	r0, r3
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	e000ed04 	.word	0xe000ed04

080024a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b08e      	sub	sp, #56	; 0x38
 80024a4:	af02      	add	r7, sp, #8
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
 80024ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d109      	bne.n	80024c8 <xQueueGenericCreateStatic+0x28>
 80024b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b8:	f383 8811 	msr	BASEPRI, r3
 80024bc:	f3bf 8f6f 	isb	sy
 80024c0:	f3bf 8f4f 	dsb	sy
 80024c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80024c6:	e7fe      	b.n	80024c6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d109      	bne.n	80024e2 <xQueueGenericCreateStatic+0x42>
 80024ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d2:	f383 8811 	msr	BASEPRI, r3
 80024d6:	f3bf 8f6f 	isb	sy
 80024da:	f3bf 8f4f 	dsb	sy
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
 80024e0:	e7fe      	b.n	80024e0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d002      	beq.n	80024ee <xQueueGenericCreateStatic+0x4e>
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <xQueueGenericCreateStatic+0x52>
 80024ee:	2301      	movs	r3, #1
 80024f0:	e000      	b.n	80024f4 <xQueueGenericCreateStatic+0x54>
 80024f2:	2300      	movs	r3, #0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d109      	bne.n	800250c <xQueueGenericCreateStatic+0x6c>
 80024f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024fc:	f383 8811 	msr	BASEPRI, r3
 8002500:	f3bf 8f6f 	isb	sy
 8002504:	f3bf 8f4f 	dsb	sy
 8002508:	623b      	str	r3, [r7, #32]
 800250a:	e7fe      	b.n	800250a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d102      	bne.n	8002518 <xQueueGenericCreateStatic+0x78>
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <xQueueGenericCreateStatic+0x7c>
 8002518:	2301      	movs	r3, #1
 800251a:	e000      	b.n	800251e <xQueueGenericCreateStatic+0x7e>
 800251c:	2300      	movs	r3, #0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d109      	bne.n	8002536 <xQueueGenericCreateStatic+0x96>
 8002522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002526:	f383 8811 	msr	BASEPRI, r3
 800252a:	f3bf 8f6f 	isb	sy
 800252e:	f3bf 8f4f 	dsb	sy
 8002532:	61fb      	str	r3, [r7, #28]
 8002534:	e7fe      	b.n	8002534 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002536:	2350      	movs	r3, #80	; 0x50
 8002538:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	2b50      	cmp	r3, #80	; 0x50
 800253e:	d009      	beq.n	8002554 <xQueueGenericCreateStatic+0xb4>
 8002540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002544:	f383 8811 	msr	BASEPRI, r3
 8002548:	f3bf 8f6f 	isb	sy
 800254c:	f3bf 8f4f 	dsb	sy
 8002550:	61bb      	str	r3, [r7, #24]
 8002552:	e7fe      	b.n	8002552 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00d      	beq.n	800257a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800255e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002560:	2201      	movs	r2, #1
 8002562:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002566:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800256a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	4613      	mov	r3, r2
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	68b9      	ldr	r1, [r7, #8]
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f000 f805 	bl	8002584 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800257a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800257c:	4618      	mov	r0, r3
 800257e:	3730      	adds	r7, #48	; 0x30
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
 8002590:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d103      	bne.n	80025a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	e002      	b.n	80025a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	68ba      	ldr	r2, [r7, #8]
 80025b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80025b2:	2101      	movs	r1, #1
 80025b4:	69b8      	ldr	r0, [r7, #24]
 80025b6:	f7ff ff0b 	bl	80023d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	78fa      	ldrb	r2, [r7, #3]
 80025be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80025c2:	bf00      	nop
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
	...

080025cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b08e      	sub	sp, #56	; 0x38
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
 80025d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80025da:	2300      	movs	r3, #0
 80025dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80025e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d109      	bne.n	80025fc <xQueueGenericSend+0x30>
 80025e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ec:	f383 8811 	msr	BASEPRI, r3
 80025f0:	f3bf 8f6f 	isb	sy
 80025f4:	f3bf 8f4f 	dsb	sy
 80025f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80025fa:	e7fe      	b.n	80025fa <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d103      	bne.n	800260a <xQueueGenericSend+0x3e>
 8002602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <xQueueGenericSend+0x42>
 800260a:	2301      	movs	r3, #1
 800260c:	e000      	b.n	8002610 <xQueueGenericSend+0x44>
 800260e:	2300      	movs	r3, #0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d109      	bne.n	8002628 <xQueueGenericSend+0x5c>
 8002614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002618:	f383 8811 	msr	BASEPRI, r3
 800261c:	f3bf 8f6f 	isb	sy
 8002620:	f3bf 8f4f 	dsb	sy
 8002624:	627b      	str	r3, [r7, #36]	; 0x24
 8002626:	e7fe      	b.n	8002626 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	2b02      	cmp	r3, #2
 800262c:	d103      	bne.n	8002636 <xQueueGenericSend+0x6a>
 800262e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002632:	2b01      	cmp	r3, #1
 8002634:	d101      	bne.n	800263a <xQueueGenericSend+0x6e>
 8002636:	2301      	movs	r3, #1
 8002638:	e000      	b.n	800263c <xQueueGenericSend+0x70>
 800263a:	2300      	movs	r3, #0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d109      	bne.n	8002654 <xQueueGenericSend+0x88>
 8002640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002644:	f383 8811 	msr	BASEPRI, r3
 8002648:	f3bf 8f6f 	isb	sy
 800264c:	f3bf 8f4f 	dsb	sy
 8002650:	623b      	str	r3, [r7, #32]
 8002652:	e7fe      	b.n	8002652 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002654:	f001 f996 	bl	8003984 <xTaskGetSchedulerState>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d102      	bne.n	8002664 <xQueueGenericSend+0x98>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d101      	bne.n	8002668 <xQueueGenericSend+0x9c>
 8002664:	2301      	movs	r3, #1
 8002666:	e000      	b.n	800266a <xQueueGenericSend+0x9e>
 8002668:	2300      	movs	r3, #0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d109      	bne.n	8002682 <xQueueGenericSend+0xb6>
 800266e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002672:	f383 8811 	msr	BASEPRI, r3
 8002676:	f3bf 8f6f 	isb	sy
 800267a:	f3bf 8f4f 	dsb	sy
 800267e:	61fb      	str	r3, [r7, #28]
 8002680:	e7fe      	b.n	8002680 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002682:	f001 fec1 	bl	8004408 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002688:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800268a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800268e:	429a      	cmp	r2, r3
 8002690:	d302      	bcc.n	8002698 <xQueueGenericSend+0xcc>
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	2b02      	cmp	r3, #2
 8002696:	d129      	bne.n	80026ec <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	68b9      	ldr	r1, [r7, #8]
 800269c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800269e:	f000 f9ff 	bl	8002aa0 <prvCopyDataToQueue>
 80026a2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d010      	beq.n	80026ce <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ae:	3324      	adds	r3, #36	; 0x24
 80026b0:	4618      	mov	r0, r3
 80026b2:	f000 ffad 	bl	8003610 <xTaskRemoveFromEventList>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d013      	beq.n	80026e4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80026bc:	4b3f      	ldr	r3, [pc, #252]	; (80027bc <xQueueGenericSend+0x1f0>)
 80026be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	f3bf 8f4f 	dsb	sy
 80026c8:	f3bf 8f6f 	isb	sy
 80026cc:	e00a      	b.n	80026e4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80026ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d007      	beq.n	80026e4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80026d4:	4b39      	ldr	r3, [pc, #228]	; (80027bc <xQueueGenericSend+0x1f0>)
 80026d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	f3bf 8f4f 	dsb	sy
 80026e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80026e4:	f001 febe 	bl	8004464 <vPortExitCritical>
				return pdPASS;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e063      	b.n	80027b4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d103      	bne.n	80026fa <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80026f2:	f001 feb7 	bl	8004464 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80026f6:	2300      	movs	r3, #0
 80026f8:	e05c      	b.n	80027b4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80026fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d106      	bne.n	800270e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002700:	f107 0314 	add.w	r3, r7, #20
 8002704:	4618      	mov	r0, r3
 8002706:	f000 ffe5 	bl	80036d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800270a:	2301      	movs	r3, #1
 800270c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800270e:	f001 fea9 	bl	8004464 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002712:	f000 fd5d 	bl	80031d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002716:	f001 fe77 	bl	8004408 <vPortEnterCritical>
 800271a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800271c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002720:	b25b      	sxtb	r3, r3
 8002722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002726:	d103      	bne.n	8002730 <xQueueGenericSend+0x164>
 8002728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800272a:	2200      	movs	r2, #0
 800272c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002732:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002736:	b25b      	sxtb	r3, r3
 8002738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800273c:	d103      	bne.n	8002746 <xQueueGenericSend+0x17a>
 800273e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002746:	f001 fe8d 	bl	8004464 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800274a:	1d3a      	adds	r2, r7, #4
 800274c:	f107 0314 	add.w	r3, r7, #20
 8002750:	4611      	mov	r1, r2
 8002752:	4618      	mov	r0, r3
 8002754:	f000 ffd4 	bl	8003700 <xTaskCheckForTimeOut>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d124      	bne.n	80027a8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800275e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002760:	f000 fa96 	bl	8002c90 <prvIsQueueFull>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d018      	beq.n	800279c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800276a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800276c:	3310      	adds	r3, #16
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	4611      	mov	r1, r2
 8002772:	4618      	mov	r0, r3
 8002774:	f000 fefe 	bl	8003574 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002778:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800277a:	f000 fa21 	bl	8002bc0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800277e:	f000 fd35 	bl	80031ec <xTaskResumeAll>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	f47f af7c 	bne.w	8002682 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800278a:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <xQueueGenericSend+0x1f0>)
 800278c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	f3bf 8f4f 	dsb	sy
 8002796:	f3bf 8f6f 	isb	sy
 800279a:	e772      	b.n	8002682 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800279c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800279e:	f000 fa0f 	bl	8002bc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80027a2:	f000 fd23 	bl	80031ec <xTaskResumeAll>
 80027a6:	e76c      	b.n	8002682 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80027a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027aa:	f000 fa09 	bl	8002bc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80027ae:	f000 fd1d 	bl	80031ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80027b2:	2300      	movs	r3, #0
		}
	}
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3738      	adds	r7, #56	; 0x38
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	e000ed04 	.word	0xe000ed04

080027c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b08e      	sub	sp, #56	; 0x38
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]
 80027cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80027d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d109      	bne.n	80027ec <xQueueGenericSendFromISR+0x2c>
 80027d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027dc:	f383 8811 	msr	BASEPRI, r3
 80027e0:	f3bf 8f6f 	isb	sy
 80027e4:	f3bf 8f4f 	dsb	sy
 80027e8:	627b      	str	r3, [r7, #36]	; 0x24
 80027ea:	e7fe      	b.n	80027ea <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d103      	bne.n	80027fa <xQueueGenericSendFromISR+0x3a>
 80027f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <xQueueGenericSendFromISR+0x3e>
 80027fa:	2301      	movs	r3, #1
 80027fc:	e000      	b.n	8002800 <xQueueGenericSendFromISR+0x40>
 80027fe:	2300      	movs	r3, #0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d109      	bne.n	8002818 <xQueueGenericSendFromISR+0x58>
 8002804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002808:	f383 8811 	msr	BASEPRI, r3
 800280c:	f3bf 8f6f 	isb	sy
 8002810:	f3bf 8f4f 	dsb	sy
 8002814:	623b      	str	r3, [r7, #32]
 8002816:	e7fe      	b.n	8002816 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	2b02      	cmp	r3, #2
 800281c:	d103      	bne.n	8002826 <xQueueGenericSendFromISR+0x66>
 800281e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002822:	2b01      	cmp	r3, #1
 8002824:	d101      	bne.n	800282a <xQueueGenericSendFromISR+0x6a>
 8002826:	2301      	movs	r3, #1
 8002828:	e000      	b.n	800282c <xQueueGenericSendFromISR+0x6c>
 800282a:	2300      	movs	r3, #0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d109      	bne.n	8002844 <xQueueGenericSendFromISR+0x84>
 8002830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002834:	f383 8811 	msr	BASEPRI, r3
 8002838:	f3bf 8f6f 	isb	sy
 800283c:	f3bf 8f4f 	dsb	sy
 8002840:	61fb      	str	r3, [r7, #28]
 8002842:	e7fe      	b.n	8002842 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002844:	f001 fe9a 	bl	800457c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002848:	f3ef 8211 	mrs	r2, BASEPRI
 800284c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002850:	f383 8811 	msr	BASEPRI, r3
 8002854:	f3bf 8f6f 	isb	sy
 8002858:	f3bf 8f4f 	dsb	sy
 800285c:	61ba      	str	r2, [r7, #24]
 800285e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002860:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002862:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002866:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800286a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800286c:	429a      	cmp	r2, r3
 800286e:	d302      	bcc.n	8002876 <xQueueGenericSendFromISR+0xb6>
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	2b02      	cmp	r3, #2
 8002874:	d12c      	bne.n	80028d0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002878:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800287c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	68b9      	ldr	r1, [r7, #8]
 8002884:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002886:	f000 f90b 	bl	8002aa0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800288a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800288e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002892:	d112      	bne.n	80028ba <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002898:	2b00      	cmp	r3, #0
 800289a:	d016      	beq.n	80028ca <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800289c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289e:	3324      	adds	r3, #36	; 0x24
 80028a0:	4618      	mov	r0, r3
 80028a2:	f000 feb5 	bl	8003610 <xTaskRemoveFromEventList>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00e      	beq.n	80028ca <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00b      	beq.n	80028ca <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	e007      	b.n	80028ca <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80028ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80028be:	3301      	adds	r3, #1
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	b25a      	sxtb	r2, r3
 80028c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80028ca:	2301      	movs	r3, #1
 80028cc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80028ce:	e001      	b.n	80028d4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	637b      	str	r3, [r7, #52]	; 0x34
 80028d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80028de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3738      	adds	r7, #56	; 0x38
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b08c      	sub	sp, #48	; 0x30
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80028f4:	2300      	movs	r3, #0
 80028f6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80028fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d109      	bne.n	8002916 <xQueueReceive+0x2e>
	__asm volatile
 8002902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002906:	f383 8811 	msr	BASEPRI, r3
 800290a:	f3bf 8f6f 	isb	sy
 800290e:	f3bf 8f4f 	dsb	sy
 8002912:	623b      	str	r3, [r7, #32]
 8002914:	e7fe      	b.n	8002914 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d103      	bne.n	8002924 <xQueueReceive+0x3c>
 800291c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <xQueueReceive+0x40>
 8002924:	2301      	movs	r3, #1
 8002926:	e000      	b.n	800292a <xQueueReceive+0x42>
 8002928:	2300      	movs	r3, #0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d109      	bne.n	8002942 <xQueueReceive+0x5a>
 800292e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002932:	f383 8811 	msr	BASEPRI, r3
 8002936:	f3bf 8f6f 	isb	sy
 800293a:	f3bf 8f4f 	dsb	sy
 800293e:	61fb      	str	r3, [r7, #28]
 8002940:	e7fe      	b.n	8002940 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002942:	f001 f81f 	bl	8003984 <xTaskGetSchedulerState>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d102      	bne.n	8002952 <xQueueReceive+0x6a>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <xQueueReceive+0x6e>
 8002952:	2301      	movs	r3, #1
 8002954:	e000      	b.n	8002958 <xQueueReceive+0x70>
 8002956:	2300      	movs	r3, #0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d109      	bne.n	8002970 <xQueueReceive+0x88>
 800295c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002960:	f383 8811 	msr	BASEPRI, r3
 8002964:	f3bf 8f6f 	isb	sy
 8002968:	f3bf 8f4f 	dsb	sy
 800296c:	61bb      	str	r3, [r7, #24]
 800296e:	e7fe      	b.n	800296e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002970:	f001 fd4a 	bl	8004408 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002978:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	2b00      	cmp	r3, #0
 800297e:	d01f      	beq.n	80029c0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002980:	68b9      	ldr	r1, [r7, #8]
 8002982:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002984:	f000 f8f6 	bl	8002b74 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298a:	1e5a      	subs	r2, r3, #1
 800298c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d00f      	beq.n	80029b8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800299a:	3310      	adds	r3, #16
 800299c:	4618      	mov	r0, r3
 800299e:	f000 fe37 	bl	8003610 <xTaskRemoveFromEventList>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d007      	beq.n	80029b8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80029a8:	4b3c      	ldr	r3, [pc, #240]	; (8002a9c <xQueueReceive+0x1b4>)
 80029aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	f3bf 8f4f 	dsb	sy
 80029b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80029b8:	f001 fd54 	bl	8004464 <vPortExitCritical>
				return pdPASS;
 80029bc:	2301      	movs	r3, #1
 80029be:	e069      	b.n	8002a94 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d103      	bne.n	80029ce <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80029c6:	f001 fd4d 	bl	8004464 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80029ca:	2300      	movs	r3, #0
 80029cc:	e062      	b.n	8002a94 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80029ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d106      	bne.n	80029e2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80029d4:	f107 0310 	add.w	r3, r7, #16
 80029d8:	4618      	mov	r0, r3
 80029da:	f000 fe7b 	bl	80036d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80029de:	2301      	movs	r3, #1
 80029e0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80029e2:	f001 fd3f 	bl	8004464 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80029e6:	f000 fbf3 	bl	80031d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80029ea:	f001 fd0d 	bl	8004408 <vPortEnterCritical>
 80029ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029f4:	b25b      	sxtb	r3, r3
 80029f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029fa:	d103      	bne.n	8002a04 <xQueueReceive+0x11c>
 80029fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a0a:	b25b      	sxtb	r3, r3
 8002a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a10:	d103      	bne.n	8002a1a <xQueueReceive+0x132>
 8002a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a1a:	f001 fd23 	bl	8004464 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a1e:	1d3a      	adds	r2, r7, #4
 8002a20:	f107 0310 	add.w	r3, r7, #16
 8002a24:	4611      	mov	r1, r2
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 fe6a 	bl	8003700 <xTaskCheckForTimeOut>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d123      	bne.n	8002a7a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a34:	f000 f916 	bl	8002c64 <prvIsQueueEmpty>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d017      	beq.n	8002a6e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a40:	3324      	adds	r3, #36	; 0x24
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	4611      	mov	r1, r2
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 fd94 	bl	8003574 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002a4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a4e:	f000 f8b7 	bl	8002bc0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002a52:	f000 fbcb 	bl	80031ec <xTaskResumeAll>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d189      	bne.n	8002970 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8002a5c:	4b0f      	ldr	r3, [pc, #60]	; (8002a9c <xQueueReceive+0x1b4>)
 8002a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	f3bf 8f4f 	dsb	sy
 8002a68:	f3bf 8f6f 	isb	sy
 8002a6c:	e780      	b.n	8002970 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002a6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a70:	f000 f8a6 	bl	8002bc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002a74:	f000 fbba 	bl	80031ec <xTaskResumeAll>
 8002a78:	e77a      	b.n	8002970 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002a7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a7c:	f000 f8a0 	bl	8002bc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002a80:	f000 fbb4 	bl	80031ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a86:	f000 f8ed 	bl	8002c64 <prvIsQueueEmpty>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f43f af6f 	beq.w	8002970 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002a92:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3730      	adds	r7, #48	; 0x30
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	e000ed04 	.word	0xe000ed04

08002aa0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002aac:	2300      	movs	r3, #0
 8002aae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10d      	bne.n	8002ada <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d14d      	bne.n	8002b62 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f000 ff78 	bl	80039c0 <xTaskPriorityDisinherit>
 8002ad0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	605a      	str	r2, [r3, #4]
 8002ad8:	e043      	b.n	8002b62 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d119      	bne.n	8002b14 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6898      	ldr	r0, [r3, #8]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae8:	461a      	mov	r2, r3
 8002aea:	68b9      	ldr	r1, [r7, #8]
 8002aec:	f001 ff94 	bl	8004a18 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af8:	441a      	add	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	689a      	ldr	r2, [r3, #8]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d32b      	bcc.n	8002b62 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	609a      	str	r2, [r3, #8]
 8002b12:	e026      	b.n	8002b62 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	68d8      	ldr	r0, [r3, #12]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	68b9      	ldr	r1, [r7, #8]
 8002b20:	f001 ff7a 	bl	8004a18 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	68da      	ldr	r2, [r3, #12]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2c:	425b      	negs	r3, r3
 8002b2e:	441a      	add	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	68da      	ldr	r2, [r3, #12]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d207      	bcs.n	8002b50 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b48:	425b      	negs	r3, r3
 8002b4a:	441a      	add	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d105      	bne.n	8002b62 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d002      	beq.n	8002b62 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1c5a      	adds	r2, r3, #1
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002b6a:	697b      	ldr	r3, [r7, #20]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d018      	beq.n	8002bb8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68da      	ldr	r2, [r3, #12]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	441a      	add	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68da      	ldr	r2, [r3, #12]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d303      	bcc.n	8002ba8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68d9      	ldr	r1, [r3, #12]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	6838      	ldr	r0, [r7, #0]
 8002bb4:	f001 ff30 	bl	8004a18 <memcpy>
	}
}
 8002bb8:	bf00      	nop
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002bc8:	f001 fc1e 	bl	8004408 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bd2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002bd4:	e011      	b.n	8002bfa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d012      	beq.n	8002c04 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	3324      	adds	r3, #36	; 0x24
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 fd14 	bl	8003610 <xTaskRemoveFromEventList>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002bee:	f000 fde7 	bl	80037c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002bf2:	7bfb      	ldrb	r3, [r7, #15]
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	dce9      	bgt.n	8002bd6 <prvUnlockQueue+0x16>
 8002c02:	e000      	b.n	8002c06 <prvUnlockQueue+0x46>
					break;
 8002c04:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	22ff      	movs	r2, #255	; 0xff
 8002c0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002c0e:	f001 fc29 	bl	8004464 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002c12:	f001 fbf9 	bl	8004408 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c1c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c1e:	e011      	b.n	8002c44 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d012      	beq.n	8002c4e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	3310      	adds	r3, #16
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f000 fcef 	bl	8003610 <xTaskRemoveFromEventList>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002c38:	f000 fdc2 	bl	80037c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002c3c:	7bbb      	ldrb	r3, [r7, #14]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	dce9      	bgt.n	8002c20 <prvUnlockQueue+0x60>
 8002c4c:	e000      	b.n	8002c50 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002c4e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	22ff      	movs	r2, #255	; 0xff
 8002c54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002c58:	f001 fc04 	bl	8004464 <vPortExitCritical>
}
 8002c5c:	bf00      	nop
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002c6c:	f001 fbcc 	bl	8004408 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d102      	bne.n	8002c7e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	e001      	b.n	8002c82 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002c82:	f001 fbef 	bl	8004464 <vPortExitCritical>

	return xReturn;
 8002c86:	68fb      	ldr	r3, [r7, #12]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002c98:	f001 fbb6 	bl	8004408 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d102      	bne.n	8002cae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	e001      	b.n	8002cb2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002cb2:	f001 fbd7 	bl	8004464 <vPortExitCritical>

	return xReturn;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3710      	adds	r7, #16
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60fb      	str	r3, [r7, #12]
 8002cce:	e014      	b.n	8002cfa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002cd0:	4a0e      	ldr	r2, [pc, #56]	; (8002d0c <vQueueAddToRegistry+0x4c>)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d10b      	bne.n	8002cf4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002cdc:	490b      	ldr	r1, [pc, #44]	; (8002d0c <vQueueAddToRegistry+0x4c>)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002ce6:	4a09      	ldr	r2, [pc, #36]	; (8002d0c <vQueueAddToRegistry+0x4c>)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	4413      	add	r3, r2
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002cf2:	e005      	b.n	8002d00 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2b07      	cmp	r3, #7
 8002cfe:	d9e7      	bls.n	8002cd0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002d00:	bf00      	nop
 8002d02:	3714      	adds	r7, #20
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bc80      	pop	{r7}
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	20001aa4 	.word	0x20001aa4

08002d10 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002d20:	f001 fb72 	bl	8004408 <vPortEnterCritical>
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d2a:	b25b      	sxtb	r3, r3
 8002d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d30:	d103      	bne.n	8002d3a <vQueueWaitForMessageRestricted+0x2a>
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d40:	b25b      	sxtb	r3, r3
 8002d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d46:	d103      	bne.n	8002d50 <vQueueWaitForMessageRestricted+0x40>
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d50:	f001 fb88 	bl	8004464 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d106      	bne.n	8002d6a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	3324      	adds	r3, #36	; 0x24
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	68b9      	ldr	r1, [r7, #8]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f000 fc29 	bl	80035bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002d6a:	6978      	ldr	r0, [r7, #20]
 8002d6c:	f7ff ff28 	bl	8002bc0 <prvUnlockQueue>
	}
 8002d70:	bf00      	nop
 8002d72:	3718      	adds	r7, #24
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b08e      	sub	sp, #56	; 0x38
 8002d7c:	af04      	add	r7, sp, #16
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
 8002d84:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d109      	bne.n	8002da0 <xTaskCreateStatic+0x28>
 8002d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d90:	f383 8811 	msr	BASEPRI, r3
 8002d94:	f3bf 8f6f 	isb	sy
 8002d98:	f3bf 8f4f 	dsb	sy
 8002d9c:	623b      	str	r3, [r7, #32]
 8002d9e:	e7fe      	b.n	8002d9e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d109      	bne.n	8002dba <xTaskCreateStatic+0x42>
 8002da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002daa:	f383 8811 	msr	BASEPRI, r3
 8002dae:	f3bf 8f6f 	isb	sy
 8002db2:	f3bf 8f4f 	dsb	sy
 8002db6:	61fb      	str	r3, [r7, #28]
 8002db8:	e7fe      	b.n	8002db8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002dba:	235c      	movs	r3, #92	; 0x5c
 8002dbc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	2b5c      	cmp	r3, #92	; 0x5c
 8002dc2:	d009      	beq.n	8002dd8 <xTaskCreateStatic+0x60>
 8002dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc8:	f383 8811 	msr	BASEPRI, r3
 8002dcc:	f3bf 8f6f 	isb	sy
 8002dd0:	f3bf 8f4f 	dsb	sy
 8002dd4:	61bb      	str	r3, [r7, #24]
 8002dd6:	e7fe      	b.n	8002dd6 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d01e      	beq.n	8002e1c <xTaskCreateStatic+0xa4>
 8002dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d01b      	beq.n	8002e1c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002dec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	2202      	movs	r2, #2
 8002df2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002df6:	2300      	movs	r3, #0
 8002df8:	9303      	str	r3, [sp, #12]
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfc:	9302      	str	r3, [sp, #8]
 8002dfe:	f107 0314 	add.w	r3, r7, #20
 8002e02:	9301      	str	r3, [sp, #4]
 8002e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	68b9      	ldr	r1, [r7, #8]
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f000 f850 	bl	8002eb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e16:	f000 f8d3 	bl	8002fc0 <prvAddNewTaskToReadyList>
 8002e1a:	e001      	b.n	8002e20 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002e20:	697b      	ldr	r3, [r7, #20]
	}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3728      	adds	r7, #40	; 0x28
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b08c      	sub	sp, #48	; 0x30
 8002e2e:	af04      	add	r7, sp, #16
 8002e30:	60f8      	str	r0, [r7, #12]
 8002e32:	60b9      	str	r1, [r7, #8]
 8002e34:	603b      	str	r3, [r7, #0]
 8002e36:	4613      	mov	r3, r2
 8002e38:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e3a:	88fb      	ldrh	r3, [r7, #6]
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f001 fbd8 	bl	80045f4 <pvPortMalloc>
 8002e44:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00e      	beq.n	8002e6a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002e4c:	205c      	movs	r0, #92	; 0x5c
 8002e4e:	f001 fbd1 	bl	80045f4 <pvPortMalloc>
 8002e52:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	631a      	str	r2, [r3, #48]	; 0x30
 8002e60:	e005      	b.n	8002e6e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002e62:	6978      	ldr	r0, [r7, #20]
 8002e64:	f001 fc88 	bl	8004778 <vPortFree>
 8002e68:	e001      	b.n	8002e6e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d017      	beq.n	8002ea4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e7c:	88fa      	ldrh	r2, [r7, #6]
 8002e7e:	2300      	movs	r3, #0
 8002e80:	9303      	str	r3, [sp, #12]
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	9302      	str	r3, [sp, #8]
 8002e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e88:	9301      	str	r3, [sp, #4]
 8002e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	68b9      	ldr	r1, [r7, #8]
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f000 f80e 	bl	8002eb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e98:	69f8      	ldr	r0, [r7, #28]
 8002e9a:	f000 f891 	bl	8002fc0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	61bb      	str	r3, [r7, #24]
 8002ea2:	e002      	b.n	8002eaa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002eaa:	69bb      	ldr	r3, [r7, #24]
	}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3720      	adds	r7, #32
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b088      	sub	sp, #32
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
 8002ec0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	461a      	mov	r2, r3
 8002ecc:	21a5      	movs	r1, #165	; 0xa5
 8002ece:	f001 fdae 	bl	8004a2e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002edc:	3b01      	subs	r3, #1
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4413      	add	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	f023 0307 	bic.w	r3, r3, #7
 8002eea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	f003 0307 	and.w	r3, r3, #7
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d009      	beq.n	8002f0a <prvInitialiseNewTask+0x56>
 8002ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002efa:	f383 8811 	msr	BASEPRI, r3
 8002efe:	f3bf 8f6f 	isb	sy
 8002f02:	f3bf 8f4f 	dsb	sy
 8002f06:	617b      	str	r3, [r7, #20]
 8002f08:	e7fe      	b.n	8002f08 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61fb      	str	r3, [r7, #28]
 8002f0e:	e012      	b.n	8002f36 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	4413      	add	r3, r2
 8002f16:	7819      	ldrb	r1, [r3, #0]
 8002f18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	3334      	adds	r3, #52	; 0x34
 8002f20:	460a      	mov	r2, r1
 8002f22:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002f24:	68ba      	ldr	r2, [r7, #8]
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	4413      	add	r3, r2
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d006      	beq.n	8002f3e <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	3301      	adds	r3, #1
 8002f34:	61fb      	str	r3, [r7, #28]
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	2b0f      	cmp	r3, #15
 8002f3a:	d9e9      	bls.n	8002f10 <prvInitialiseNewTask+0x5c>
 8002f3c:	e000      	b.n	8002f40 <prvInitialiseNewTask+0x8c>
		{
			break;
 8002f3e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f4a:	2b37      	cmp	r3, #55	; 0x37
 8002f4c:	d901      	bls.n	8002f52 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f4e:	2337      	movs	r3, #55	; 0x37
 8002f50:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f56:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f5c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f60:	2200      	movs	r2, #0
 8002f62:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f66:	3304      	adds	r3, #4
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff f9a0 	bl	80022ae <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f70:	3318      	adds	r3, #24
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff f99b 	bl	80022ae <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f7c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f80:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f86:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f8c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f90:	2200      	movs	r2, #0
 8002f92:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	68f9      	ldr	r1, [r7, #12]
 8002fa0:	69b8      	ldr	r0, [r7, #24]
 8002fa2:	f001 f949 	bl	8004238 <pxPortInitialiseStack>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002faa:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d002      	beq.n	8002fb8 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fb6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002fb8:	bf00      	nop
 8002fba:	3720      	adds	r7, #32
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002fc8:	f001 fa1e 	bl	8004408 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002fcc:	4b2d      	ldr	r3, [pc, #180]	; (8003084 <prvAddNewTaskToReadyList+0xc4>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	4a2c      	ldr	r2, [pc, #176]	; (8003084 <prvAddNewTaskToReadyList+0xc4>)
 8002fd4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002fd6:	4b2c      	ldr	r3, [pc, #176]	; (8003088 <prvAddNewTaskToReadyList+0xc8>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d109      	bne.n	8002ff2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002fde:	4a2a      	ldr	r2, [pc, #168]	; (8003088 <prvAddNewTaskToReadyList+0xc8>)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002fe4:	4b27      	ldr	r3, [pc, #156]	; (8003084 <prvAddNewTaskToReadyList+0xc4>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d110      	bne.n	800300e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002fec:	f000 fc0c 	bl	8003808 <prvInitialiseTaskLists>
 8002ff0:	e00d      	b.n	800300e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002ff2:	4b26      	ldr	r3, [pc, #152]	; (800308c <prvAddNewTaskToReadyList+0xcc>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d109      	bne.n	800300e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002ffa:	4b23      	ldr	r3, [pc, #140]	; (8003088 <prvAddNewTaskToReadyList+0xc8>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003004:	429a      	cmp	r2, r3
 8003006:	d802      	bhi.n	800300e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003008:	4a1f      	ldr	r2, [pc, #124]	; (8003088 <prvAddNewTaskToReadyList+0xc8>)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800300e:	4b20      	ldr	r3, [pc, #128]	; (8003090 <prvAddNewTaskToReadyList+0xd0>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	3301      	adds	r3, #1
 8003014:	4a1e      	ldr	r2, [pc, #120]	; (8003090 <prvAddNewTaskToReadyList+0xd0>)
 8003016:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003018:	4b1d      	ldr	r3, [pc, #116]	; (8003090 <prvAddNewTaskToReadyList+0xd0>)
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003024:	4b1b      	ldr	r3, [pc, #108]	; (8003094 <prvAddNewTaskToReadyList+0xd4>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	429a      	cmp	r2, r3
 800302a:	d903      	bls.n	8003034 <prvAddNewTaskToReadyList+0x74>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003030:	4a18      	ldr	r2, [pc, #96]	; (8003094 <prvAddNewTaskToReadyList+0xd4>)
 8003032:	6013      	str	r3, [r2, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003038:	4613      	mov	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4a15      	ldr	r2, [pc, #84]	; (8003098 <prvAddNewTaskToReadyList+0xd8>)
 8003042:	441a      	add	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3304      	adds	r3, #4
 8003048:	4619      	mov	r1, r3
 800304a:	4610      	mov	r0, r2
 800304c:	f7ff f93b 	bl	80022c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003050:	f001 fa08 	bl	8004464 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003054:	4b0d      	ldr	r3, [pc, #52]	; (800308c <prvAddNewTaskToReadyList+0xcc>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00e      	beq.n	800307a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800305c:	4b0a      	ldr	r3, [pc, #40]	; (8003088 <prvAddNewTaskToReadyList+0xc8>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003066:	429a      	cmp	r2, r3
 8003068:	d207      	bcs.n	800307a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800306a:	4b0c      	ldr	r3, [pc, #48]	; (800309c <prvAddNewTaskToReadyList+0xdc>)
 800306c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	f3bf 8f4f 	dsb	sy
 8003076:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800307a:	bf00      	nop
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	200008cc 	.word	0x200008cc
 8003088:	200003f8 	.word	0x200003f8
 800308c:	200008d8 	.word	0x200008d8
 8003090:	200008e8 	.word	0x200008e8
 8003094:	200008d4 	.word	0x200008d4
 8003098:	200003fc 	.word	0x200003fc
 800309c:	e000ed04 	.word	0xe000ed04

080030a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80030a8:	2300      	movs	r3, #0
 80030aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d016      	beq.n	80030e0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80030b2:	4b13      	ldr	r3, [pc, #76]	; (8003100 <vTaskDelay+0x60>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d009      	beq.n	80030ce <vTaskDelay+0x2e>
 80030ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030be:	f383 8811 	msr	BASEPRI, r3
 80030c2:	f3bf 8f6f 	isb	sy
 80030c6:	f3bf 8f4f 	dsb	sy
 80030ca:	60bb      	str	r3, [r7, #8]
 80030cc:	e7fe      	b.n	80030cc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80030ce:	f000 f87f 	bl	80031d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80030d2:	2100      	movs	r1, #0
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 fcdf 	bl	8003a98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80030da:	f000 f887 	bl	80031ec <xTaskResumeAll>
 80030de:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d107      	bne.n	80030f6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80030e6:	4b07      	ldr	r3, [pc, #28]	; (8003104 <vTaskDelay+0x64>)
 80030e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030ec:	601a      	str	r2, [r3, #0]
 80030ee:	f3bf 8f4f 	dsb	sy
 80030f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80030f6:	bf00      	nop
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	200008f4 	.word	0x200008f4
 8003104:	e000ed04 	.word	0xe000ed04

08003108 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b08a      	sub	sp, #40	; 0x28
 800310c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800310e:	2300      	movs	r3, #0
 8003110:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003112:	2300      	movs	r3, #0
 8003114:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003116:	463a      	mov	r2, r7
 8003118:	1d39      	adds	r1, r7, #4
 800311a:	f107 0308 	add.w	r3, r7, #8
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff f876 	bl	8002210 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003124:	6839      	ldr	r1, [r7, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	9202      	str	r2, [sp, #8]
 800312c:	9301      	str	r3, [sp, #4]
 800312e:	2300      	movs	r3, #0
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	2300      	movs	r3, #0
 8003134:	460a      	mov	r2, r1
 8003136:	4920      	ldr	r1, [pc, #128]	; (80031b8 <vTaskStartScheduler+0xb0>)
 8003138:	4820      	ldr	r0, [pc, #128]	; (80031bc <vTaskStartScheduler+0xb4>)
 800313a:	f7ff fe1d 	bl	8002d78 <xTaskCreateStatic>
 800313e:	4602      	mov	r2, r0
 8003140:	4b1f      	ldr	r3, [pc, #124]	; (80031c0 <vTaskStartScheduler+0xb8>)
 8003142:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003144:	4b1e      	ldr	r3, [pc, #120]	; (80031c0 <vTaskStartScheduler+0xb8>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d002      	beq.n	8003152 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800314c:	2301      	movs	r3, #1
 800314e:	617b      	str	r3, [r7, #20]
 8003150:	e001      	b.n	8003156 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003152:	2300      	movs	r3, #0
 8003154:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d102      	bne.n	8003162 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800315c:	f000 fcf0 	bl	8003b40 <xTimerCreateTimerTask>
 8003160:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d115      	bne.n	8003194 <vTaskStartScheduler+0x8c>
 8003168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800316c:	f383 8811 	msr	BASEPRI, r3
 8003170:	f3bf 8f6f 	isb	sy
 8003174:	f3bf 8f4f 	dsb	sy
 8003178:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800317a:	4b12      	ldr	r3, [pc, #72]	; (80031c4 <vTaskStartScheduler+0xbc>)
 800317c:	f04f 32ff 	mov.w	r2, #4294967295
 8003180:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003182:	4b11      	ldr	r3, [pc, #68]	; (80031c8 <vTaskStartScheduler+0xc0>)
 8003184:	2201      	movs	r2, #1
 8003186:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003188:	4b10      	ldr	r3, [pc, #64]	; (80031cc <vTaskStartScheduler+0xc4>)
 800318a:	2200      	movs	r2, #0
 800318c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800318e:	f001 f8cb 	bl	8004328 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003192:	e00d      	b.n	80031b0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319a:	d109      	bne.n	80031b0 <vTaskStartScheduler+0xa8>
 800319c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a0:	f383 8811 	msr	BASEPRI, r3
 80031a4:	f3bf 8f6f 	isb	sy
 80031a8:	f3bf 8f4f 	dsb	sy
 80031ac:	60fb      	str	r3, [r7, #12]
 80031ae:	e7fe      	b.n	80031ae <vTaskStartScheduler+0xa6>
}
 80031b0:	bf00      	nop
 80031b2:	3718      	adds	r7, #24
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	08004c7c 	.word	0x08004c7c
 80031bc:	080037d9 	.word	0x080037d9
 80031c0:	200008f0 	.word	0x200008f0
 80031c4:	200008ec 	.word	0x200008ec
 80031c8:	200008d8 	.word	0x200008d8
 80031cc:	200008d0 	.word	0x200008d0

080031d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80031d4:	4b04      	ldr	r3, [pc, #16]	; (80031e8 <vTaskSuspendAll+0x18>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	3301      	adds	r3, #1
 80031da:	4a03      	ldr	r2, [pc, #12]	; (80031e8 <vTaskSuspendAll+0x18>)
 80031dc:	6013      	str	r3, [r2, #0]
}
 80031de:	bf00      	nop
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bc80      	pop	{r7}
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	200008f4 	.word	0x200008f4

080031ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80031f2:	2300      	movs	r3, #0
 80031f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80031f6:	2300      	movs	r3, #0
 80031f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80031fa:	4b41      	ldr	r3, [pc, #260]	; (8003300 <xTaskResumeAll+0x114>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d109      	bne.n	8003216 <xTaskResumeAll+0x2a>
 8003202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003206:	f383 8811 	msr	BASEPRI, r3
 800320a:	f3bf 8f6f 	isb	sy
 800320e:	f3bf 8f4f 	dsb	sy
 8003212:	603b      	str	r3, [r7, #0]
 8003214:	e7fe      	b.n	8003214 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003216:	f001 f8f7 	bl	8004408 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800321a:	4b39      	ldr	r3, [pc, #228]	; (8003300 <xTaskResumeAll+0x114>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	3b01      	subs	r3, #1
 8003220:	4a37      	ldr	r2, [pc, #220]	; (8003300 <xTaskResumeAll+0x114>)
 8003222:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003224:	4b36      	ldr	r3, [pc, #216]	; (8003300 <xTaskResumeAll+0x114>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d162      	bne.n	80032f2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800322c:	4b35      	ldr	r3, [pc, #212]	; (8003304 <xTaskResumeAll+0x118>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d05e      	beq.n	80032f2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003234:	e02f      	b.n	8003296 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003236:	4b34      	ldr	r3, [pc, #208]	; (8003308 <xTaskResumeAll+0x11c>)
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	3318      	adds	r3, #24
 8003242:	4618      	mov	r0, r3
 8003244:	f7ff f89a 	bl	800237c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	3304      	adds	r3, #4
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff f895 	bl	800237c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003256:	4b2d      	ldr	r3, [pc, #180]	; (800330c <xTaskResumeAll+0x120>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	429a      	cmp	r2, r3
 800325c:	d903      	bls.n	8003266 <xTaskResumeAll+0x7a>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003262:	4a2a      	ldr	r2, [pc, #168]	; (800330c <xTaskResumeAll+0x120>)
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800326a:	4613      	mov	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4a27      	ldr	r2, [pc, #156]	; (8003310 <xTaskResumeAll+0x124>)
 8003274:	441a      	add	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	3304      	adds	r3, #4
 800327a:	4619      	mov	r1, r3
 800327c:	4610      	mov	r0, r2
 800327e:	f7ff f822 	bl	80022c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003286:	4b23      	ldr	r3, [pc, #140]	; (8003314 <xTaskResumeAll+0x128>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328c:	429a      	cmp	r2, r3
 800328e:	d302      	bcc.n	8003296 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003290:	4b21      	ldr	r3, [pc, #132]	; (8003318 <xTaskResumeAll+0x12c>)
 8003292:	2201      	movs	r2, #1
 8003294:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003296:	4b1c      	ldr	r3, [pc, #112]	; (8003308 <xTaskResumeAll+0x11c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1cb      	bne.n	8003236 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80032a4:	f000 fb4a 	bl	800393c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80032a8:	4b1c      	ldr	r3, [pc, #112]	; (800331c <xTaskResumeAll+0x130>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d010      	beq.n	80032d6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80032b4:	f000 f844 	bl	8003340 <xTaskIncrementTick>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d002      	beq.n	80032c4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80032be:	4b16      	ldr	r3, [pc, #88]	; (8003318 <xTaskResumeAll+0x12c>)
 80032c0:	2201      	movs	r2, #1
 80032c2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	3b01      	subs	r3, #1
 80032c8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1f1      	bne.n	80032b4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80032d0:	4b12      	ldr	r3, [pc, #72]	; (800331c <xTaskResumeAll+0x130>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80032d6:	4b10      	ldr	r3, [pc, #64]	; (8003318 <xTaskResumeAll+0x12c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d009      	beq.n	80032f2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80032de:	2301      	movs	r3, #1
 80032e0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80032e2:	4b0f      	ldr	r3, [pc, #60]	; (8003320 <xTaskResumeAll+0x134>)
 80032e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032e8:	601a      	str	r2, [r3, #0]
 80032ea:	f3bf 8f4f 	dsb	sy
 80032ee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80032f2:	f001 f8b7 	bl	8004464 <vPortExitCritical>

	return xAlreadyYielded;
 80032f6:	68bb      	ldr	r3, [r7, #8]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	200008f4 	.word	0x200008f4
 8003304:	200008cc 	.word	0x200008cc
 8003308:	2000088c 	.word	0x2000088c
 800330c:	200008d4 	.word	0x200008d4
 8003310:	200003fc 	.word	0x200003fc
 8003314:	200003f8 	.word	0x200003f8
 8003318:	200008e0 	.word	0x200008e0
 800331c:	200008dc 	.word	0x200008dc
 8003320:	e000ed04 	.word	0xe000ed04

08003324 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800332a:	4b04      	ldr	r3, [pc, #16]	; (800333c <xTaskGetTickCount+0x18>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003330:	687b      	ldr	r3, [r7, #4]
}
 8003332:	4618      	mov	r0, r3
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	bc80      	pop	{r7}
 800333a:	4770      	bx	lr
 800333c:	200008d0 	.word	0x200008d0

08003340 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003346:	2300      	movs	r3, #0
 8003348:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800334a:	4b51      	ldr	r3, [pc, #324]	; (8003490 <xTaskIncrementTick+0x150>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2b00      	cmp	r3, #0
 8003350:	f040 808d 	bne.w	800346e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003354:	4b4f      	ldr	r3, [pc, #316]	; (8003494 <xTaskIncrementTick+0x154>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	3301      	adds	r3, #1
 800335a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800335c:	4a4d      	ldr	r2, [pc, #308]	; (8003494 <xTaskIncrementTick+0x154>)
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d11f      	bne.n	80033a8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003368:	4b4b      	ldr	r3, [pc, #300]	; (8003498 <xTaskIncrementTick+0x158>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d009      	beq.n	8003386 <xTaskIncrementTick+0x46>
 8003372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003376:	f383 8811 	msr	BASEPRI, r3
 800337a:	f3bf 8f6f 	isb	sy
 800337e:	f3bf 8f4f 	dsb	sy
 8003382:	603b      	str	r3, [r7, #0]
 8003384:	e7fe      	b.n	8003384 <xTaskIncrementTick+0x44>
 8003386:	4b44      	ldr	r3, [pc, #272]	; (8003498 <xTaskIncrementTick+0x158>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	60fb      	str	r3, [r7, #12]
 800338c:	4b43      	ldr	r3, [pc, #268]	; (800349c <xTaskIncrementTick+0x15c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a41      	ldr	r2, [pc, #260]	; (8003498 <xTaskIncrementTick+0x158>)
 8003392:	6013      	str	r3, [r2, #0]
 8003394:	4a41      	ldr	r2, [pc, #260]	; (800349c <xTaskIncrementTick+0x15c>)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6013      	str	r3, [r2, #0]
 800339a:	4b41      	ldr	r3, [pc, #260]	; (80034a0 <xTaskIncrementTick+0x160>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	3301      	adds	r3, #1
 80033a0:	4a3f      	ldr	r2, [pc, #252]	; (80034a0 <xTaskIncrementTick+0x160>)
 80033a2:	6013      	str	r3, [r2, #0]
 80033a4:	f000 faca 	bl	800393c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80033a8:	4b3e      	ldr	r3, [pc, #248]	; (80034a4 <xTaskIncrementTick+0x164>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d34e      	bcc.n	8003450 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033b2:	4b39      	ldr	r3, [pc, #228]	; (8003498 <xTaskIncrementTick+0x158>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <xTaskIncrementTick+0x80>
 80033bc:	2301      	movs	r3, #1
 80033be:	e000      	b.n	80033c2 <xTaskIncrementTick+0x82>
 80033c0:	2300      	movs	r3, #0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d004      	beq.n	80033d0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033c6:	4b37      	ldr	r3, [pc, #220]	; (80034a4 <xTaskIncrementTick+0x164>)
 80033c8:	f04f 32ff 	mov.w	r2, #4294967295
 80033cc:	601a      	str	r2, [r3, #0]
					break;
 80033ce:	e03f      	b.n	8003450 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80033d0:	4b31      	ldr	r3, [pc, #196]	; (8003498 <xTaskIncrementTick+0x158>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d203      	bcs.n	80033f0 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80033e8:	4a2e      	ldr	r2, [pc, #184]	; (80034a4 <xTaskIncrementTick+0x164>)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6013      	str	r3, [r2, #0]
						break;
 80033ee:	e02f      	b.n	8003450 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	3304      	adds	r3, #4
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fe ffc1 	bl	800237c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d004      	beq.n	800340c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	3318      	adds	r3, #24
 8003406:	4618      	mov	r0, r3
 8003408:	f7fe ffb8 	bl	800237c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003410:	4b25      	ldr	r3, [pc, #148]	; (80034a8 <xTaskIncrementTick+0x168>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	429a      	cmp	r2, r3
 8003416:	d903      	bls.n	8003420 <xTaskIncrementTick+0xe0>
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341c:	4a22      	ldr	r2, [pc, #136]	; (80034a8 <xTaskIncrementTick+0x168>)
 800341e:	6013      	str	r3, [r2, #0]
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003424:	4613      	mov	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4413      	add	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4a1f      	ldr	r2, [pc, #124]	; (80034ac <xTaskIncrementTick+0x16c>)
 800342e:	441a      	add	r2, r3
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	3304      	adds	r3, #4
 8003434:	4619      	mov	r1, r3
 8003436:	4610      	mov	r0, r2
 8003438:	f7fe ff45 	bl	80022c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003440:	4b1b      	ldr	r3, [pc, #108]	; (80034b0 <xTaskIncrementTick+0x170>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003446:	429a      	cmp	r2, r3
 8003448:	d3b3      	bcc.n	80033b2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800344a:	2301      	movs	r3, #1
 800344c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800344e:	e7b0      	b.n	80033b2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003450:	4b17      	ldr	r3, [pc, #92]	; (80034b0 <xTaskIncrementTick+0x170>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003456:	4915      	ldr	r1, [pc, #84]	; (80034ac <xTaskIncrementTick+0x16c>)
 8003458:	4613      	mov	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4413      	add	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	440b      	add	r3, r1
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d907      	bls.n	8003478 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003468:	2301      	movs	r3, #1
 800346a:	617b      	str	r3, [r7, #20]
 800346c:	e004      	b.n	8003478 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800346e:	4b11      	ldr	r3, [pc, #68]	; (80034b4 <xTaskIncrementTick+0x174>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	3301      	adds	r3, #1
 8003474:	4a0f      	ldr	r2, [pc, #60]	; (80034b4 <xTaskIncrementTick+0x174>)
 8003476:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003478:	4b0f      	ldr	r3, [pc, #60]	; (80034b8 <xTaskIncrementTick+0x178>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003480:	2301      	movs	r3, #1
 8003482:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003484:	697b      	ldr	r3, [r7, #20]
}
 8003486:	4618      	mov	r0, r3
 8003488:	3718      	adds	r7, #24
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	200008f4 	.word	0x200008f4
 8003494:	200008d0 	.word	0x200008d0
 8003498:	20000884 	.word	0x20000884
 800349c:	20000888 	.word	0x20000888
 80034a0:	200008e4 	.word	0x200008e4
 80034a4:	200008ec 	.word	0x200008ec
 80034a8:	200008d4 	.word	0x200008d4
 80034ac:	200003fc 	.word	0x200003fc
 80034b0:	200003f8 	.word	0x200003f8
 80034b4:	200008dc 	.word	0x200008dc
 80034b8:	200008e0 	.word	0x200008e0

080034bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80034c2:	4b27      	ldr	r3, [pc, #156]	; (8003560 <vTaskSwitchContext+0xa4>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80034ca:	4b26      	ldr	r3, [pc, #152]	; (8003564 <vTaskSwitchContext+0xa8>)
 80034cc:	2201      	movs	r2, #1
 80034ce:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80034d0:	e040      	b.n	8003554 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80034d2:	4b24      	ldr	r3, [pc, #144]	; (8003564 <vTaskSwitchContext+0xa8>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80034d8:	4b23      	ldr	r3, [pc, #140]	; (8003568 <vTaskSwitchContext+0xac>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	60fb      	str	r3, [r7, #12]
 80034de:	e00f      	b.n	8003500 <vTaskSwitchContext+0x44>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d109      	bne.n	80034fa <vTaskSwitchContext+0x3e>
 80034e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ea:	f383 8811 	msr	BASEPRI, r3
 80034ee:	f3bf 8f6f 	isb	sy
 80034f2:	f3bf 8f4f 	dsb	sy
 80034f6:	607b      	str	r3, [r7, #4]
 80034f8:	e7fe      	b.n	80034f8 <vTaskSwitchContext+0x3c>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	3b01      	subs	r3, #1
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	491a      	ldr	r1, [pc, #104]	; (800356c <vTaskSwitchContext+0xb0>)
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	4613      	mov	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0e5      	beq.n	80034e0 <vTaskSwitchContext+0x24>
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	4613      	mov	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	4413      	add	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4a13      	ldr	r2, [pc, #76]	; (800356c <vTaskSwitchContext+0xb0>)
 8003520:	4413      	add	r3, r2
 8003522:	60bb      	str	r3, [r7, #8]
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	605a      	str	r2, [r3, #4]
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	3308      	adds	r3, #8
 8003536:	429a      	cmp	r2, r3
 8003538:	d104      	bne.n	8003544 <vTaskSwitchContext+0x88>
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	685a      	ldr	r2, [r3, #4]
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	605a      	str	r2, [r3, #4]
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	4a09      	ldr	r2, [pc, #36]	; (8003570 <vTaskSwitchContext+0xb4>)
 800354c:	6013      	str	r3, [r2, #0]
 800354e:	4a06      	ldr	r2, [pc, #24]	; (8003568 <vTaskSwitchContext+0xac>)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6013      	str	r3, [r2, #0]
}
 8003554:	bf00      	nop
 8003556:	3714      	adds	r7, #20
 8003558:	46bd      	mov	sp, r7
 800355a:	bc80      	pop	{r7}
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	200008f4 	.word	0x200008f4
 8003564:	200008e0 	.word	0x200008e0
 8003568:	200008d4 	.word	0x200008d4
 800356c:	200003fc 	.word	0x200003fc
 8003570:	200003f8 	.word	0x200003f8

08003574 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d109      	bne.n	8003598 <vTaskPlaceOnEventList+0x24>
 8003584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003588:	f383 8811 	msr	BASEPRI, r3
 800358c:	f3bf 8f6f 	isb	sy
 8003590:	f3bf 8f4f 	dsb	sy
 8003594:	60fb      	str	r3, [r7, #12]
 8003596:	e7fe      	b.n	8003596 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003598:	4b07      	ldr	r3, [pc, #28]	; (80035b8 <vTaskPlaceOnEventList+0x44>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	3318      	adds	r3, #24
 800359e:	4619      	mov	r1, r3
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f7fe feb3 	bl	800230c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80035a6:	2101      	movs	r1, #1
 80035a8:	6838      	ldr	r0, [r7, #0]
 80035aa:	f000 fa75 	bl	8003a98 <prvAddCurrentTaskToDelayedList>
}
 80035ae:	bf00      	nop
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	200003f8 	.word	0x200003f8

080035bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d109      	bne.n	80035e2 <vTaskPlaceOnEventListRestricted+0x26>
 80035ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d2:	f383 8811 	msr	BASEPRI, r3
 80035d6:	f3bf 8f6f 	isb	sy
 80035da:	f3bf 8f4f 	dsb	sy
 80035de:	617b      	str	r3, [r7, #20]
 80035e0:	e7fe      	b.n	80035e0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80035e2:	4b0a      	ldr	r3, [pc, #40]	; (800360c <vTaskPlaceOnEventListRestricted+0x50>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	3318      	adds	r3, #24
 80035e8:	4619      	mov	r1, r3
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f7fe fe6b 	bl	80022c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d002      	beq.n	80035fc <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80035f6:	f04f 33ff 	mov.w	r3, #4294967295
 80035fa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	68b8      	ldr	r0, [r7, #8]
 8003600:	f000 fa4a 	bl	8003a98 <prvAddCurrentTaskToDelayedList>
	}
 8003604:	bf00      	nop
 8003606:	3718      	adds	r7, #24
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	200003f8 	.word	0x200003f8

08003610 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d109      	bne.n	800363a <xTaskRemoveFromEventList+0x2a>
 8003626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800362a:	f383 8811 	msr	BASEPRI, r3
 800362e:	f3bf 8f6f 	isb	sy
 8003632:	f3bf 8f4f 	dsb	sy
 8003636:	60fb      	str	r3, [r7, #12]
 8003638:	e7fe      	b.n	8003638 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	3318      	adds	r3, #24
 800363e:	4618      	mov	r0, r3
 8003640:	f7fe fe9c 	bl	800237c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003644:	4b1d      	ldr	r3, [pc, #116]	; (80036bc <xTaskRemoveFromEventList+0xac>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d11d      	bne.n	8003688 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	3304      	adds	r3, #4
 8003650:	4618      	mov	r0, r3
 8003652:	f7fe fe93 	bl	800237c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800365a:	4b19      	ldr	r3, [pc, #100]	; (80036c0 <xTaskRemoveFromEventList+0xb0>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	429a      	cmp	r2, r3
 8003660:	d903      	bls.n	800366a <xTaskRemoveFromEventList+0x5a>
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003666:	4a16      	ldr	r2, [pc, #88]	; (80036c0 <xTaskRemoveFromEventList+0xb0>)
 8003668:	6013      	str	r3, [r2, #0]
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800366e:	4613      	mov	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	4a13      	ldr	r2, [pc, #76]	; (80036c4 <xTaskRemoveFromEventList+0xb4>)
 8003678:	441a      	add	r2, r3
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	3304      	adds	r3, #4
 800367e:	4619      	mov	r1, r3
 8003680:	4610      	mov	r0, r2
 8003682:	f7fe fe20 	bl	80022c6 <vListInsertEnd>
 8003686:	e005      	b.n	8003694 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	3318      	adds	r3, #24
 800368c:	4619      	mov	r1, r3
 800368e:	480e      	ldr	r0, [pc, #56]	; (80036c8 <xTaskRemoveFromEventList+0xb8>)
 8003690:	f7fe fe19 	bl	80022c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003698:	4b0c      	ldr	r3, [pc, #48]	; (80036cc <xTaskRemoveFromEventList+0xbc>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369e:	429a      	cmp	r2, r3
 80036a0:	d905      	bls.n	80036ae <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80036a2:	2301      	movs	r3, #1
 80036a4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80036a6:	4b0a      	ldr	r3, [pc, #40]	; (80036d0 <xTaskRemoveFromEventList+0xc0>)
 80036a8:	2201      	movs	r2, #1
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	e001      	b.n	80036b2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80036ae:	2300      	movs	r3, #0
 80036b0:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80036b2:	697b      	ldr	r3, [r7, #20]
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3718      	adds	r7, #24
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	200008f4 	.word	0x200008f4
 80036c0:	200008d4 	.word	0x200008d4
 80036c4:	200003fc 	.word	0x200003fc
 80036c8:	2000088c 	.word	0x2000088c
 80036cc:	200003f8 	.word	0x200003f8
 80036d0:	200008e0 	.word	0x200008e0

080036d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80036dc:	4b06      	ldr	r3, [pc, #24]	; (80036f8 <vTaskInternalSetTimeOutState+0x24>)
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80036e4:	4b05      	ldr	r3, [pc, #20]	; (80036fc <vTaskInternalSetTimeOutState+0x28>)
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	605a      	str	r2, [r3, #4]
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bc80      	pop	{r7}
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	200008e4 	.word	0x200008e4
 80036fc:	200008d0 	.word	0x200008d0

08003700 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b088      	sub	sp, #32
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d109      	bne.n	8003724 <xTaskCheckForTimeOut+0x24>
 8003710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003714:	f383 8811 	msr	BASEPRI, r3
 8003718:	f3bf 8f6f 	isb	sy
 800371c:	f3bf 8f4f 	dsb	sy
 8003720:	613b      	str	r3, [r7, #16]
 8003722:	e7fe      	b.n	8003722 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d109      	bne.n	800373e <xTaskCheckForTimeOut+0x3e>
 800372a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800372e:	f383 8811 	msr	BASEPRI, r3
 8003732:	f3bf 8f6f 	isb	sy
 8003736:	f3bf 8f4f 	dsb	sy
 800373a:	60fb      	str	r3, [r7, #12]
 800373c:	e7fe      	b.n	800373c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800373e:	f000 fe63 	bl	8004408 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003742:	4b1d      	ldr	r3, [pc, #116]	; (80037b8 <xTaskCheckForTimeOut+0xb8>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800375a:	d102      	bne.n	8003762 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800375c:	2300      	movs	r3, #0
 800375e:	61fb      	str	r3, [r7, #28]
 8003760:	e023      	b.n	80037aa <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	4b15      	ldr	r3, [pc, #84]	; (80037bc <xTaskCheckForTimeOut+0xbc>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	429a      	cmp	r2, r3
 800376c:	d007      	beq.n	800377e <xTaskCheckForTimeOut+0x7e>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	429a      	cmp	r2, r3
 8003776:	d302      	bcc.n	800377e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003778:	2301      	movs	r3, #1
 800377a:	61fb      	str	r3, [r7, #28]
 800377c:	e015      	b.n	80037aa <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	429a      	cmp	r2, r3
 8003786:	d20b      	bcs.n	80037a0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	1ad2      	subs	r2, r2, r3
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f7ff ff9d 	bl	80036d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800379a:	2300      	movs	r3, #0
 800379c:	61fb      	str	r3, [r7, #28]
 800379e:	e004      	b.n	80037aa <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80037a6:	2301      	movs	r3, #1
 80037a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80037aa:	f000 fe5b 	bl	8004464 <vPortExitCritical>

	return xReturn;
 80037ae:	69fb      	ldr	r3, [r7, #28]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3720      	adds	r7, #32
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	200008d0 	.word	0x200008d0
 80037bc:	200008e4 	.word	0x200008e4

080037c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80037c0:	b480      	push	{r7}
 80037c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80037c4:	4b03      	ldr	r3, [pc, #12]	; (80037d4 <vTaskMissedYield+0x14>)
 80037c6:	2201      	movs	r2, #1
 80037c8:	601a      	str	r2, [r3, #0]
}
 80037ca:	bf00      	nop
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bc80      	pop	{r7}
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	200008e0 	.word	0x200008e0

080037d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80037e0:	f000 f852 	bl	8003888 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80037e4:	4b06      	ldr	r3, [pc, #24]	; (8003800 <prvIdleTask+0x28>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d9f9      	bls.n	80037e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80037ec:	4b05      	ldr	r3, [pc, #20]	; (8003804 <prvIdleTask+0x2c>)
 80037ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037f2:	601a      	str	r2, [r3, #0]
 80037f4:	f3bf 8f4f 	dsb	sy
 80037f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80037fc:	e7f0      	b.n	80037e0 <prvIdleTask+0x8>
 80037fe:	bf00      	nop
 8003800:	200003fc 	.word	0x200003fc
 8003804:	e000ed04 	.word	0xe000ed04

08003808 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800380e:	2300      	movs	r3, #0
 8003810:	607b      	str	r3, [r7, #4]
 8003812:	e00c      	b.n	800382e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	4613      	mov	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	4413      	add	r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	4a12      	ldr	r2, [pc, #72]	; (8003868 <prvInitialiseTaskLists+0x60>)
 8003820:	4413      	add	r3, r2
 8003822:	4618      	mov	r0, r3
 8003824:	f7fe fd24 	bl	8002270 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3301      	adds	r3, #1
 800382c:	607b      	str	r3, [r7, #4]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2b37      	cmp	r3, #55	; 0x37
 8003832:	d9ef      	bls.n	8003814 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003834:	480d      	ldr	r0, [pc, #52]	; (800386c <prvInitialiseTaskLists+0x64>)
 8003836:	f7fe fd1b 	bl	8002270 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800383a:	480d      	ldr	r0, [pc, #52]	; (8003870 <prvInitialiseTaskLists+0x68>)
 800383c:	f7fe fd18 	bl	8002270 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003840:	480c      	ldr	r0, [pc, #48]	; (8003874 <prvInitialiseTaskLists+0x6c>)
 8003842:	f7fe fd15 	bl	8002270 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003846:	480c      	ldr	r0, [pc, #48]	; (8003878 <prvInitialiseTaskLists+0x70>)
 8003848:	f7fe fd12 	bl	8002270 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800384c:	480b      	ldr	r0, [pc, #44]	; (800387c <prvInitialiseTaskLists+0x74>)
 800384e:	f7fe fd0f 	bl	8002270 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003852:	4b0b      	ldr	r3, [pc, #44]	; (8003880 <prvInitialiseTaskLists+0x78>)
 8003854:	4a05      	ldr	r2, [pc, #20]	; (800386c <prvInitialiseTaskLists+0x64>)
 8003856:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003858:	4b0a      	ldr	r3, [pc, #40]	; (8003884 <prvInitialiseTaskLists+0x7c>)
 800385a:	4a05      	ldr	r2, [pc, #20]	; (8003870 <prvInitialiseTaskLists+0x68>)
 800385c:	601a      	str	r2, [r3, #0]
}
 800385e:	bf00      	nop
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	200003fc 	.word	0x200003fc
 800386c:	2000085c 	.word	0x2000085c
 8003870:	20000870 	.word	0x20000870
 8003874:	2000088c 	.word	0x2000088c
 8003878:	200008a0 	.word	0x200008a0
 800387c:	200008b8 	.word	0x200008b8
 8003880:	20000884 	.word	0x20000884
 8003884:	20000888 	.word	0x20000888

08003888 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800388e:	e019      	b.n	80038c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003890:	f000 fdba 	bl	8004408 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003894:	4b0f      	ldr	r3, [pc, #60]	; (80038d4 <prvCheckTasksWaitingTermination+0x4c>)
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3304      	adds	r3, #4
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7fe fd6b 	bl	800237c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80038a6:	4b0c      	ldr	r3, [pc, #48]	; (80038d8 <prvCheckTasksWaitingTermination+0x50>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	3b01      	subs	r3, #1
 80038ac:	4a0a      	ldr	r2, [pc, #40]	; (80038d8 <prvCheckTasksWaitingTermination+0x50>)
 80038ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80038b0:	4b0a      	ldr	r3, [pc, #40]	; (80038dc <prvCheckTasksWaitingTermination+0x54>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	3b01      	subs	r3, #1
 80038b6:	4a09      	ldr	r2, [pc, #36]	; (80038dc <prvCheckTasksWaitingTermination+0x54>)
 80038b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80038ba:	f000 fdd3 	bl	8004464 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f80e 	bl	80038e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038c4:	4b05      	ldr	r3, [pc, #20]	; (80038dc <prvCheckTasksWaitingTermination+0x54>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1e1      	bne.n	8003890 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80038cc:	bf00      	nop
 80038ce:	3708      	adds	r7, #8
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	200008a0 	.word	0x200008a0
 80038d8:	200008cc 	.word	0x200008cc
 80038dc:	200008b4 	.word	0x200008b4

080038e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d108      	bne.n	8003904 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 ff3e 	bl	8004778 <vPortFree>
				vPortFree( pxTCB );
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 ff3b 	bl	8004778 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003902:	e017      	b.n	8003934 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800390a:	2b01      	cmp	r3, #1
 800390c:	d103      	bne.n	8003916 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 ff32 	bl	8004778 <vPortFree>
	}
 8003914:	e00e      	b.n	8003934 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800391c:	2b02      	cmp	r3, #2
 800391e:	d009      	beq.n	8003934 <prvDeleteTCB+0x54>
 8003920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003924:	f383 8811 	msr	BASEPRI, r3
 8003928:	f3bf 8f6f 	isb	sy
 800392c:	f3bf 8f4f 	dsb	sy
 8003930:	60fb      	str	r3, [r7, #12]
 8003932:	e7fe      	b.n	8003932 <prvDeleteTCB+0x52>
	}
 8003934:	bf00      	nop
 8003936:	3710      	adds	r7, #16
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003942:	4b0e      	ldr	r3, [pc, #56]	; (800397c <prvResetNextTaskUnblockTime+0x40>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d101      	bne.n	8003950 <prvResetNextTaskUnblockTime+0x14>
 800394c:	2301      	movs	r3, #1
 800394e:	e000      	b.n	8003952 <prvResetNextTaskUnblockTime+0x16>
 8003950:	2300      	movs	r3, #0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d004      	beq.n	8003960 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003956:	4b0a      	ldr	r3, [pc, #40]	; (8003980 <prvResetNextTaskUnblockTime+0x44>)
 8003958:	f04f 32ff 	mov.w	r2, #4294967295
 800395c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800395e:	e008      	b.n	8003972 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003960:	4b06      	ldr	r3, [pc, #24]	; (800397c <prvResetNextTaskUnblockTime+0x40>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	4a04      	ldr	r2, [pc, #16]	; (8003980 <prvResetNextTaskUnblockTime+0x44>)
 8003970:	6013      	str	r3, [r2, #0]
}
 8003972:	bf00      	nop
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	bc80      	pop	{r7}
 800397a:	4770      	bx	lr
 800397c:	20000884 	.word	0x20000884
 8003980:	200008ec 	.word	0x200008ec

08003984 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800398a:	4b0b      	ldr	r3, [pc, #44]	; (80039b8 <xTaskGetSchedulerState+0x34>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d102      	bne.n	8003998 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003992:	2301      	movs	r3, #1
 8003994:	607b      	str	r3, [r7, #4]
 8003996:	e008      	b.n	80039aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003998:	4b08      	ldr	r3, [pc, #32]	; (80039bc <xTaskGetSchedulerState+0x38>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d102      	bne.n	80039a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80039a0:	2302      	movs	r3, #2
 80039a2:	607b      	str	r3, [r7, #4]
 80039a4:	e001      	b.n	80039aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80039a6:	2300      	movs	r3, #0
 80039a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80039aa:	687b      	ldr	r3, [r7, #4]
	}
 80039ac:	4618      	mov	r0, r3
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bc80      	pop	{r7}
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	200008d8 	.word	0x200008d8
 80039bc:	200008f4 	.word	0x200008f4

080039c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80039cc:	2300      	movs	r3, #0
 80039ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d054      	beq.n	8003a80 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80039d6:	4b2d      	ldr	r3, [pc, #180]	; (8003a8c <xTaskPriorityDisinherit+0xcc>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d009      	beq.n	80039f4 <xTaskPriorityDisinherit+0x34>
 80039e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e4:	f383 8811 	msr	BASEPRI, r3
 80039e8:	f3bf 8f6f 	isb	sy
 80039ec:	f3bf 8f4f 	dsb	sy
 80039f0:	60fb      	str	r3, [r7, #12]
 80039f2:	e7fe      	b.n	80039f2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d109      	bne.n	8003a10 <xTaskPriorityDisinherit+0x50>
 80039fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a00:	f383 8811 	msr	BASEPRI, r3
 8003a04:	f3bf 8f6f 	isb	sy
 8003a08:	f3bf 8f4f 	dsb	sy
 8003a0c:	60bb      	str	r3, [r7, #8]
 8003a0e:	e7fe      	b.n	8003a0e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a14:	1e5a      	subs	r2, r3, #1
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d02c      	beq.n	8003a80 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d128      	bne.n	8003a80 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	3304      	adds	r3, #4
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7fe fca2 	bl	800237c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a44:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a50:	4b0f      	ldr	r3, [pc, #60]	; (8003a90 <xTaskPriorityDisinherit+0xd0>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d903      	bls.n	8003a60 <xTaskPriorityDisinherit+0xa0>
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5c:	4a0c      	ldr	r2, [pc, #48]	; (8003a90 <xTaskPriorityDisinherit+0xd0>)
 8003a5e:	6013      	str	r3, [r2, #0]
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a64:	4613      	mov	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	4a09      	ldr	r2, [pc, #36]	; (8003a94 <xTaskPriorityDisinherit+0xd4>)
 8003a6e:	441a      	add	r2, r3
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	3304      	adds	r3, #4
 8003a74:	4619      	mov	r1, r3
 8003a76:	4610      	mov	r0, r2
 8003a78:	f7fe fc25 	bl	80022c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003a80:	697b      	ldr	r3, [r7, #20]
	}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3718      	adds	r7, #24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	200003f8 	.word	0x200003f8
 8003a90:	200008d4 	.word	0x200008d4
 8003a94:	200003fc 	.word	0x200003fc

08003a98 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003aa2:	4b21      	ldr	r3, [pc, #132]	; (8003b28 <prvAddCurrentTaskToDelayedList+0x90>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003aa8:	4b20      	ldr	r3, [pc, #128]	; (8003b2c <prvAddCurrentTaskToDelayedList+0x94>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	3304      	adds	r3, #4
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7fe fc64 	bl	800237c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aba:	d10a      	bne.n	8003ad2 <prvAddCurrentTaskToDelayedList+0x3a>
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d007      	beq.n	8003ad2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ac2:	4b1a      	ldr	r3, [pc, #104]	; (8003b2c <prvAddCurrentTaskToDelayedList+0x94>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	3304      	adds	r3, #4
 8003ac8:	4619      	mov	r1, r3
 8003aca:	4819      	ldr	r0, [pc, #100]	; (8003b30 <prvAddCurrentTaskToDelayedList+0x98>)
 8003acc:	f7fe fbfb 	bl	80022c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003ad0:	e026      	b.n	8003b20 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003ada:	4b14      	ldr	r3, [pc, #80]	; (8003b2c <prvAddCurrentTaskToDelayedList+0x94>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d209      	bcs.n	8003afe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003aea:	4b12      	ldr	r3, [pc, #72]	; (8003b34 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	4b0f      	ldr	r3, [pc, #60]	; (8003b2c <prvAddCurrentTaskToDelayedList+0x94>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	3304      	adds	r3, #4
 8003af4:	4619      	mov	r1, r3
 8003af6:	4610      	mov	r0, r2
 8003af8:	f7fe fc08 	bl	800230c <vListInsert>
}
 8003afc:	e010      	b.n	8003b20 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003afe:	4b0e      	ldr	r3, [pc, #56]	; (8003b38 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	4b0a      	ldr	r3, [pc, #40]	; (8003b2c <prvAddCurrentTaskToDelayedList+0x94>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	3304      	adds	r3, #4
 8003b08:	4619      	mov	r1, r3
 8003b0a:	4610      	mov	r0, r2
 8003b0c:	f7fe fbfe 	bl	800230c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003b10:	4b0a      	ldr	r3, [pc, #40]	; (8003b3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68ba      	ldr	r2, [r7, #8]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d202      	bcs.n	8003b20 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003b1a:	4a08      	ldr	r2, [pc, #32]	; (8003b3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	6013      	str	r3, [r2, #0]
}
 8003b20:	bf00      	nop
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	200008d0 	.word	0x200008d0
 8003b2c:	200003f8 	.word	0x200003f8
 8003b30:	200008b8 	.word	0x200008b8
 8003b34:	20000888 	.word	0x20000888
 8003b38:	20000884 	.word	0x20000884
 8003b3c:	200008ec 	.word	0x200008ec

08003b40 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b08a      	sub	sp, #40	; 0x28
 8003b44:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003b46:	2300      	movs	r3, #0
 8003b48:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003b4a:	f000 fb15 	bl	8004178 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003b4e:	4b1c      	ldr	r3, [pc, #112]	; (8003bc0 <xTimerCreateTimerTask+0x80>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d021      	beq.n	8003b9a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003b56:	2300      	movs	r3, #0
 8003b58:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003b5e:	1d3a      	adds	r2, r7, #4
 8003b60:	f107 0108 	add.w	r1, r7, #8
 8003b64:	f107 030c 	add.w	r3, r7, #12
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7fe fb69 	bl	8002240 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003b6e:	6879      	ldr	r1, [r7, #4]
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	9202      	str	r2, [sp, #8]
 8003b76:	9301      	str	r3, [sp, #4]
 8003b78:	2302      	movs	r3, #2
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	460a      	mov	r2, r1
 8003b80:	4910      	ldr	r1, [pc, #64]	; (8003bc4 <xTimerCreateTimerTask+0x84>)
 8003b82:	4811      	ldr	r0, [pc, #68]	; (8003bc8 <xTimerCreateTimerTask+0x88>)
 8003b84:	f7ff f8f8 	bl	8002d78 <xTaskCreateStatic>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	4b10      	ldr	r3, [pc, #64]	; (8003bcc <xTimerCreateTimerTask+0x8c>)
 8003b8c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003b8e:	4b0f      	ldr	r3, [pc, #60]	; (8003bcc <xTimerCreateTimerTask+0x8c>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003b96:	2301      	movs	r3, #1
 8003b98:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d109      	bne.n	8003bb4 <xTimerCreateTimerTask+0x74>
 8003ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba4:	f383 8811 	msr	BASEPRI, r3
 8003ba8:	f3bf 8f6f 	isb	sy
 8003bac:	f3bf 8f4f 	dsb	sy
 8003bb0:	613b      	str	r3, [r7, #16]
 8003bb2:	e7fe      	b.n	8003bb2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8003bb4:	697b      	ldr	r3, [r7, #20]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3718      	adds	r7, #24
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	20000928 	.word	0x20000928
 8003bc4:	08004c84 	.word	0x08004c84
 8003bc8:	08003d8d 	.word	0x08003d8d
 8003bcc:	2000092c 	.word	0x2000092c

08003bd0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b088      	sub	sp, #32
 8003bd4:	af02      	add	r7, sp, #8
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
 8003bdc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8003bde:	2030      	movs	r0, #48	; 0x30
 8003be0:	f000 fd08 	bl	80045f4 <pvPortMalloc>
 8003be4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00d      	beq.n	8003c08 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	9301      	str	r3, [sp, #4]
 8003bf0:	6a3b      	ldr	r3, [r7, #32]
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	68b9      	ldr	r1, [r7, #8]
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f000 f809 	bl	8003c12 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8003c08:	697b      	ldr	r3, [r7, #20]
	}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3718      	adds	r7, #24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b086      	sub	sp, #24
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	60f8      	str	r0, [r7, #12]
 8003c1a:	60b9      	str	r1, [r7, #8]
 8003c1c:	607a      	str	r2, [r7, #4]
 8003c1e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d109      	bne.n	8003c3a <prvInitialiseNewTimer+0x28>
 8003c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c2a:	f383 8811 	msr	BASEPRI, r3
 8003c2e:	f3bf 8f6f 	isb	sy
 8003c32:	f3bf 8f4f 	dsb	sy
 8003c36:	617b      	str	r3, [r7, #20]
 8003c38:	e7fe      	b.n	8003c38 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d015      	beq.n	8003c6c <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8003c40:	f000 fa9a 	bl	8004178 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8003c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8003c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8003c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c58:	683a      	ldr	r2, [r7, #0]
 8003c5a:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5e:	6a3a      	ldr	r2, [r7, #32]
 8003c60:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8003c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c64:	3304      	adds	r3, #4
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7fe fb21 	bl	80022ae <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8003c6c:	bf00      	nop
 8003c6e:	3718      	adds	r7, #24
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b08a      	sub	sp, #40	; 0x28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
 8003c80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003c82:	2300      	movs	r3, #0
 8003c84:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d109      	bne.n	8003ca0 <xTimerGenericCommand+0x2c>
 8003c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c90:	f383 8811 	msr	BASEPRI, r3
 8003c94:	f3bf 8f6f 	isb	sy
 8003c98:	f3bf 8f4f 	dsb	sy
 8003c9c:	623b      	str	r3, [r7, #32]
 8003c9e:	e7fe      	b.n	8003c9e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003ca0:	4b19      	ldr	r3, [pc, #100]	; (8003d08 <xTimerGenericCommand+0x94>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d02a      	beq.n	8003cfe <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	2b05      	cmp	r3, #5
 8003cb8:	dc18      	bgt.n	8003cec <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003cba:	f7ff fe63 	bl	8003984 <xTaskGetSchedulerState>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d109      	bne.n	8003cd8 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003cc4:	4b10      	ldr	r3, [pc, #64]	; (8003d08 <xTimerGenericCommand+0x94>)
 8003cc6:	6818      	ldr	r0, [r3, #0]
 8003cc8:	f107 0110 	add.w	r1, r7, #16
 8003ccc:	2300      	movs	r3, #0
 8003cce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cd0:	f7fe fc7c 	bl	80025cc <xQueueGenericSend>
 8003cd4:	6278      	str	r0, [r7, #36]	; 0x24
 8003cd6:	e012      	b.n	8003cfe <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003cd8:	4b0b      	ldr	r3, [pc, #44]	; (8003d08 <xTimerGenericCommand+0x94>)
 8003cda:	6818      	ldr	r0, [r3, #0]
 8003cdc:	f107 0110 	add.w	r1, r7, #16
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f7fe fc72 	bl	80025cc <xQueueGenericSend>
 8003ce8:	6278      	str	r0, [r7, #36]	; 0x24
 8003cea:	e008      	b.n	8003cfe <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003cec:	4b06      	ldr	r3, [pc, #24]	; (8003d08 <xTimerGenericCommand+0x94>)
 8003cee:	6818      	ldr	r0, [r3, #0]
 8003cf0:	f107 0110 	add.w	r1, r7, #16
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	f7fe fd62 	bl	80027c0 <xQueueGenericSendFromISR>
 8003cfc:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3728      	adds	r7, #40	; 0x28
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	20000928 	.word	0x20000928

08003d0c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t tick_now )
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b088      	sub	sp, #32
 8003d10:	af02      	add	r7, sp, #8
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d16:	4b1c      	ldr	r3, [pc, #112]	; (8003d88 <prvProcessExpiredTimer+0x7c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	3304      	adds	r3, #4
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7fe fb29 	bl	800237c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d121      	bne.n	8003d76 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), tick_now, xNextExpireTime ) != pdFALSE )
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	699a      	ldr	r2, [r3, #24]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	18d1      	adds	r1, r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	6978      	ldr	r0, [r7, #20]
 8003d40:	f000 f8c8 	bl	8003ed4 <prvInsertTimerInActiveList>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d015      	beq.n	8003d76 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	9300      	str	r3, [sp, #0]
 8003d4e:	2300      	movs	r3, #0
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	2100      	movs	r1, #0
 8003d54:	6978      	ldr	r0, [r7, #20]
 8003d56:	f7ff ff8d 	bl	8003c74 <xTimerGenericCommand>
 8003d5a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d109      	bne.n	8003d76 <prvProcessExpiredTimer+0x6a>
 8003d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d66:	f383 8811 	msr	BASEPRI, r3
 8003d6a:	f3bf 8f6f 	isb	sy
 8003d6e:	f3bf 8f4f 	dsb	sy
 8003d72:	60fb      	str	r3, [r7, #12]
 8003d74:	e7fe      	b.n	8003d74 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7a:	6978      	ldr	r0, [r7, #20]
 8003d7c:	4798      	blx	r3
}
 8003d7e:	bf00      	nop
 8003d80:	3718      	adds	r7, #24
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	20000920 	.word	0x20000920

08003d8c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d94:	f107 0308 	add.w	r3, r7, #8
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f000 f857 	bl	8003e4c <prvGetNextExpireTime>
 8003d9e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	4619      	mov	r1, r3
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f000 f803 	bl	8003db0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003daa:	f000 f8d5 	bl	8003f58 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003dae:	e7f1      	b.n	8003d94 <prvTimerTask+0x8>

08003db0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
TickType_t tick_now;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003dba:	f7ff fa09 	bl	80031d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		tick_now = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003dbe:	f107 0308 	add.w	r3, r7, #8
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 f866 	bl	8003e94 <prvSampleTimeNow>
 8003dc8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d130      	bne.n	8003e32 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= tick_now ) )
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10a      	bne.n	8003dec <prvProcessTimerOrBlockTask+0x3c>
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d806      	bhi.n	8003dec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003dde:	f7ff fa05 	bl	80031ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, tick_now );
 8003de2:	68f9      	ldr	r1, [r7, #12]
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f7ff ff91 	bl	8003d0c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003dea:	e024      	b.n	8003e36 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d008      	beq.n	8003e04 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003df2:	4b13      	ldr	r3, [pc, #76]	; (8003e40 <prvProcessTimerOrBlockTask+0x90>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	bf0c      	ite	eq
 8003dfc:	2301      	moveq	r3, #1
 8003dfe:	2300      	movne	r3, #0
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - tick_now ), xListWasEmpty );
 8003e04:	4b0f      	ldr	r3, [pc, #60]	; (8003e44 <prvProcessTimerOrBlockTask+0x94>)
 8003e06:	6818      	ldr	r0, [r3, #0]
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	4619      	mov	r1, r3
 8003e12:	f7fe ff7d 	bl	8002d10 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003e16:	f7ff f9e9 	bl	80031ec <xTaskResumeAll>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10a      	bne.n	8003e36 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003e20:	4b09      	ldr	r3, [pc, #36]	; (8003e48 <prvProcessTimerOrBlockTask+0x98>)
 8003e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e26:	601a      	str	r2, [r3, #0]
 8003e28:	f3bf 8f4f 	dsb	sy
 8003e2c:	f3bf 8f6f 	isb	sy
}
 8003e30:	e001      	b.n	8003e36 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003e32:	f7ff f9db 	bl	80031ec <xTaskResumeAll>
}
 8003e36:	bf00      	nop
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	20000924 	.word	0x20000924
 8003e44:	20000928 	.word	0x20000928
 8003e48:	e000ed04 	.word	0xe000ed04

08003e4c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003e54:	4b0e      	ldr	r3, [pc, #56]	; (8003e90 <prvGetNextExpireTime+0x44>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	bf0c      	ite	eq
 8003e5e:	2301      	moveq	r3, #1
 8003e60:	2300      	movne	r3, #0
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	461a      	mov	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d105      	bne.n	8003e7e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e72:	4b07      	ldr	r3, [pc, #28]	; (8003e90 <prvGetNextExpireTime+0x44>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	60fb      	str	r3, [r7, #12]
 8003e7c:	e001      	b.n	8003e82 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003e82:	68fb      	ldr	r3, [r7, #12]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3714      	adds	r7, #20
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bc80      	pop	{r7}
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	20000920 	.word	0x20000920

08003e94 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
TickType_t tick_now;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	tick_now = xTaskGetTickCount();
 8003e9c:	f7ff fa42 	bl	8003324 <xTaskGetTickCount>
 8003ea0:	60f8      	str	r0, [r7, #12]

	if( tick_now < xLastTime )
 8003ea2:	4b0b      	ldr	r3, [pc, #44]	; (8003ed0 <prvSampleTimeNow+0x3c>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d205      	bcs.n	8003eb8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003eac:	f000 f904 	bl	80040b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	601a      	str	r2, [r3, #0]
 8003eb6:	e002      	b.n	8003ebe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = tick_now;
 8003ebe:	4a04      	ldr	r2, [pc, #16]	; (8003ed0 <prvSampleTimeNow+0x3c>)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6013      	str	r3, [r2, #0]

	return tick_now;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	20000930 	.word	0x20000930

08003ed4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t tick_now, const TickType_t xCommandTime )
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
 8003ee0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= tick_now )
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d812      	bhi.n	8003f20 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( tick_now - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	1ad2      	subs	r2, r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d302      	bcc.n	8003f0e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	617b      	str	r3, [r7, #20]
 8003f0c:	e01b      	b.n	8003f46 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003f0e:	4b10      	ldr	r3, [pc, #64]	; (8003f50 <prvInsertTimerInActiveList+0x7c>)
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	3304      	adds	r3, #4
 8003f16:	4619      	mov	r1, r3
 8003f18:	4610      	mov	r0, r2
 8003f1a:	f7fe f9f7 	bl	800230c <vListInsert>
 8003f1e:	e012      	b.n	8003f46 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( tick_now < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d206      	bcs.n	8003f36 <prvInsertTimerInActiveList+0x62>
 8003f28:	68ba      	ldr	r2, [r7, #8]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d302      	bcc.n	8003f36 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003f30:	2301      	movs	r3, #1
 8003f32:	617b      	str	r3, [r7, #20]
 8003f34:	e007      	b.n	8003f46 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f36:	4b07      	ldr	r3, [pc, #28]	; (8003f54 <prvInsertTimerInActiveList+0x80>)
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	4619      	mov	r1, r3
 8003f40:	4610      	mov	r0, r2
 8003f42:	f7fe f9e3 	bl	800230c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003f46:	697b      	ldr	r3, [r7, #20]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3718      	adds	r7, #24
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	20000924 	.word	0x20000924
 8003f54:	20000920 	.word	0x20000920

08003f58 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b08e      	sub	sp, #56	; 0x38
 8003f5c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t tick_now;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f5e:	e099      	b.n	8004094 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	da17      	bge.n	8003f96 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003f66:	1d3b      	adds	r3, r7, #4
 8003f68:	3304      	adds	r3, #4
 8003f6a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d109      	bne.n	8003f86 <prvProcessReceivedCommands+0x2e>
 8003f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f76:	f383 8811 	msr	BASEPRI, r3
 8003f7a:	f3bf 8f6f 	isb	sy
 8003f7e:	f3bf 8f4f 	dsb	sy
 8003f82:	61fb      	str	r3, [r7, #28]
 8003f84:	e7fe      	b.n	8003f84 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f8c:	6850      	ldr	r0, [r2, #4]
 8003f8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f90:	6892      	ldr	r2, [r2, #8]
 8003f92:	4611      	mov	r1, r2
 8003f94:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	db7a      	blt.n	8004092 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d004      	beq.n	8003fb2 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003faa:	3304      	adds	r3, #4
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7fe f9e5 	bl	800237c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the tick_now value was set). */
			tick_now = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003fb2:	463b      	mov	r3, r7
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7ff ff6d 	bl	8003e94 <prvSampleTimeNow>
 8003fba:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b09      	cmp	r3, #9
 8003fc0:	d868      	bhi.n	8004094 <prvProcessReceivedCommands+0x13c>
 8003fc2:	a201      	add	r2, pc, #4	; (adr r2, 8003fc8 <prvProcessReceivedCommands+0x70>)
 8003fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc8:	08003ff1 	.word	0x08003ff1
 8003fcc:	08003ff1 	.word	0x08003ff1
 8003fd0:	08003ff1 	.word	0x08003ff1
 8003fd4:	08004095 	.word	0x08004095
 8003fd8:	0800404b 	.word	0x0800404b
 8003fdc:	08004081 	.word	0x08004081
 8003fe0:	08003ff1 	.word	0x08003ff1
 8003fe4:	08003ff1 	.word	0x08003ff1
 8003fe8:	08004095 	.word	0x08004095
 8003fec:	0800404b 	.word	0x0800404b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, tick_now, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	18d1      	adds	r1, r2, r3
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ffc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ffe:	f7ff ff69 	bl	8003ed4 <prvInsertTimerInActiveList>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d045      	beq.n	8004094 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800400e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004012:	69db      	ldr	r3, [r3, #28]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d13d      	bne.n	8004094 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	441a      	add	r2, r3
 8004020:	2300      	movs	r3, #0
 8004022:	9300      	str	r3, [sp, #0]
 8004024:	2300      	movs	r3, #0
 8004026:	2100      	movs	r1, #0
 8004028:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800402a:	f7ff fe23 	bl	8003c74 <xTimerGenericCommand>
 800402e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004030:	6a3b      	ldr	r3, [r7, #32]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d12e      	bne.n	8004094 <prvProcessReceivedCommands+0x13c>
 8004036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403a:	f383 8811 	msr	BASEPRI, r3
 800403e:	f3bf 8f6f 	isb	sy
 8004042:	f3bf 8f4f 	dsb	sy
 8004046:	61bb      	str	r3, [r7, #24]
 8004048:	e7fe      	b.n	8004048 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800404e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d109      	bne.n	800406c <prvProcessReceivedCommands+0x114>
 8004058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405c:	f383 8811 	msr	BASEPRI, r3
 8004060:	f3bf 8f6f 	isb	sy
 8004064:	f3bf 8f4f 	dsb	sy
 8004068:	617b      	str	r3, [r7, #20]
 800406a:	e7fe      	b.n	800406a <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( tick_now + pxTimer->xTimerPeriodInTicks ), tick_now, tick_now );
 800406c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800406e:	699a      	ldr	r2, [r3, #24]
 8004070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004072:	18d1      	adds	r1, r2, r3
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004078:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800407a:	f7ff ff2b 	bl	8003ed4 <prvInsertTimerInActiveList>
					break;
 800407e:	e009      	b.n	8004094 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004082:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004086:	2b00      	cmp	r3, #0
 8004088:	d104      	bne.n	8004094 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 800408a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800408c:	f000 fb74 	bl	8004778 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004090:	e000      	b.n	8004094 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004092:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004094:	4b07      	ldr	r3, [pc, #28]	; (80040b4 <prvProcessReceivedCommands+0x15c>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	1d39      	adds	r1, r7, #4
 800409a:	2200      	movs	r2, #0
 800409c:	4618      	mov	r0, r3
 800409e:	f7fe fc23 	bl	80028e8 <xQueueReceive>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f47f af5b 	bne.w	8003f60 <prvProcessReceivedCommands+0x8>
	}
}
 80040aa:	bf00      	nop
 80040ac:	3730      	adds	r7, #48	; 0x30
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	20000928 	.word	0x20000928

080040b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b088      	sub	sp, #32
 80040bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80040be:	e044      	b.n	800414a <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040c0:	4b2b      	ldr	r3, [pc, #172]	; (8004170 <prvSwitchTimerLists+0xb8>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040ca:	4b29      	ldr	r3, [pc, #164]	; (8004170 <prvSwitchTimerLists+0xb8>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	3304      	adds	r3, #4
 80040d8:	4618      	mov	r0, r3
 80040da:	f7fe f94f 	bl	800237c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d12d      	bne.n	800414a <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	4413      	add	r3, r2
 80040f6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d90e      	bls.n	800411e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800410c:	4b18      	ldr	r3, [pc, #96]	; (8004170 <prvSwitchTimerLists+0xb8>)
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	3304      	adds	r3, #4
 8004114:	4619      	mov	r1, r3
 8004116:	4610      	mov	r0, r2
 8004118:	f7fe f8f8 	bl	800230c <vListInsert>
 800411c:	e015      	b.n	800414a <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800411e:	2300      	movs	r3, #0
 8004120:	9300      	str	r3, [sp, #0]
 8004122:	2300      	movs	r3, #0
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	2100      	movs	r1, #0
 8004128:	68f8      	ldr	r0, [r7, #12]
 800412a:	f7ff fda3 	bl	8003c74 <xTimerGenericCommand>
 800412e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d109      	bne.n	800414a <prvSwitchTimerLists+0x92>
 8004136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413a:	f383 8811 	msr	BASEPRI, r3
 800413e:	f3bf 8f6f 	isb	sy
 8004142:	f3bf 8f4f 	dsb	sy
 8004146:	603b      	str	r3, [r7, #0]
 8004148:	e7fe      	b.n	8004148 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800414a:	4b09      	ldr	r3, [pc, #36]	; (8004170 <prvSwitchTimerLists+0xb8>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1b5      	bne.n	80040c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004154:	4b06      	ldr	r3, [pc, #24]	; (8004170 <prvSwitchTimerLists+0xb8>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800415a:	4b06      	ldr	r3, [pc, #24]	; (8004174 <prvSwitchTimerLists+0xbc>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a04      	ldr	r2, [pc, #16]	; (8004170 <prvSwitchTimerLists+0xb8>)
 8004160:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004162:	4a04      	ldr	r2, [pc, #16]	; (8004174 <prvSwitchTimerLists+0xbc>)
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	6013      	str	r3, [r2, #0]
}
 8004168:	bf00      	nop
 800416a:	3718      	adds	r7, #24
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	20000920 	.word	0x20000920
 8004174:	20000924 	.word	0x20000924

08004178 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800417e:	f000 f943 	bl	8004408 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004182:	4b15      	ldr	r3, [pc, #84]	; (80041d8 <prvCheckForValidListAndQueue+0x60>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d120      	bne.n	80041cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800418a:	4814      	ldr	r0, [pc, #80]	; (80041dc <prvCheckForValidListAndQueue+0x64>)
 800418c:	f7fe f870 	bl	8002270 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004190:	4813      	ldr	r0, [pc, #76]	; (80041e0 <prvCheckForValidListAndQueue+0x68>)
 8004192:	f7fe f86d 	bl	8002270 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004196:	4b13      	ldr	r3, [pc, #76]	; (80041e4 <prvCheckForValidListAndQueue+0x6c>)
 8004198:	4a10      	ldr	r2, [pc, #64]	; (80041dc <prvCheckForValidListAndQueue+0x64>)
 800419a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800419c:	4b12      	ldr	r3, [pc, #72]	; (80041e8 <prvCheckForValidListAndQueue+0x70>)
 800419e:	4a10      	ldr	r2, [pc, #64]	; (80041e0 <prvCheckForValidListAndQueue+0x68>)
 80041a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80041a2:	2300      	movs	r3, #0
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	4b11      	ldr	r3, [pc, #68]	; (80041ec <prvCheckForValidListAndQueue+0x74>)
 80041a8:	4a11      	ldr	r2, [pc, #68]	; (80041f0 <prvCheckForValidListAndQueue+0x78>)
 80041aa:	2110      	movs	r1, #16
 80041ac:	200a      	movs	r0, #10
 80041ae:	f7fe f977 	bl	80024a0 <xQueueGenericCreateStatic>
 80041b2:	4602      	mov	r2, r0
 80041b4:	4b08      	ldr	r3, [pc, #32]	; (80041d8 <prvCheckForValidListAndQueue+0x60>)
 80041b6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80041b8:	4b07      	ldr	r3, [pc, #28]	; (80041d8 <prvCheckForValidListAndQueue+0x60>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d005      	beq.n	80041cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80041c0:	4b05      	ldr	r3, [pc, #20]	; (80041d8 <prvCheckForValidListAndQueue+0x60>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	490b      	ldr	r1, [pc, #44]	; (80041f4 <prvCheckForValidListAndQueue+0x7c>)
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7fe fd7a 	bl	8002cc0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80041cc:	f000 f94a 	bl	8004464 <vPortExitCritical>
}
 80041d0:	bf00      	nop
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	20000928 	.word	0x20000928
 80041dc:	200008f8 	.word	0x200008f8
 80041e0:	2000090c 	.word	0x2000090c
 80041e4:	20000920 	.word	0x20000920
 80041e8:	20000924 	.word	0x20000924
 80041ec:	200009d4 	.word	0x200009d4
 80041f0:	20000934 	.word	0x20000934
 80041f4:	08004c8c 	.word	0x08004c8c

080041f8 <vTimerSetTimerID>:
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID )
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d109      	bne.n	8004220 <vTimerSetTimerID+0x28>
 800420c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004210:	f383 8811 	msr	BASEPRI, r3
 8004214:	f3bf 8f6f 	isb	sy
 8004218:	f3bf 8f4f 	dsb	sy
 800421c:	60bb      	str	r3, [r7, #8]
 800421e:	e7fe      	b.n	800421e <vTimerSetTimerID+0x26>

	taskENTER_CRITICAL();
 8004220:	f000 f8f2 	bl	8004408 <vPortEnterCritical>
	{
		pxTimer->pvTimerID = pvNewID;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	621a      	str	r2, [r3, #32]
	}
	taskEXIT_CRITICAL();
 800422a:	f000 f91b 	bl	8004464 <vPortExitCritical>
}
 800422e:	bf00      	nop
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
	...

08004238 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	3b04      	subs	r3, #4
 8004248:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004250:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	3b04      	subs	r3, #4
 8004256:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	f023 0201 	bic.w	r2, r3, #1
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	3b04      	subs	r3, #4
 8004266:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004268:	4a08      	ldr	r2, [pc, #32]	; (800428c <pxPortInitialiseStack+0x54>)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	3b14      	subs	r3, #20
 8004272:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	3b20      	subs	r3, #32
 800427e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004280:	68fb      	ldr	r3, [r7, #12]
}
 8004282:	4618      	mov	r0, r3
 8004284:	3714      	adds	r7, #20
 8004286:	46bd      	mov	sp, r7
 8004288:	bc80      	pop	{r7}
 800428a:	4770      	bx	lr
 800428c:	08004291 	.word	0x08004291

08004290 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004296:	2300      	movs	r3, #0
 8004298:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800429a:	4b10      	ldr	r3, [pc, #64]	; (80042dc <prvTaskExitError+0x4c>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a2:	d009      	beq.n	80042b8 <prvTaskExitError+0x28>
 80042a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a8:	f383 8811 	msr	BASEPRI, r3
 80042ac:	f3bf 8f6f 	isb	sy
 80042b0:	f3bf 8f4f 	dsb	sy
 80042b4:	60fb      	str	r3, [r7, #12]
 80042b6:	e7fe      	b.n	80042b6 <prvTaskExitError+0x26>
 80042b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042bc:	f383 8811 	msr	BASEPRI, r3
 80042c0:	f3bf 8f6f 	isb	sy
 80042c4:	f3bf 8f4f 	dsb	sy
 80042c8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80042ca:	bf00      	nop
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d0fc      	beq.n	80042cc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80042d2:	bf00      	nop
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bc80      	pop	{r7}
 80042da:	4770      	bx	lr
 80042dc:	20000014 	.word	0x20000014

080042e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80042e0:	4b07      	ldr	r3, [pc, #28]	; (8004300 <pxCurrentTCBConst2>)
 80042e2:	6819      	ldr	r1, [r3, #0]
 80042e4:	6808      	ldr	r0, [r1, #0]
 80042e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80042ea:	f380 8809 	msr	PSP, r0
 80042ee:	f3bf 8f6f 	isb	sy
 80042f2:	f04f 0000 	mov.w	r0, #0
 80042f6:	f380 8811 	msr	BASEPRI, r0
 80042fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80042fe:	4770      	bx	lr

08004300 <pxCurrentTCBConst2>:
 8004300:	200003f8 	.word	0x200003f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004304:	bf00      	nop
 8004306:	bf00      	nop

08004308 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004308:	4806      	ldr	r0, [pc, #24]	; (8004324 <prvPortStartFirstTask+0x1c>)
 800430a:	6800      	ldr	r0, [r0, #0]
 800430c:	6800      	ldr	r0, [r0, #0]
 800430e:	f380 8808 	msr	MSP, r0
 8004312:	b662      	cpsie	i
 8004314:	b661      	cpsie	f
 8004316:	f3bf 8f4f 	dsb	sy
 800431a:	f3bf 8f6f 	isb	sy
 800431e:	df00      	svc	0
 8004320:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004322:	bf00      	nop
 8004324:	e000ed08 	.word	0xe000ed08

08004328 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800432e:	4b31      	ldr	r3, [pc, #196]	; (80043f4 <xPortStartScheduler+0xcc>)
 8004330:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	b2db      	uxtb	r3, r3
 8004338:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	22ff      	movs	r2, #255	; 0xff
 800433e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	b2db      	uxtb	r3, r3
 8004346:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004348:	78fb      	ldrb	r3, [r7, #3]
 800434a:	b2db      	uxtb	r3, r3
 800434c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004350:	b2da      	uxtb	r2, r3
 8004352:	4b29      	ldr	r3, [pc, #164]	; (80043f8 <xPortStartScheduler+0xd0>)
 8004354:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004356:	4b29      	ldr	r3, [pc, #164]	; (80043fc <xPortStartScheduler+0xd4>)
 8004358:	2207      	movs	r2, #7
 800435a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800435c:	e009      	b.n	8004372 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800435e:	4b27      	ldr	r3, [pc, #156]	; (80043fc <xPortStartScheduler+0xd4>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	3b01      	subs	r3, #1
 8004364:	4a25      	ldr	r2, [pc, #148]	; (80043fc <xPortStartScheduler+0xd4>)
 8004366:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004368:	78fb      	ldrb	r3, [r7, #3]
 800436a:	b2db      	uxtb	r3, r3
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	b2db      	uxtb	r3, r3
 8004370:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004372:	78fb      	ldrb	r3, [r7, #3]
 8004374:	b2db      	uxtb	r3, r3
 8004376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800437a:	2b80      	cmp	r3, #128	; 0x80
 800437c:	d0ef      	beq.n	800435e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800437e:	4b1f      	ldr	r3, [pc, #124]	; (80043fc <xPortStartScheduler+0xd4>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f1c3 0307 	rsb	r3, r3, #7
 8004386:	2b04      	cmp	r3, #4
 8004388:	d009      	beq.n	800439e <xPortStartScheduler+0x76>
 800438a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438e:	f383 8811 	msr	BASEPRI, r3
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	60bb      	str	r3, [r7, #8]
 800439c:	e7fe      	b.n	800439c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800439e:	4b17      	ldr	r3, [pc, #92]	; (80043fc <xPortStartScheduler+0xd4>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	021b      	lsls	r3, r3, #8
 80043a4:	4a15      	ldr	r2, [pc, #84]	; (80043fc <xPortStartScheduler+0xd4>)
 80043a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80043a8:	4b14      	ldr	r3, [pc, #80]	; (80043fc <xPortStartScheduler+0xd4>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043b0:	4a12      	ldr	r2, [pc, #72]	; (80043fc <xPortStartScheduler+0xd4>)
 80043b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	b2da      	uxtb	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80043bc:	4b10      	ldr	r3, [pc, #64]	; (8004400 <xPortStartScheduler+0xd8>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a0f      	ldr	r2, [pc, #60]	; (8004400 <xPortStartScheduler+0xd8>)
 80043c2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80043c8:	4b0d      	ldr	r3, [pc, #52]	; (8004400 <xPortStartScheduler+0xd8>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a0c      	ldr	r2, [pc, #48]	; (8004400 <xPortStartScheduler+0xd8>)
 80043ce:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80043d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80043d4:	f000 f8b0 	bl	8004538 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80043d8:	4b0a      	ldr	r3, [pc, #40]	; (8004404 <xPortStartScheduler+0xdc>)
 80043da:	2200      	movs	r2, #0
 80043dc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80043de:	f7ff ff93 	bl	8004308 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80043e2:	f7ff f86b 	bl	80034bc <vTaskSwitchContext>
	prvTaskExitError();
 80043e6:	f7ff ff53 	bl	8004290 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3710      	adds	r7, #16
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	e000e400 	.word	0xe000e400
 80043f8:	20000a24 	.word	0x20000a24
 80043fc:	20000a28 	.word	0x20000a28
 8004400:	e000ed20 	.word	0xe000ed20
 8004404:	20000014 	.word	0x20000014

08004408 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004412:	f383 8811 	msr	BASEPRI, r3
 8004416:	f3bf 8f6f 	isb	sy
 800441a:	f3bf 8f4f 	dsb	sy
 800441e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004420:	4b0e      	ldr	r3, [pc, #56]	; (800445c <vPortEnterCritical+0x54>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	3301      	adds	r3, #1
 8004426:	4a0d      	ldr	r2, [pc, #52]	; (800445c <vPortEnterCritical+0x54>)
 8004428:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800442a:	4b0c      	ldr	r3, [pc, #48]	; (800445c <vPortEnterCritical+0x54>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d10e      	bne.n	8004450 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004432:	4b0b      	ldr	r3, [pc, #44]	; (8004460 <vPortEnterCritical+0x58>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b00      	cmp	r3, #0
 800443a:	d009      	beq.n	8004450 <vPortEnterCritical+0x48>
 800443c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004440:	f383 8811 	msr	BASEPRI, r3
 8004444:	f3bf 8f6f 	isb	sy
 8004448:	f3bf 8f4f 	dsb	sy
 800444c:	603b      	str	r3, [r7, #0]
 800444e:	e7fe      	b.n	800444e <vPortEnterCritical+0x46>
	}
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	bc80      	pop	{r7}
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	20000014 	.word	0x20000014
 8004460:	e000ed04 	.word	0xe000ed04

08004464 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800446a:	4b10      	ldr	r3, [pc, #64]	; (80044ac <vPortExitCritical+0x48>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d109      	bne.n	8004486 <vPortExitCritical+0x22>
 8004472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004476:	f383 8811 	msr	BASEPRI, r3
 800447a:	f3bf 8f6f 	isb	sy
 800447e:	f3bf 8f4f 	dsb	sy
 8004482:	607b      	str	r3, [r7, #4]
 8004484:	e7fe      	b.n	8004484 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004486:	4b09      	ldr	r3, [pc, #36]	; (80044ac <vPortExitCritical+0x48>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	3b01      	subs	r3, #1
 800448c:	4a07      	ldr	r2, [pc, #28]	; (80044ac <vPortExitCritical+0x48>)
 800448e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004490:	4b06      	ldr	r3, [pc, #24]	; (80044ac <vPortExitCritical+0x48>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d104      	bne.n	80044a2 <vPortExitCritical+0x3e>
 8004498:	2300      	movs	r3, #0
 800449a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80044a2:	bf00      	nop
 80044a4:	370c      	adds	r7, #12
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bc80      	pop	{r7}
 80044aa:	4770      	bx	lr
 80044ac:	20000014 	.word	0x20000014

080044b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80044b0:	f3ef 8009 	mrs	r0, PSP
 80044b4:	f3bf 8f6f 	isb	sy
 80044b8:	4b0d      	ldr	r3, [pc, #52]	; (80044f0 <pxCurrentTCBConst>)
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80044c0:	6010      	str	r0, [r2, #0]
 80044c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80044c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80044ca:	f380 8811 	msr	BASEPRI, r0
 80044ce:	f7fe fff5 	bl	80034bc <vTaskSwitchContext>
 80044d2:	f04f 0000 	mov.w	r0, #0
 80044d6:	f380 8811 	msr	BASEPRI, r0
 80044da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80044de:	6819      	ldr	r1, [r3, #0]
 80044e0:	6808      	ldr	r0, [r1, #0]
 80044e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80044e6:	f380 8809 	msr	PSP, r0
 80044ea:	f3bf 8f6f 	isb	sy
 80044ee:	4770      	bx	lr

080044f0 <pxCurrentTCBConst>:
 80044f0:	200003f8 	.word	0x200003f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80044f4:	bf00      	nop
 80044f6:	bf00      	nop

080044f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
	__asm volatile
 80044fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004502:	f383 8811 	msr	BASEPRI, r3
 8004506:	f3bf 8f6f 	isb	sy
 800450a:	f3bf 8f4f 	dsb	sy
 800450e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004510:	f7fe ff16 	bl	8003340 <xTaskIncrementTick>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d003      	beq.n	8004522 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800451a:	4b06      	ldr	r3, [pc, #24]	; (8004534 <xPortSysTickHandler+0x3c>)
 800451c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004520:	601a      	str	r2, [r3, #0]
 8004522:	2300      	movs	r3, #0
 8004524:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800452c:	bf00      	nop
 800452e:	3708      	adds	r7, #8
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	e000ed04 	.word	0xe000ed04

08004538 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800453c:	4b0a      	ldr	r3, [pc, #40]	; (8004568 <vPortSetupTimerInterrupt+0x30>)
 800453e:	2200      	movs	r2, #0
 8004540:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004542:	4b0a      	ldr	r3, [pc, #40]	; (800456c <vPortSetupTimerInterrupt+0x34>)
 8004544:	2200      	movs	r2, #0
 8004546:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004548:	4b09      	ldr	r3, [pc, #36]	; (8004570 <vPortSetupTimerInterrupt+0x38>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a09      	ldr	r2, [pc, #36]	; (8004574 <vPortSetupTimerInterrupt+0x3c>)
 800454e:	fba2 2303 	umull	r2, r3, r2, r3
 8004552:	099b      	lsrs	r3, r3, #6
 8004554:	4a08      	ldr	r2, [pc, #32]	; (8004578 <vPortSetupTimerInterrupt+0x40>)
 8004556:	3b01      	subs	r3, #1
 8004558:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800455a:	4b03      	ldr	r3, [pc, #12]	; (8004568 <vPortSetupTimerInterrupt+0x30>)
 800455c:	2207      	movs	r2, #7
 800455e:	601a      	str	r2, [r3, #0]
}
 8004560:	bf00      	nop
 8004562:	46bd      	mov	sp, r7
 8004564:	bc80      	pop	{r7}
 8004566:	4770      	bx	lr
 8004568:	e000e010 	.word	0xe000e010
 800456c:	e000e018 	.word	0xe000e018
 8004570:	20000008 	.word	0x20000008
 8004574:	10624dd3 	.word	0x10624dd3
 8004578:	e000e014 	.word	0xe000e014

0800457c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004582:	f3ef 8305 	mrs	r3, IPSR
 8004586:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2b0f      	cmp	r3, #15
 800458c:	d913      	bls.n	80045b6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800458e:	4a15      	ldr	r2, [pc, #84]	; (80045e4 <vPortValidateInterruptPriority+0x68>)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	4413      	add	r3, r2
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004598:	4b13      	ldr	r3, [pc, #76]	; (80045e8 <vPortValidateInterruptPriority+0x6c>)
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	7afa      	ldrb	r2, [r7, #11]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d209      	bcs.n	80045b6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80045a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a6:	f383 8811 	msr	BASEPRI, r3
 80045aa:	f3bf 8f6f 	isb	sy
 80045ae:	f3bf 8f4f 	dsb	sy
 80045b2:	607b      	str	r3, [r7, #4]
 80045b4:	e7fe      	b.n	80045b4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80045b6:	4b0d      	ldr	r3, [pc, #52]	; (80045ec <vPortValidateInterruptPriority+0x70>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80045be:	4b0c      	ldr	r3, [pc, #48]	; (80045f0 <vPortValidateInterruptPriority+0x74>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d909      	bls.n	80045da <vPortValidateInterruptPriority+0x5e>
 80045c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ca:	f383 8811 	msr	BASEPRI, r3
 80045ce:	f3bf 8f6f 	isb	sy
 80045d2:	f3bf 8f4f 	dsb	sy
 80045d6:	603b      	str	r3, [r7, #0]
 80045d8:	e7fe      	b.n	80045d8 <vPortValidateInterruptPriority+0x5c>
	}
 80045da:	bf00      	nop
 80045dc:	3714      	adds	r7, #20
 80045de:	46bd      	mov	sp, r7
 80045e0:	bc80      	pop	{r7}
 80045e2:	4770      	bx	lr
 80045e4:	e000e3f0 	.word	0xe000e3f0
 80045e8:	20000a24 	.word	0x20000a24
 80045ec:	e000ed0c 	.word	0xe000ed0c
 80045f0:	20000a28 	.word	0x20000a28

080045f4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b08a      	sub	sp, #40	; 0x28
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80045fc:	2300      	movs	r3, #0
 80045fe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004600:	f7fe fde6 	bl	80031d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004604:	4b57      	ldr	r3, [pc, #348]	; (8004764 <pvPortMalloc+0x170>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d101      	bne.n	8004610 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800460c:	f000 f90c 	bl	8004828 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004610:	4b55      	ldr	r3, [pc, #340]	; (8004768 <pvPortMalloc+0x174>)
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4013      	ands	r3, r2
 8004618:	2b00      	cmp	r3, #0
 800461a:	f040 808c 	bne.w	8004736 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d01c      	beq.n	800465e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004624:	2208      	movs	r2, #8
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4413      	add	r3, r2
 800462a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f003 0307 	and.w	r3, r3, #7
 8004632:	2b00      	cmp	r3, #0
 8004634:	d013      	beq.n	800465e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f023 0307 	bic.w	r3, r3, #7
 800463c:	3308      	adds	r3, #8
 800463e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f003 0307 	and.w	r3, r3, #7
 8004646:	2b00      	cmp	r3, #0
 8004648:	d009      	beq.n	800465e <pvPortMalloc+0x6a>
 800464a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464e:	f383 8811 	msr	BASEPRI, r3
 8004652:	f3bf 8f6f 	isb	sy
 8004656:	f3bf 8f4f 	dsb	sy
 800465a:	617b      	str	r3, [r7, #20]
 800465c:	e7fe      	b.n	800465c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d068      	beq.n	8004736 <pvPortMalloc+0x142>
 8004664:	4b41      	ldr	r3, [pc, #260]	; (800476c <pvPortMalloc+0x178>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	429a      	cmp	r2, r3
 800466c:	d863      	bhi.n	8004736 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800466e:	4b40      	ldr	r3, [pc, #256]	; (8004770 <pvPortMalloc+0x17c>)
 8004670:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004672:	4b3f      	ldr	r3, [pc, #252]	; (8004770 <pvPortMalloc+0x17c>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004678:	e004      	b.n	8004684 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800467a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	429a      	cmp	r2, r3
 800468c:	d903      	bls.n	8004696 <pvPortMalloc+0xa2>
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1f1      	bne.n	800467a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004696:	4b33      	ldr	r3, [pc, #204]	; (8004764 <pvPortMalloc+0x170>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800469c:	429a      	cmp	r2, r3
 800469e:	d04a      	beq.n	8004736 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80046a0:	6a3b      	ldr	r3, [r7, #32]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2208      	movs	r2, #8
 80046a6:	4413      	add	r3, r2
 80046a8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	6a3b      	ldr	r3, [r7, #32]
 80046b0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80046b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	1ad2      	subs	r2, r2, r3
 80046ba:	2308      	movs	r3, #8
 80046bc:	005b      	lsls	r3, r3, #1
 80046be:	429a      	cmp	r2, r3
 80046c0:	d91e      	bls.n	8004700 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80046c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4413      	add	r3, r2
 80046c8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	f003 0307 	and.w	r3, r3, #7
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d009      	beq.n	80046e8 <pvPortMalloc+0xf4>
 80046d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d8:	f383 8811 	msr	BASEPRI, r3
 80046dc:	f3bf 8f6f 	isb	sy
 80046e0:	f3bf 8f4f 	dsb	sy
 80046e4:	613b      	str	r3, [r7, #16]
 80046e6:	e7fe      	b.n	80046e6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80046e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ea:	685a      	ldr	r2, [r3, #4]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	1ad2      	subs	r2, r2, r3
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80046f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80046fa:	69b8      	ldr	r0, [r7, #24]
 80046fc:	f000 f8f6 	bl	80048ec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004700:	4b1a      	ldr	r3, [pc, #104]	; (800476c <pvPortMalloc+0x178>)
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	4a18      	ldr	r2, [pc, #96]	; (800476c <pvPortMalloc+0x178>)
 800470c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800470e:	4b17      	ldr	r3, [pc, #92]	; (800476c <pvPortMalloc+0x178>)
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	4b18      	ldr	r3, [pc, #96]	; (8004774 <pvPortMalloc+0x180>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	429a      	cmp	r2, r3
 8004718:	d203      	bcs.n	8004722 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800471a:	4b14      	ldr	r3, [pc, #80]	; (800476c <pvPortMalloc+0x178>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a15      	ldr	r2, [pc, #84]	; (8004774 <pvPortMalloc+0x180>)
 8004720:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	4b10      	ldr	r3, [pc, #64]	; (8004768 <pvPortMalloc+0x174>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	431a      	orrs	r2, r3
 800472c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004732:	2200      	movs	r2, #0
 8004734:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004736:	f7fe fd59 	bl	80031ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	f003 0307 	and.w	r3, r3, #7
 8004740:	2b00      	cmp	r3, #0
 8004742:	d009      	beq.n	8004758 <pvPortMalloc+0x164>
 8004744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004748:	f383 8811 	msr	BASEPRI, r3
 800474c:	f3bf 8f6f 	isb	sy
 8004750:	f3bf 8f4f 	dsb	sy
 8004754:	60fb      	str	r3, [r7, #12]
 8004756:	e7fe      	b.n	8004756 <pvPortMalloc+0x162>
	return pvReturn;
 8004758:	69fb      	ldr	r3, [r7, #28]
}
 800475a:	4618      	mov	r0, r3
 800475c:	3728      	adds	r7, #40	; 0x28
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	20001a34 	.word	0x20001a34
 8004768:	20001a40 	.word	0x20001a40
 800476c:	20001a38 	.word	0x20001a38
 8004770:	20001a2c 	.word	0x20001a2c
 8004774:	20001a3c 	.word	0x20001a3c

08004778 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b086      	sub	sp, #24
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d046      	beq.n	8004818 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800478a:	2308      	movs	r3, #8
 800478c:	425b      	negs	r3, r3
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	4413      	add	r3, r2
 8004792:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	685a      	ldr	r2, [r3, #4]
 800479c:	4b20      	ldr	r3, [pc, #128]	; (8004820 <vPortFree+0xa8>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4013      	ands	r3, r2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d109      	bne.n	80047ba <vPortFree+0x42>
 80047a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047aa:	f383 8811 	msr	BASEPRI, r3
 80047ae:	f3bf 8f6f 	isb	sy
 80047b2:	f3bf 8f4f 	dsb	sy
 80047b6:	60fb      	str	r3, [r7, #12]
 80047b8:	e7fe      	b.n	80047b8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d009      	beq.n	80047d6 <vPortFree+0x5e>
 80047c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c6:	f383 8811 	msr	BASEPRI, r3
 80047ca:	f3bf 8f6f 	isb	sy
 80047ce:	f3bf 8f4f 	dsb	sy
 80047d2:	60bb      	str	r3, [r7, #8]
 80047d4:	e7fe      	b.n	80047d4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	685a      	ldr	r2, [r3, #4]
 80047da:	4b11      	ldr	r3, [pc, #68]	; (8004820 <vPortFree+0xa8>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4013      	ands	r3, r2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d019      	beq.n	8004818 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d115      	bne.n	8004818 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	685a      	ldr	r2, [r3, #4]
 80047f0:	4b0b      	ldr	r3, [pc, #44]	; (8004820 <vPortFree+0xa8>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	43db      	mvns	r3, r3
 80047f6:	401a      	ands	r2, r3
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80047fc:	f7fe fce8 	bl	80031d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	685a      	ldr	r2, [r3, #4]
 8004804:	4b07      	ldr	r3, [pc, #28]	; (8004824 <vPortFree+0xac>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4413      	add	r3, r2
 800480a:	4a06      	ldr	r2, [pc, #24]	; (8004824 <vPortFree+0xac>)
 800480c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800480e:	6938      	ldr	r0, [r7, #16]
 8004810:	f000 f86c 	bl	80048ec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004814:	f7fe fcea 	bl	80031ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004818:	bf00      	nop
 800481a:	3718      	adds	r7, #24
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	20001a40 	.word	0x20001a40
 8004824:	20001a38 	.word	0x20001a38

08004828 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800482e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004832:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004834:	4b27      	ldr	r3, [pc, #156]	; (80048d4 <prvHeapInit+0xac>)
 8004836:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f003 0307 	and.w	r3, r3, #7
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00c      	beq.n	800485c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	3307      	adds	r3, #7
 8004846:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f023 0307 	bic.w	r3, r3, #7
 800484e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	4a1f      	ldr	r2, [pc, #124]	; (80048d4 <prvHeapInit+0xac>)
 8004858:	4413      	add	r3, r2
 800485a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004860:	4a1d      	ldr	r2, [pc, #116]	; (80048d8 <prvHeapInit+0xb0>)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004866:	4b1c      	ldr	r3, [pc, #112]	; (80048d8 <prvHeapInit+0xb0>)
 8004868:	2200      	movs	r2, #0
 800486a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	4413      	add	r3, r2
 8004872:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004874:	2208      	movs	r2, #8
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	1a9b      	subs	r3, r3, r2
 800487a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f023 0307 	bic.w	r3, r3, #7
 8004882:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	4a15      	ldr	r2, [pc, #84]	; (80048dc <prvHeapInit+0xb4>)
 8004888:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800488a:	4b14      	ldr	r3, [pc, #80]	; (80048dc <prvHeapInit+0xb4>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2200      	movs	r2, #0
 8004890:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004892:	4b12      	ldr	r3, [pc, #72]	; (80048dc <prvHeapInit+0xb4>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2200      	movs	r2, #0
 8004898:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	1ad2      	subs	r2, r2, r3
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80048a8:	4b0c      	ldr	r3, [pc, #48]	; (80048dc <prvHeapInit+0xb4>)
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	4a0a      	ldr	r2, [pc, #40]	; (80048e0 <prvHeapInit+0xb8>)
 80048b6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	4a09      	ldr	r2, [pc, #36]	; (80048e4 <prvHeapInit+0xbc>)
 80048be:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80048c0:	4b09      	ldr	r3, [pc, #36]	; (80048e8 <prvHeapInit+0xc0>)
 80048c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80048c6:	601a      	str	r2, [r3, #0]
}
 80048c8:	bf00      	nop
 80048ca:	3714      	adds	r7, #20
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bc80      	pop	{r7}
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	20000a2c 	.word	0x20000a2c
 80048d8:	20001a2c 	.word	0x20001a2c
 80048dc:	20001a34 	.word	0x20001a34
 80048e0:	20001a3c 	.word	0x20001a3c
 80048e4:	20001a38 	.word	0x20001a38
 80048e8:	20001a40 	.word	0x20001a40

080048ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80048f4:	4b27      	ldr	r3, [pc, #156]	; (8004994 <prvInsertBlockIntoFreeList+0xa8>)
 80048f6:	60fb      	str	r3, [r7, #12]
 80048f8:	e002      	b.n	8004900 <prvInsertBlockIntoFreeList+0x14>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	60fb      	str	r3, [r7, #12]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	429a      	cmp	r2, r3
 8004908:	d8f7      	bhi.n	80048fa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	4413      	add	r3, r2
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	429a      	cmp	r2, r3
 800491a:	d108      	bne.n	800492e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	685a      	ldr	r2, [r3, #4]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	441a      	add	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	441a      	add	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	429a      	cmp	r2, r3
 8004940:	d118      	bne.n	8004974 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	4b14      	ldr	r3, [pc, #80]	; (8004998 <prvInsertBlockIntoFreeList+0xac>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	429a      	cmp	r2, r3
 800494c:	d00d      	beq.n	800496a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685a      	ldr	r2, [r3, #4]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	441a      	add	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	601a      	str	r2, [r3, #0]
 8004968:	e008      	b.n	800497c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800496a:	4b0b      	ldr	r3, [pc, #44]	; (8004998 <prvInsertBlockIntoFreeList+0xac>)
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	601a      	str	r2, [r3, #0]
 8004972:	e003      	b.n	800497c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	429a      	cmp	r2, r3
 8004982:	d002      	beq.n	800498a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800498a:	bf00      	nop
 800498c:	3714      	adds	r7, #20
 800498e:	46bd      	mov	sp, r7
 8004990:	bc80      	pop	{r7}
 8004992:	4770      	bx	lr
 8004994:	20001a2c 	.word	0x20001a2c
 8004998:	20001a34 	.word	0x20001a34

0800499c <__libc_init_array>:
 800499c:	b570      	push	{r4, r5, r6, lr}
 800499e:	2500      	movs	r5, #0
 80049a0:	4e0c      	ldr	r6, [pc, #48]	; (80049d4 <__libc_init_array+0x38>)
 80049a2:	4c0d      	ldr	r4, [pc, #52]	; (80049d8 <__libc_init_array+0x3c>)
 80049a4:	1ba4      	subs	r4, r4, r6
 80049a6:	10a4      	asrs	r4, r4, #2
 80049a8:	42a5      	cmp	r5, r4
 80049aa:	d109      	bne.n	80049c0 <__libc_init_array+0x24>
 80049ac:	f000 f886 	bl	8004abc <_init>
 80049b0:	2500      	movs	r5, #0
 80049b2:	4e0a      	ldr	r6, [pc, #40]	; (80049dc <__libc_init_array+0x40>)
 80049b4:	4c0a      	ldr	r4, [pc, #40]	; (80049e0 <__libc_init_array+0x44>)
 80049b6:	1ba4      	subs	r4, r4, r6
 80049b8:	10a4      	asrs	r4, r4, #2
 80049ba:	42a5      	cmp	r5, r4
 80049bc:	d105      	bne.n	80049ca <__libc_init_array+0x2e>
 80049be:	bd70      	pop	{r4, r5, r6, pc}
 80049c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80049c4:	4798      	blx	r3
 80049c6:	3501      	adds	r5, #1
 80049c8:	e7ee      	b.n	80049a8 <__libc_init_array+0xc>
 80049ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80049ce:	4798      	blx	r3
 80049d0:	3501      	adds	r5, #1
 80049d2:	e7f2      	b.n	80049ba <__libc_init_array+0x1e>
 80049d4:	08004cf8 	.word	0x08004cf8
 80049d8:	08004cf8 	.word	0x08004cf8
 80049dc:	08004cf8 	.word	0x08004cf8
 80049e0:	08004cfc 	.word	0x08004cfc

080049e4 <__itoa>:
 80049e4:	1e93      	subs	r3, r2, #2
 80049e6:	2b22      	cmp	r3, #34	; 0x22
 80049e8:	b510      	push	{r4, lr}
 80049ea:	460c      	mov	r4, r1
 80049ec:	d904      	bls.n	80049f8 <__itoa+0x14>
 80049ee:	2300      	movs	r3, #0
 80049f0:	461c      	mov	r4, r3
 80049f2:	700b      	strb	r3, [r1, #0]
 80049f4:	4620      	mov	r0, r4
 80049f6:	bd10      	pop	{r4, pc}
 80049f8:	2a0a      	cmp	r2, #10
 80049fa:	d109      	bne.n	8004a10 <__itoa+0x2c>
 80049fc:	2800      	cmp	r0, #0
 80049fe:	da07      	bge.n	8004a10 <__itoa+0x2c>
 8004a00:	232d      	movs	r3, #45	; 0x2d
 8004a02:	700b      	strb	r3, [r1, #0]
 8004a04:	2101      	movs	r1, #1
 8004a06:	4240      	negs	r0, r0
 8004a08:	4421      	add	r1, r4
 8004a0a:	f000 f819 	bl	8004a40 <__utoa>
 8004a0e:	e7f1      	b.n	80049f4 <__itoa+0x10>
 8004a10:	2100      	movs	r1, #0
 8004a12:	e7f9      	b.n	8004a08 <__itoa+0x24>

08004a14 <itoa>:
 8004a14:	f7ff bfe6 	b.w	80049e4 <__itoa>

08004a18 <memcpy>:
 8004a18:	b510      	push	{r4, lr}
 8004a1a:	1e43      	subs	r3, r0, #1
 8004a1c:	440a      	add	r2, r1
 8004a1e:	4291      	cmp	r1, r2
 8004a20:	d100      	bne.n	8004a24 <memcpy+0xc>
 8004a22:	bd10      	pop	{r4, pc}
 8004a24:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a2c:	e7f7      	b.n	8004a1e <memcpy+0x6>

08004a2e <memset>:
 8004a2e:	4603      	mov	r3, r0
 8004a30:	4402      	add	r2, r0
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d100      	bne.n	8004a38 <memset+0xa>
 8004a36:	4770      	bx	lr
 8004a38:	f803 1b01 	strb.w	r1, [r3], #1
 8004a3c:	e7f9      	b.n	8004a32 <memset+0x4>
	...

08004a40 <__utoa>:
 8004a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a42:	b08b      	sub	sp, #44	; 0x2c
 8004a44:	4605      	mov	r5, r0
 8004a46:	460c      	mov	r4, r1
 8004a48:	466e      	mov	r6, sp
 8004a4a:	4b1b      	ldr	r3, [pc, #108]	; (8004ab8 <__utoa+0x78>)
 8004a4c:	f103 0c20 	add.w	ip, r3, #32
 8004a50:	4637      	mov	r7, r6
 8004a52:	6818      	ldr	r0, [r3, #0]
 8004a54:	6859      	ldr	r1, [r3, #4]
 8004a56:	3308      	adds	r3, #8
 8004a58:	c703      	stmia	r7!, {r0, r1}
 8004a5a:	4563      	cmp	r3, ip
 8004a5c:	463e      	mov	r6, r7
 8004a5e:	d1f7      	bne.n	8004a50 <__utoa+0x10>
 8004a60:	6818      	ldr	r0, [r3, #0]
 8004a62:	791b      	ldrb	r3, [r3, #4]
 8004a64:	6038      	str	r0, [r7, #0]
 8004a66:	713b      	strb	r3, [r7, #4]
 8004a68:	1e93      	subs	r3, r2, #2
 8004a6a:	2b22      	cmp	r3, #34	; 0x22
 8004a6c:	f04f 0300 	mov.w	r3, #0
 8004a70:	d904      	bls.n	8004a7c <__utoa+0x3c>
 8004a72:	7023      	strb	r3, [r4, #0]
 8004a74:	461c      	mov	r4, r3
 8004a76:	4620      	mov	r0, r4
 8004a78:	b00b      	add	sp, #44	; 0x2c
 8004a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a7c:	1e66      	subs	r6, r4, #1
 8004a7e:	fbb5 f0f2 	udiv	r0, r5, r2
 8004a82:	fb02 5510 	mls	r5, r2, r0, r5
 8004a86:	af0a      	add	r7, sp, #40	; 0x28
 8004a88:	443d      	add	r5, r7
 8004a8a:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8004a8e:	1c59      	adds	r1, r3, #1
 8004a90:	f806 5f01 	strb.w	r5, [r6, #1]!
 8004a94:	4605      	mov	r5, r0
 8004a96:	b968      	cbnz	r0, 8004ab4 <__utoa+0x74>
 8004a98:	4622      	mov	r2, r4
 8004a9a:	5460      	strb	r0, [r4, r1]
 8004a9c:	4423      	add	r3, r4
 8004a9e:	1b19      	subs	r1, r3, r4
 8004aa0:	1b10      	subs	r0, r2, r4
 8004aa2:	4281      	cmp	r1, r0
 8004aa4:	dde7      	ble.n	8004a76 <__utoa+0x36>
 8004aa6:	7811      	ldrb	r1, [r2, #0]
 8004aa8:	7818      	ldrb	r0, [r3, #0]
 8004aaa:	f802 0b01 	strb.w	r0, [r2], #1
 8004aae:	f803 1901 	strb.w	r1, [r3], #-1
 8004ab2:	e7f4      	b.n	8004a9e <__utoa+0x5e>
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	e7e2      	b.n	8004a7e <__utoa+0x3e>
 8004ab8:	08004cd0 	.word	0x08004cd0

08004abc <_init>:
 8004abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004abe:	bf00      	nop
 8004ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ac2:	bc08      	pop	{r3}
 8004ac4:	469e      	mov	lr, r3
 8004ac6:	4770      	bx	lr

08004ac8 <_fini>:
 8004ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aca:	bf00      	nop
 8004acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ace:	bc08      	pop	{r3}
 8004ad0:	469e      	mov	lr, r3
 8004ad2:	4770      	bx	lr
